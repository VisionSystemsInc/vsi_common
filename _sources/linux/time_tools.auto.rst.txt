==========
Time Tools
==========

.. default-domain:: bash

.. file:: time_tools.bsh


.. function:: get_time_seconds

Print the epoch time in seconds

Uses the date command to print nanosecond-accurate epoch time, if your date command supports that feature.

Else, uses python or ruby if available to get microsecond-accurate time. If all else fails, use the date command, which sometimes does not support more than second accuracy.

.. function:: timeout

:Arguments: * ``$1`` - Timeout in integer seconds
            * ``$2``... - Command to execute
:Return Value: ``142`` - On time out
:Uses: perl

macOS function similar to linux timeout

.. rubric:: Bugs

Since this uses SIGALRM, bash will print out "Alarm clock: 14" to indicate SIGALRM (14) has been raised. This could cause unexpected text in stderr if you are parsing it.

.. seealso::

   https://www.cyberciti.biz/faq/shell-scripting-run-command-under-alarmclock/

.. function:: tic

Part of a tic/toc functionality to easily take time measurements.

.. rubric:: Example

.. code-block:: bash

  $ tic
  $ sleep 1.3
  $ toc_ms
  1302 ms

.. seealso::
 :func:`toc`, :func:`toc_ms`, :func:`toc_ns`

.. function:: toc

Prints the time passed since calling :func:`toc` in seconds (rounded).

Also stores the number of seconds passed in ``toc_time``

.. function:: toc_ms

Prints the time passed since calling :func:`toc` in milliseconds (rounded).

Also stores the number of milliseconds passed in ``toc_time``

.. note::

  Older ``date`` commands that don't support nanoseconds, will not be more accurate than a second.

.. function:: toc_ns

Prints the time passed since calling :func:`toc` in nanoseconds.

Also stores the number of nanoseconds passed in ``toc_time``

.. note::

  Older ``date`` commands that don't support nanoseconds, will not be more accurate than a second.

