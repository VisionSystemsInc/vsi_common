#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/string_tools.bsh"

begin_test "String trim"
(
  setup_test

  # Normal trim
  a='     123     '
  la='123     '
  ra='     123'
  ba='123'

  # Trimming dashes
  b='--  123  --'
  lb='  123  --'
  rb='--  123  '
  bb='  123  '

  # Trimming all lower case letters
  c='qaz123wsx'
  lc='123wsx'
  rc='qaz123'
  bc='123'

  # Trim vowels
  d='aeqaz123wsxio'
  ld='qaz123wsxio'
  rd='aeqaz123wsx'
  bd='qaz123wsx'

  # Trim half the alphabet
  e='abeiouzuoieba'
  le='ouzuoieba'
  re='abeiouzuo'
  be='ouzuo'


  [ "$(ltrim "${a}")" == "${la}" ]
  [ "$(ltrim "${b}" -)" == "${lb}" ]
  [ "$(ltrim "${c}" '[:lower:]')" == "${lc}" ]
  [ "$(ltrim "${d}" 'aeiou')" == "${ld}" ]
  [ "$(ltrim "${e}" 'a-m')" == "${le}" ]

  [ "$(rtrim "${a}")" == "${ra}" ]
  [ "$(rtrim "${b}" -)" == "${rb}" ]
  [ "$(rtrim "${c}" '[:lower:]')" == "${rc}" ]
  [ "$(rtrim "${d}" 'aeiou')" == "${rd}" ]
  [ "$(rtrim "${e}" 'a-m')" == "${re}" ]

  [ "$(trim "${a}")" == "${ba}" ]
  [ "$(trim "${b}" -)" == "${bb}" ]
  [ "$(trim "${c}" '[:lower:]')" == "${bc}" ]
  [ "$(trim "${d}" 'aeiou')" == "${bd}" ]
  [ "$(trim "${e}" 'a-m')" == "${be}" ]
)
end_test

quote_tests=("hiya"
      "hi ya"
      "hi  ya"
      "hi\0ya"
      "hi\nya"
      "Hi \"  'ya \""
      '*'
      '<(ls)'
      '[ 1 = 1 ]'
      '~'
      '!! !^ !$ !?'
      '$[2*2]'
      '$((2*2))]'
      '$(ls)'
      '${q}'
      '`ls`'
      'WH\\Z\"AT!@#$q%^&*()_+|}{:?><,./'\'';[]`\=-'
      'WH\\Z\"AT!@#$q%^&*()_+|}{:?><,./'\'';[]`\=-WH\\Z\"AT!@#$q%^&*()_+|}{:?><,./'\'';[]`\=-')
unset q

begin_test "Quote Escape"
(
  setup_test

  # set -H
  # set -o history
  # echo "Hello!Tim"
  # This will not do history expansion in the unit test, but will outside the
  # unit test. This makes testing !! impossible.


  [ "$(quote_escape "Hiya ")" == "'Hiya '" ]
  [ "$(quote_escape "Hi \"  'ya \"")" == "'Hi \"  '\\''ya \"'" ]

  for x in "${quote_tests[@]}"; do
    eval "z=$(quote_escape "${x}")"
    [ "${z}" = "${x}" ]
    # eval "z=$(printf '%q' "${x}")"
    # [ "${z}" = "${x}" ]
  done

)
end_test

begin_test "Quote Substitute Escape"
(
  setup_test

  [ "$(quote_substitute_escape "Hiya ")" == "Hiya " ]
  [ "$(quote_substitute_escape "Hi \"  'ya \"")" == "Hi \\\"  'ya \\\"" ]

  for x in "${quote_tests[@]}"; do
    # eval "z=${y-$(quote_substitute_escape "${x}")}\"" # Wrong!
    eval "z=\"${y-$(quote_substitute_escape "${x}")}\""
    [ "${z}" = "${x}" ]
    eval "z=\"$(quote_substitute_escape "${x}")\""
    [ "${z}" = "${x}" ]
    # eval "z=${y-$(printf '%q' "${x}")}"
    # [ "${z}" = "${x}" ]
  done
)
end_test

begin_test "Regex Escape"
(
  setup_test

  [ "$(regex_escape abc)" = 'abc' ]
  [ "$(regex_escape '$.*[\^/')" = '\$\.\*\[\\\^\/' ]
  [ "$(regex_escape $'ab\nc\n'; echo -n ":")" = $'ab\nc\n\n:' ]

  regex_escape_threshold=2
  [ "$(regex_escape abc)" = 'abc' ]
  [ "$(regex_escape '$.*[\^/')" = '\$\.\*\[\\\^\/' ]
  [ "$(regex_escape $'ab\nc\n'; echo -n ":")" = $'ab\nc\n\n:' ]
)
end_test

begin_test "Regex Escape Range"
(
  setup_test

  [ "$(regex_escape_range a)" = "[a]" ]
  [ "$(regex_escape_range abc)" = "[abc]" ]
  # Normal special characters
  [ "$(regex_escape_range '!@#$%&*()_+={};'"'"':",./<>?')" = '[!@#$%&*()_+={};'"'"':",./<>?]' ]
  # ^ by self special case
  [ "$(regex_escape_range ^)" = "^" ]
  # other special cases
  [ "$(regex_escape_range '-^]')" = "[]^-]" ]
  [ "$(regex_escape_range 'd-a^b]c')" = "[]dabc^-]" ]
)
end_test

begin_test "Uppercase"
(
  setup_test
  x="foo b A  r"
  [ "$(uppercase "${x}")" = "FOO B A  R" ]
)
end_test

begin_test "Lowercase"
(
  setup_test
  x="Foo B A  R"
  [ "$(lowercase "${x}")" = "foo b a  r" ]
)
end_test

begin_test "Single quote unescape strings"
(
  setup_test

  # Null case
  [ "$(quote_unescape '')" = "" ]

  # Not quoted
  [ "$(quote_unescape "'foo bar")" = "'foo bar" ]
  [ "$(quote_unescape "foo bar'")" = "foo bar'" ]
  [ "$(quote_unescape "\"foo bar")" = '"foo bar' ]
  [ "$(quote_unescape "foo bar\"")" = 'foo bar"' ]
  [ "$(quote_unescape "'")" = \' ]
  [ "$(quote_unescape \")" = \" ]

  # Double quoted
  [ "$(quote_unescape '""')" = "" ]
  [ "$(quote_unescape '"foo bar"')" = 'foo bar' ]
  [ "$(quote_unescape '"foo \" \`\$ \\ bar"')" = 'foo " `$ \ bar' ]

  # Single quoted
  [ "$(quote_unescape "''")" = "" ]
  [ "$(quote_unescape "'foo bar'")" = "foo bar" ]
  [ "$(quote_unescape "'foo \"'\\''\"bar'")" = "foo \"'\"bar" ]
  [ "$(quote_unescape "''\\''foo '\\'' bar'\\'''")" = "'foo ' bar'" ]
)
end_test

begin_test "Null dump"
(
  setup_test

  H="005e" # Just trying to make the test more readable, the "NULL"
  D="002e"
  a=()
  b=(1 22 333)
  i=(a bc def)

  ans="41${H}"
  # The sed is to right trim the spaces that busybox adds in its xxd implementation
  out="$(null_dump A a | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  ans+="${H}${H}31${D}3232${D}333333"
  out="$(null_dump A a "" b | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  ans+="${H}30${H}61${D}6263${D}646566"
  out="$(null_dump A a "" b 0 i | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]
)
end_test

begin_test "_Null dump"
(
  setup_test

  H="005e" # Just trying to make the test more readable, the "NULL"
  D="002e"

  # First line
  _null_dump_first_line=1
  data1=(11 22 33)
  ans="303030${H}" # 000
  ans+="3131${D}"  # 11
  ans+="3232${D}"  # 22
  ans+="3333"      # 33
  out="$(_null_dump 000 data1 | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  # with empty datas
  _null_dump_first_line=1
  data1=(01 "" "")
  ans="616263${H}" # abc
  ans+="3031${D}"  # 01
  ans+="${D}"      # empty
  ans+=""          # empty
  out="$(_null_dump abc data1 | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  # Test name collision
  _null_dump_first_line=1
  i=(ab cd ef)
  ans="414141${H}" # AAA
  ans+="6162${D}"  # ab
  ans+="6364${D}"  # cd
  ans+="6566"      # ef
  out="$(_null_dump AAA i | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  # Test empty data set
  _null_dump_first_line=1
  x=()
  ans="30${H}"
  out="$(_null_dump 0 x | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  # Middle line
  _null_dump_first_line=0
  data1=(11 22 33)
  ans="${H}303030${H}" # 000
  ans+="3131${D}"   # 11
  ans+="3232${D}"   # 22
  ans+="3333"   # 33
  out="$(_null_dump 000 data1 | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  _null_dump_first_line=0
  pattern=(ab cd ef)
  ans="${H}414141${H}" # AAA
  ans+="6162${D}"   # ab
  ans+="6364${D}"   # cd
  ans+="6566"   # ef
  out="$(_null_dump AAA pattern | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]

  _null_dump_first_line=0
  ans="${H}30${H}"
  out="$(_null_dump 0 x | xxd -p -c 100 | sed 's| *$||')"
  [ "${ans}" = "${out}" ]
)
end_test

begin_test "Strip ANSI"
(
  setup_test

  ESC=$'\x1b'
  CSI="${ESC}["
  BEL=$'\x07'

  # Test flag not interfering
  assert_str_eq "$(strip_ansi "-e hi foo")" "-e hi foo"

  # CSI
  assert_str_eq "$(strip_ansi "hi ${CSI}30mbar${CSI}0m foo")" "hi bar foo"
  assert_str_eq "$(strip_ansi_stream <<< "hi ${CSI}30mbar${CSI}0m foo")" "hi bar foo"

  # DCS, SOS, PM, and APC
  assert_str_eq "$(strip_ansi "hi ${ESC}Pbar${ESC}\\foo")" "hi foo"
  assert_str_eq "$(strip_ansi "hi ${ESC}Xbar${ESC}\\foo")" "hi foo"
  assert_str_eq "$(strip_ansi "hi ${ESC}^bar${ESC}\\foo")" "hi foo"
  assert_str_eq "$(strip_ansi "hi ${ESC}_bar${ESC}\\foo")" "hi foo"

  # OSC
  assert_str_eq "$(strip_ansi "hi ${ESC}]bar${ESC}\\foo")" "hi foo"
  assert_str_eq "$(strip_ansi "hi ${ESC}]bar${ESC}\\foo")" "hi foo"
  assert_str_eq "$(strip_ansi "hi ${ESC}]bar${BEL}\\foo")" "hi \foo"

  # Misc
  assert_str_eq "$(strip_ansi "hi ${ESC}@bar${ESC}\\foo")" "hi barfoo"
)
end_test

begin_test "Any hash"
(
  setup_test

  if command -v shasum &> /dev/null; then
    function shasum()
    {
      if [ "$(cat -)" = "hi" ] && [ "${1}" = "-a" ] && [ "${2}" = "256" ]; then
        echo FOOBAR
      fi
    }
  else
    function sha256sum()
    {
      if [ "$(cat -)" = "hi" ]; then
        echo FOOBAR
      fi
    }
  fi

  [ "$(echo hi | find_any_hash_func)" = "FOOBAR" ]

)
end_test