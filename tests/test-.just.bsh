#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/.just"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

begin_test "just tab complete"
(
  setup_test

  JUST_HELP_SEPARATOR='#@#'
  mkdir -p foo

  echo 'JUST_HELP_FILES+=("${BASH_SOURCE[0]}")' > foo/plugin1
  # return here, so this is enough to setup the help files, but the rest
  # doesn't have to be REAL bash, but enough to fool the parser
  echo 'return' >> foo/plugin1
  echo ' d) # Plugin target' >> foo/plugin1
  echo ' e_f) # Plugin subtarget' >> foo/plugin1

  # echo 'set -xv' > Justfile
  echo 'source foo/plugin1' > Justfile
  echo 'return' >> Justfile
  echo ' a) # A' >> Justfile
  echo ' b) # b' >> Justfile
  echo ' c) ' >> Justfile # Hidden

  echo 'cat|dog|snake) # Pets' >> Justfile
  echo 'rat|mouse|spider)' >> Justfile # Hidden

  echo 'run_car) # Run car' >> Justfile
  echo 'run_house) # Star house' >> Justfile
  echo 'run_garage) # Open garage' >> Justfile

  # Wildcard feature
  echo 'stop_*) # Stop something' >> Justfile

  STUFF=(qwe qwert qwerty qwebar qbyurso aoeui)

  echo '#read_{STUFF}) # Read' >> Justfile
  echo 'read_*)' >> Justfile

  echo "-flag) # Flag 1" >> Justfile
  echo "-a) # Archive" >> Justfile
  echo "foo) #Bar" >> Justfile
  echo "apple) # Tree" >> Justfile

  echo '-jump|\' >> Justfile
  echo '-rope) # Two line' >> Justfile
  echo "-sea|-water|-ocean) # Long line" >> Justfile

  # Null case
  COMP_WORDS=(just)
  _just just '' just
  # Manually parse defaultify targets, so I quit breaking this test
  ans1=($(sed -${sed_flag_rE}n '/^ *-[a-z|-]+\) *#.*/{s:^ *(-[a-z|-]+)\) *#.*:\1:; s/\|/'$'\\\n/g; p;}' "${VSI_COMMON_DIR}/linux/just_files/just_functions.bsh"))
  ans=(a -a apple b cat d dog -flag foo -jump -ocean -rope -sea snake -water "${ans1[@]}")
  # Resort it because macOS sorts weird. I mean REALLY weird. Must be the locale
  ans=($(IFS=$'\n'; sort <<< "${ans[*]}"))
  sub_ans=(e read run stop)
  assert_array_values COMPREPLY "${ans[@]}" "${sub_ans[@]}"

  # Simple case
  COMP_WORDS=(just f)
  _just just f just
  assert_array_values COMPREPLY foo

  COMP_WORDS=(just a)
  _just just a just
  assert_array_values COMPREPLY a apple

  COMP_WORDS=(just c)
  _just just c just
  assert_array_values COMPREPLY cat

  COMP_WORDS=(just ap)
  _just just ap just
  assert_array_values COMPREPLY apple

  # Subcommand case
  COMP_WORDS=(just run)
  _just just "" run
  assert_array_values COMPREPLY car house garage

  COMP_WORDS=(just read qw)
  _just just qw read
  assert_array_values COMPREPLY qwe qwert qwerty qwebar

  # This is known problem
  # COMP_WORDS=(just stop)
  # _just just "" stop
  # assert_array_values COMPREPLY
  # The * will evaluate to err Justfile out, and any other files in the CWD

  # Flag case
  COMP_WORDS=(just run car -s)
  _just just -s car
  assert_array_values COMPREPLY -sea

  # Subsequent subcommand case
  COMP_WORDS=(just run car)
  _just just "" car
  assert_array_values COMPREPLY "${ans[@]}" car house garage "${sub_ans[@]}"

  echo 'if [ "${3}" = "-jump" ]; then
          just_commands+=("rope")
        elif [ "${3}" = "run" ]; then
          just_subtargets+=(bus)
        fi' > .just
  # Run with custom .just
  COMP_WORDS=(just run)
  _just just "" run
  assert_array_values COMPREPLY bus car house garage

  COMP_WORDS=(just -jump)
  _just just "" -jump
  assert_array_values COMPREPLY "${ans[@]}" rope "${sub_ans[@]}"

)
end_test