#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"
source "${VSI_COMMON_DIR}/linux/file_tools.bsh"

begin_test "Sed flag"
(
  setup_test

  unset sed VSI_SED_COMPAT
  OSTYPE=darwin14 load_vsi_compat
  [ "${sed_flag_rE}" = "E" ]
  assert_array_values sed_flags_i -i ''
  unset OSTYPE

  OS=Windows_NT load_vsi_compat
  [ "${sed_flag_rE}" = "r" ]
  assert_array_values sed_flags_i -i
  unset OS

  function sed()
  {
    echo "sed (GNU sed) 4.5" # stdout
  }
  unset VSI_SED_COMPAT
  load_vsi_compat
  [ "${sed_flag_rE}" = "r" ]


  function sed()
  {
    return 1
  }
  unset VSI_SED_COMPAT
  load_vsi_compat
  [ "${sed_flag_rE}" = "E" ]

  # Test manual override
  VSI_SED_COMPAT=gnu
  load_vsi_compat
  [ "${sed_flag_rE}" = "r" ]
  assert_array_values sed_flags_i -i

  VSI_SED_COMPAT=bsd
  load_vsi_compat
  [ "${sed_flag_rE}" = "E" ]
  assert_array_values sed_flags_i -i
)
end_test

# The rest of these compatibility tests are performed by actually using the flags
# to see if the test passes or fails, instead of mocking. CI will test all versions,
# and thus thoroughly test this

begin_test "Date flag"
(
  setup_test

  if [ "${date_feature_nanoseconds}" = "0" ]; then
    assert_regex_eq "$(date +%N)" '^[0-9]{9}$'
  else
    not assert_regex_eq "$(date +%N)" '^[0-9]{9}$'
  fi
)
end_test

begin_test "Bash flags"
(
  setup_test

  ### bash_behavior_declare_array_quote
  x1=(foo bar)
  assert_str_eq "$(declare -p x1)" "declare -a x1=${bash_behavior_declare_array_quote}([0]=\"foo\" [1]=\"bar\")${bash_behavior_declare_array_quote}"

  ### bash_feature_parameter_transformation part 1
  if [ "${bash_feature_parameter_transformation}" = "0" ]; then
    assert_regex_eq "${BASH_VERSINFO@a}" '^[ar]*$'
  fi

  ### bash_feature_declare_name_reffing
  if [ "${bash_feature_declare_name_reffing}" = "0" ]; then
    declare -n y2=x1
  else
    not declare -n y2=x1
  fi

  ### bash_feature_printf_array_assignment
  z3=(11 22)
  if [ "${bash_feature_printf_array_assignment}" = "0" ]; then
    printf -v z3[2] '%s' 33
    assert_array_values z3 11 22 33
  else
    not printf -v z3[2] '%s' 33
  fi

  ### bash_feature_associative_array
  if [ "${bash_feature_associative_array}" = "0" ]; then
    declare -A foo4
    foo4[var]=15
  else
    not declare -A foo4
  fi

  ### bash_behavior_regex_special_characters_non_literal
  d5=$'foo\tbar'
  re5='\t'
  if [ "${bash_behavior_regex_special_characters_non_literal}" = "0" ]; then
    assert_regex_eq "${d5}" "${re5}"
  else
    not assert_regex_eq "${d5}" "${re5}"
  fi

  ### bash_bug_ifs_array_slice_expansion
  arr6=(11 22 33 44)
  ans1_6=(33 44)
  ans2_6=("33 44")
  OLD_IFS="${IFS}"
  IFS=x
  arr2_6=("${arr6[@]:2}")
  if [ "${bash_bug_ifs_array_slice_expansion}" = "0" ]; then
    assert_array_eq arr2_6 ans2_6
  else
    assert_array_eq arr2_6 ans1_6
  fi
  IFS="${OLD_IFS}"

  ### bash_bug_declare_fails_local_declared_unset_variable
  declare -a some_var7
  if [ "${bash_bug_declare_fails_local_declared_unset_variable}" = "0" ]; then
    not declare -p some_var7
  else
    declare -p some_var7
  fi

  ### bash_feature_declare_global
  if [ "${bash_feature_declare_global}" = "0" ]; then
    declare -g foo8
  else
    not declare -g foo8
  fi

  ### bash_feature_allocate_file_descriptor
  if [ "${bash_feature_allocate_file_descriptor}" = "0" ]; then
    (exec {x9}>&2) 2>/dev/null
  else
    not_s '(exec {x}>&1) 1>/dev/null'
  fi

  ### bash_feature_declare_print_function
  function foo_10()
  {
    :
  }
  ans_10='foo_10 *\(\) *
\{ *
 *: *
\} *'

  if [ "${bash_feature_declare_print_function}" = "0" ]; then
    declare -pf foo_10
    assert_regex_eq "$(declare -pf foo_10)" "${ans_10}"
  else
    not declare -pf foo_10
  fi

  ### bash_bug_local_shadow_exported_variable
  export x_11=12
  function foo_11()
  {
    local x_11
    declare -p x_11 || :
    compgen -A export x_11
    bash -c "declare -p x_11 || :"
  }

  nl=$'\n'
  ans_11=
  if [ "${bash_bug_declare_fails_local_declared_unset_variable}" = "1" ]; then
    ans_11="declare -x x_11${bash_bug_declared_unset_value}${nl}"
  fi
  ans_11+=$'x_11'
  if [ "${bash_bug_local_shadow_exported_variable}" = "1" ]; then
    ans_11+="${nl}declare -x x_11=\"12\""
  fi

  # This bug won't manifest when the function is directly called via $(), use a file proxy
  assert_str_eq "$("${TESTLIB_DIR}/aux_compat_1.bsh")" "${ans_11}"

  ### bash_bug_substitute_empty_funcname
  if [ "${bash_bug_substitute_empty_funcname}" = "0" ]; then
    [ " ""${FUNCNAME[@]+FOO}" = " FOO" ]
  else
    [ " ""${FUNCNAME[@]+FOO}" != " FOO" ]
  fi

  ### bash_bug_declare_fails_local_declared_unset_variable
  function foo_12()
  {
    local x_12
    if [ "${bash_bug_declare_fails_local_declared_unset_variable}" = "0" ]; then
      not declare -p x_12
    else
      declare -p x_12
    fi
  }
  foo_12

  ### bash_bug_declare_fails_global_declared_unset_variable
  declare x_13
  if [ "${bash_bug_declare_fails_global_declared_unset_variable}" = "0" ]; then
    not declare -p x_13
  else
    declare -p x_13
  fi

  ### bash_bug_declared_unset_value
  function foo_14()
  {
    local x_14
    if [ "${bash_bug_declare_fails_local_declared_unset_variable}" = "0" ]; then
      re_14="(^|${nl})declare -- x_14${bash_bug_declared_unset_value}(${nl}|$)"
      assert_regex_eq "$(declare -p)" "${re_14}"
    else
      re_14="^declare -- x_14${bash_bug_declared_unset_value}$"
      assert_regex_eq "$(declare -p x_14)" "${re_14}"
    fi
  }
  foo_14

  function __bash_bug_unassigned_variable_set_to_null() {
    local y
    echo "y=${y+set}"
  }
  if [ "${bash_bug_unassigned_variable_set_to_null}" -eq "0" ]; then
    [ "$(__bash_bug_unassigned_variable_set_to_null)" = "y=set" ]
  else
    [ "$(__bash_bug_unassigned_variable_set_to_null)" = "y=" ]
  fi

  ### bash_feature_declare_array_escape_special_characters
  x_15=($'foo\tbar')
  tab=$'\t'
  if [ "${bash_feature_declare_array_escape_special_characters}" = "0" ]; then
    [ "$(declare -p x_15)" = "declare -a x_15=${bash_behavior_declare_array_quote}([0]=$'foo\tbar')${bash_behavior_declare_array_quote}" ]
  else
    [ "$(declare -p x_15)" = "declare -a x_15=${bash_behavior_declare_array_quote}([0]=\"foo${tab}bar\")${bash_behavior_declare_array_quote}" ]
  fi

  ### bash_feature_bashpid
  if [ "${bash_feature_bashpid}" = "0" ]; then
    declare -p BASHPID
  else
    # signal_tools sets bashpid, unset it for bash 3.2
    if [ "${BASH_VERSINFO[0]}" = "3" ]; then
      unset BASHPID
    fi
    not declare -p BASHPID
  fi

  ### bash_feature_bashpid_read_only
  if [ "${bash_feature_bashpid_read_only}" = "0" ]; then
    not unset BASHPID
  else
    unset BASHPID
  fi

  ### bash_feature_case_modification part 1
  x_16="aBcD"
  if [ "${bash_feature_case_modification}" = "0" ]; then
    [ "${x_16^^}" = "ABCD" ]
  fi

  ### bash_bug_bash_env_process_substitution
  if bash_bug_bash_env_process_substitution; then
    [ "$(BASH_ENV=<(echo echo hi) bash -c :)" = "" ]
  else
    [ "$(BASH_ENV=<(echo echo hi) bash -c :)" = "hi" ]
  fi

  ### __bash_bug_at_expansion_null_ifs
  function __bash_bug_at_expansion_null_ifs()
  {
    case ${@+"${@}"} in
      bashbug)
        bash_bug_at_expansion_null_ifs=0
        ;;
      "bash bug")
        bash_bug_at_expansion_null_ifs=1
        ;;
    esac
  }
  IFS="" __bash_bug_at_expansion_null_ifs bash bug


  # Test the caching feature
  __bash_bug_bash_env_process_substitution=0
  function bash()
  {
    echo 0
  }
  bash_bug_bash_env_process_substitution
  unset __bash_bug_bash_env_process_substitution
  not bash_bug_bash_env_process_substitution
  function bash()
  {
    :
  }
  not bash_bug_bash_env_process_substitution
  unset __bash_bug_bash_env_process_substitution
  bash_bug_bash_env_process_substitution

  # Cleanup
  unset __bash_bug_bash_env_process_substitution
  unset bash

  ### bash_behavior_empty_array_unbound
  x_17=()
  y_17="$(echo "${x_17[@]}bound")" || :
  if [ "${bash_behavior_empty_array_unbound}" = "0" ]; then
    [ "${y_17}" = "" ]
  else
    [ "${y_17}" = "bound" ]
  fi

  d_18=''
  re_18=''
  ### bash_bug_regex_empty_string
  if [ "${bash_bug_regex_empty_string}" = 0 ]; then
    [[ ! ${d_18} =~ ${re_18} ]] || false
  else
    [[ ${d_18} =~ ${re_18} ]] || false
  fi

  ### bash_bug_exported_function_corrupt_bash_source
  echo 'blah(){ declare -p BASH_SOURCE; }
        export -f blah
        bash -xv "'"${TESTDIR}"'/bar_19"' > "${TESTDIR}/foo_19"
  echo 'x=("${BASH_SOURCE[@]}")
        blah
        if [ "${x[0]}" = "${BASH_SOURCE[0]}" ]; then
          exit 0
        else
          exit 1
        fi' > "${TESTDIR}/bar_19"
  if [ "${bash_bug_exported_function_corrupt_bash_source}" = "0" ]; then
    not bash -xv "${TESTDIR}/foo_19"
  else
    bash -xv "${TESTDIR}/foo_19"
  fi

  ### bash_behavior_strict_posix_functions
  function foo_20()
  {
    local re='^[a-z][a-z]$'
    x="$(cat <(echo ok))"
  }
  export -f foo_20

  if [ "${bash_feature_posix_process_substitution}" = "0" ]; then
    bash --posix -euc "foo_20"
  else
    # This will result in stderr saying:
    # environment: command substitution: line 2: syntax error near unexpected token `('
    not bash --posix -euc "foo_20"
  fi

  ### bash_feature_rcfile
  echo "echo hi" > "${TESTDIR}/foo_21"
  result_21="$(bash --rcfile "${TESTDIR}/foo_21" -ic :)"
  if bash_feature_rcfile; then
    [ "${result_21}" = "hi" ]
  else
    [ "${result_21}" = "" ]
  fi

  ### bash_bug_rcfile_process_substitution
  if bash_feature_rcfile; then
    result_22="$(bash --rcfile <(echo "echo bye") -ic :)"
    if bash_bug_rcfile_process_substitution; then
      [ "${result_22}" = "" ]
    else
      [ "${result_22}" = "bye" ]
    fi
  fi

  ### bash_behavior_all_traps_display_inherited
  int_23="$(function foo_23()
            {
              exit 3
            }
            trap foo_23 INT
            (
              trap -p INT
              :
            )
          )"
  if [ "${bash_behavior_all_traps_display_inherited}" = "0" ]; then
    [ -n "${int_23}" ]
  else
    [ -z "${int_23}" ]
  fi

  ### bash_behavior_pattern_substitution_slash_escape
  foo_24="o'k"

  if [ "${bash_behavior_pattern_substitution_slash_escape_with_single_quote}" = "0" ]; then
    bar_24="${foo_24//\'/\\\'}"
    [ "${bar_24}" = "o\\'k" ]

    foo_24="${foo_24//\'/\\\\\'}"
    [ "${foo_24}" = "o\\\\'k" ]

  else
    bar_24="${foo_24//\'/\'}"
    [ "${bar_24}" = "o\\'k" ]

    foo_24="${foo_24//\'/\\\'}"
    [ "${foo_24}" = "o\\\\'k" ]
  fi
)
end_test

### bash_feature_parameter_transformation part 2
if [ "${bash_feature_parameter_transformation}" = "0" ]; then
  skip_next_test
fi
begin_required_fail_test "Fail bash parameter transformation"
(
  setup_test
  begin_fail_zone
  echo "${BASH_VERSINFO@a}"
)
end_test

### bash_feature_case_modification part 2
if [ "${bash_feature_case_modification}" = "0" ]; then
  skip_next_test
fi
begin_required_fail_test "Fail bash case modification"
(
  setup_test
  x_16="aBcD"
  begin_fail_zone
  echo "${x_16^^}"
)
end_test

### bash_feature_xtracefd
begin_test "Bash feature xtracefd"
(
  setup_test

  find_open_fd xtrace
  eval "exec ${xtrace}>/dev/null"
  BASH_XTRACEFD=${xtrace}
  set -xv

  x="$(exec 2>&1; echo hi 1>&2)"

  # Close the fd
  eval "exec ${xtrace}>&-"

  if [ "${bash_feature_xtracefd}" = "0" ]; then
    [ "${x}" = "hi" ]
  else
    [[ "${x}" = *$'\nhi' ]] || false
  fi
)
end_test

if [ "${bash_feature_xtracefd}" != "0" ]; then
  skip_next_test
fi
begin_test "Bash bug allocate xtracefd"
(
  setup_test

  filename="${TESTDIR}/trace.txt"
  set -xv
  exec {BASH_XTRACEFD}>${filename}
  echo hi
  # Close the fd
  exec {BASH_XTRACEFD}>&-
  unset BASH_XTRACEFD

  if [ "${bash_bug_allocate_xtracefd}" = "0" ]; then
    [ "$(cat "${filename}")" = "" ]
  else
    [[ $(cat "${filename}") = *"echo hi"* ]] || false
  fi
)
end_test

if [ "${bash_bug_uncaught_unbound_on_exit_trap}" = "0" ]; then
  begin_test "Bash bug uncaught unbound variable with exit trap"
else
  begin_required_fail_test "Bash bug uncaught unbound variable with exit trap"
fi
(
  setup_test

  function test_trap(){ :;}
  trap test_trap EXIT

  begin_fail_zone
  echo "${unbound_variable_and_stuff}"
)
end_test

if [ "${bash_bug_uncaught_error_compound_subshell}" = "0" ]; then
  begin_test "Bash bug uncaught subshell error"
else
  begin_required_fail_test "Bash bug uncaught subshell error"
fi
(
  setup_test

  begin_fail_zone

  (
    true
    false
  )

  echo "Only bash 3.2 gets to this line, the the last line did have return code $?"
)
end_test

begin_test "Tar flags"
(
  setup_test

  touch "${TESTDIR}/file"
  if tar_feature_incremental_backup; then
    ${TAR-tar} -cf /dev/null -g "${TESTDIR}/file" /dev/null &> /dev/null
  else
    not ${TAR-tar} -cf /dev/null -g "${TESTDIR}/file" /dev/null &> /dev/null
  fi
)
end_test
