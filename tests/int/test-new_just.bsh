#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/linux/uwecho.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/just_version.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"
source "${VSI_COMMON_DIR}/linux/aliases.bsh"
source "${VSI_COMMON_DIR}/linux/string_tools.bsh"
export JUST_VERSION

function setup()
{
  local container_name

  JUST_PATH_ESC="$(. ${VSI_COMMON_DIR}/linux/common_source.sh; echo "${VSI_PATH_ESC}")"
  if command -v docker &> /dev/null; then
    # If this failed, then the docker server is on another host. TESTDIR is a
    # random name so there's practically no possibility of a false positive
    if container_name=$(docker create --mount "type=bind,source=${TESTDIR},destination=${JUST_PATH_ESC}/src" alpine:3.8 2>/dev/null); then
      docker_is_local=0
      docker rm "${container_name}" &> /dev/null
    else
      docker_is_local=1

      # No need to rm, because it failed to be created
      tmp_volume="$(docker volume create)"
    fi
  fi

  # Cache results
  git_bug_submodule_path_with_special_characters || :
}

function teardown()
{
  if [ "${docker_is_local-}" = "1" ]; then
    docker volume rm "${tmp_volume}" &> /dev/null
  fi
}

# Need to be in the original directory as when the script starts, or else
# uwecho does not work
CWD="$(pwd)"

begin_test "New Just with defaults"
(
  setup_test
  echo y | "${VSI_COMMON_DIR}/linux/just_files/new_just" --defaults --vsi

  mkdir -p "${TESTDIR}/external"

  if [ "${OS-}" = "Windows_NT" ]; then
    cp -r ${VSI_COMMON_DIR} "${TESTDIR}/external/vsi_common"
  else
    ln -s ${VSI_COMMON_DIR} "${TESTDIR}/external/vsi_common"
  fi

  project_name="$(basename "${TESTDIR}" | tr '[a-z]' '[A-Z]' | sed -${sed_flag_rE} 's|[^A-Z0-9_]+||g')"

  [ "$(. setup.env; just --wrap bash -c 'echo $'"${project_name}"'_CWD')" = "${TESTDIR}" ]
)
end_test

begin_test "New Just"
(
  setup_test
  "${VSI_COMMON_DIR}/linux/just_files/new_just" --continue --vsi \
                                     --docker --pipenv --no-git \
                                     --prefix JTEST \
                                     --project-dir "${TESTDIR}" \
                                     --justfile "j.u.s.t  f i'l\"e" \
                                     --setupfile "set u.p  f i'l\"e" \
                                     --project-name "je.  t e's\"t" \
                                     --vsi-dir "v.s.i  d i'r\"" \
                                     --app yaan \
                                     --tutorial \
                                     --repo atest/btest

  if [ "${OS-}" = "Windows_NT" ]; then
    cp -r ${VSI_COMMON_DIR} "${TESTDIR}/v.s.i  d i'r\""
  else
    ln -s ${VSI_COMMON_DIR} "${TESTDIR}/v.s.i  d i'r\""
  fi

  (. "set u.p  f i'l\"e"; ls -la "${JUSTFILE}" )

  [ "$(. "set u.p  f i'l\"e"; just --wrap bash -c 'echo "${JTEST_CWD}"')" = "${TESTDIR}" ]

  export PATH="${TESTDIR}/ss:${PATH}"
  export COMPOSE_PROJECT_NAME=testpro
  mkdir "${TESTDIR}/ss"
  . "set u.p  f i'l\"e"

  pushd "${CWD}"
    uwecho '#!/usr/bin/env bash
            echo mockdc "${@}"' > "${TESTDIR}/ss/docker-compose"

    uwecho '#!/usr/bin/env bash
            echo mockd "${@}"
            exit 0' > "${TESTDIR}/ss/docker"
  popd
  chmod 755 ss/docker-compose
  chmod 755 ss/docker

  [ "$(just build)" = "mockdc -f ${TESTDIR}/v.s.i  d i'r\"/docker/recipes/docker-compose.yml build gosu pipenv tini vsi
mockdc -f ${TESTDIR}/docker-compose.yml build
mockd volume rm testpro_venv" ]
  [ "$(just build example)" = "mockdc -f ${TESTDIR}/docker-compose.yml build example" ]

  file_name="${TESTDIR}/docker-compose.yml"
  if [[ ${file_name} =~ ^${does_not_needs_quote_escape_regex}$ ]]; then
    file_name="$(regex_escape "${file_name}")"
  else
    file_name="$(regex_escape "${file_name}")"
    file_name="$(quote_escape "${file_name}")"
  fi

  [[ $(just -n run yaan) =~ docker-compose\ -f\ ${file_name}\ -f\ (.*)\ run\ --rm\ --service-ports\ yaan ]] || false

  tmp_file="$(quote_unescape "${BASH_REMATCH[1]}")"

  ans="version: '2.4'
services:
  yaan:
"
  if [ -d "/tmp/.X11-unix" ]; then
    ans+="    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
"
  fi
  ans+="    environment:"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="
      - JUST_HOST_WINDOWS=1"
  fi
  ans+="
      - JTEST_SOURCE_DIR_HOST=${TESTDIR}
      - JTEST_SOURCE_DIR=${JUST_PATH_ESC}/src
  yaan_pipenv:
"
  if [ -d "/tmp/.X11-unix" ]; then
    ans+="    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
"
  fi
  ans+="    environment:"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="
      - JUST_HOST_WINDOWS=1"
  fi
  ans+="
      - JTEST_SOURCE_DIR_HOST=${TESTDIR}
      - JTEST_SOURCE_DIR=${JUST_PATH_ESC}/src"

  [ "$(cat "${tmp_file}")" = "${ans}" ]

  rm "${tmp_file}"

  # Test clean venv when volume exists
  [ "$(just docker-compose clean venv)" = "mockd volume rm testpro_venv" ]


  pushd "${CWD}"
    # Test clean venv when volume doesn't exist
    uwecho '#!/usr/bin/env bash
            echo mockd "${@}"
            exit 1' > "${TESTDIR}/ss/docker"
  popd
  chmod 755 ss/docker

  [ "$(just docker-compose clean venv 2>&1)" = "testpro_venv already removed" ]
)
end_test

begin_test "New Just no pipenv"
(
  setup_test
  "${VSI_COMMON_DIR}/linux/just_files/new_just" --defaults --continue --prefix JTEST --vsi --no-pipenv

  mkdir -p "${TESTDIR}/external"

  if [ "${OS-}" = "Windows_NT" ]; then
    cp -r ${VSI_COMMON_DIR} "${TESTDIR}/external/vsi_common"
  else
    ln -s ${VSI_COMMON_DIR} "${TESTDIR}/external/vsi_common"
  fi

  [ "$(. setup.env; just --wrap bash -c 'echo "${JTEST_CWD}"')" = "${TESTDIR}" ]

  export PATH="${TESTDIR}:${PATH}"
  . setup.env

  pushd "${CWD}"
    uwecho '#!/usr/bin/env bash
            echo mockdc "${@}"' > "${TESTDIR}/docker-compose"
  popd
  chmod 755 docker-compose

  [ "$(just build)" = "mockdc -f ${TESTDIR}/external/vsi_common/docker/recipes/docker-compose.yml build gosu tini vsi
mockdc -f ${TESTDIR}/docker-compose.yml build" ]
  [ "$(just build example)" = "mockdc -f ${TESTDIR}/docker-compose.yml build example" ]

  file_name="${TESTDIR}/docker-compose.yml"
  if [[ ${file_name} =~ ^${does_not_needs_quote_escape_regex}$ ]]; then
    file_name="$(regex_escape "${file_name}")"
  else
    file_name="$(regex_escape "${file_name}")"
    file_name="$(quote_escape "${file_name}")"
  fi

  [[ $(just -n run example) =~ docker-compose\ -f\ ${file_name}\ -f\ (.*)\ run\ --rm\ --service-ports\ example ]] || false

  tmp_file="$(quote_unescape "${BASH_REMATCH[1]}")"

  ans="version: '2.4'
services:
  example:
"
  if [ -d "/tmp/.X11-unix" ]; then
    ans+="    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
"
  fi
  ans+="    environment:"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="
      - JUST_HOST_WINDOWS=1"
  fi
  ans+="
      - JTEST_SOURCE_DIR_HOST=${TESTDIR}
      - JTEST_SOURCE_DIR=${JUST_PATH_ESC}/src"

  [ "$(cat "${tmp_file}")" = "${ans}" ]

  rm "${tmp_file}"
)
end_test

begin_test "New Just no docker"
(
  setup_test

  "${VSI_COMMON_DIR}/linux/just_files/new_just" --continue --vsi \
                                     --no-docker --no-pipenv --no-git \
                                     --prefix JTEST \
                                     --project-dir "${TESTDIR}" \
                                     --justfile "j.u.s.t  f i'l\"e" \
                                     --setupfile "set u.p  f i'l\"e" \
                                     --project-name "je.  t e's\"t" \
                                     --vsi-dir "v.s.i  d i'r\"" \
                                     --app yaan \
                                     --no-tutorial \
                                     --repo atest/btest

  mkdir -p "${TESTDIR}/external"

  if [ "${OS-}" = "Windows_NT" ]; then
    cp -r ${VSI_COMMON_DIR} "${TESTDIR}/v.s.i  d i'r\""
  else
    ln -s ${VSI_COMMON_DIR} "${TESTDIR}/v.s.i  d i'r\""
  fi

  (. "set u.p  f i'l\"e"; ls -la "${JUSTFILE}" )

  [ "$(. "set u.p  f i'l\"e"; just --wrap bash -c 'echo "${JTEST_CWD}"')" = "${TESTDIR}" ]

  export PATH="${TESTDIR}/ss:${PATH}"
  export COMPOSE_PROJECT_NAME=testpro
  mkdir "${TESTDIR}/ss"
  . "set u.p  f i'l\"e"

  pushd "${CWD}"
    uwecho '#!/usr/bin/env bash
            echo mockg++ "${@}"' > "${TESTDIR}/ss/g++"
  popd
  chmod 755 ss/g++

  [ "$(just compile)" = "mockg++ hi.cpp -o hi" ]

  pushd "${CWD}"
    uwecho '#!/usr/bin/env bash
            echo mockhi "${@}"' > "${TESTDIR}/hi"
  popd
  chmod 755 hi

  [ "$(just run test123)" = "mockhi test123" ]
)
end_test

if ! command -v git &> /dev/null; then
  skip_next_test
else
  git_feature_support_tls && tls=0 || tls="${?}"
  if [ "${tls}" -lt "2" -o "${tls}" = "125" ]; then
    skip_next_test
  fi
fi
begin_test "New just instructions test (git)"
(
  setup_test

  if git_bug_submodule_path_with_special_characters; then
    # git submodule add on windows won't handle "??? This works on cmd, but not bash.
    # MSYS2_ARG_CONV_EXCL=* did not fix it, therefore it is not a path mangling issue
    # Also an issue in older git for submodules
    tough_name=""
  else
    tough_name="\""
  fi

  git_email_set=1
  git_name_set=1

  git config --global user.email || git_email_set=0
  git config --global user.name || git_name_set=0

  if [ "${git_email_set}" = "0" ]; then
    git config --global user.email foo@example.bar
  fi
  if [ "${git_name_set}" = "0" ]; then
    git config --global user.name "Foo Bar"
  fi

  rv=0
  # Evaluate git commands
  "${VSI_COMMON_DIR}/linux/just_files/new_just" --continue --vsi \
                                             --docker --pipenv --git \
                                             --prefix JTEST \
                                             --project-dir "${TESTDIR}" \
                                             --justfile "j.u.s.t  f i'l${tough_name}e" \
                                             --setupfile "set u.p  f i'l${tough_name}e" \
                                             --project-name "je.  t e's${tough_name}t" \
                                             --vsi-dir "v.s.i  d i'r${tough_name}" \
                                             --app yaan \
                                             --tutorial \
                                             --repo tmp || rv="${?}"

  if [ "${git_email_set}" = "0" ]; then
    git config --global --unset user.email
  fi
  if [ "${git_name_set}" = "0" ]; then
    git config --global --unset user.name
  fi

  if [ "${rv}" != "0" ]; then
    false See the new_just call above for this delayed error
  fi

  # Create these three files incase they don't exist, they don't always get created
  touch xtrace out err
  # The only untracked changes should be the test output files
  [ "$(git status --porcelain 2>&1)" == $'?? err\n?? out\n?? xtrace' ]
)
end_test

if ! command -v "${DOCKER}" &> /dev/null; then
  skip_next_test
fi
begin_test "New just docker test"
(
  setup_test

  if git_bug_submodule_path_with_special_characters; then
    # Windows does not allow " in filenames, and old git doesn't allow it in
    # submodules
    tough_name=""
  else
    tough_name="\""
  fi

  "${VSI_COMMON_DIR}/linux/just_files/new_just" --continue --vsi --defaults \
                                     --justfile "j.u.s.t  f i'l${tough_name}e" \
                                     --setupfile "set u.p  f i'l${tough_name}e" \
                                     --project-name "je.  t e's${tough_name}t" \
                                     --vsi-dir "v.s.i  d i'r${tough_name}" \
                                     --project-dir "${TESTDIR}" \
                                     --prefix JTEST \
                                     --no-tutorial \
                                     --app yaan --repo tmp

  if [ "${OS-}" = "Windows_NT" ]; then
    cp -r ${VSI_COMMON_DIR} "${TESTDIR}/v.s.i  d i'r${tough_name}"
  else
    ln -s ${VSI_COMMON_DIR} "${TESTDIR}/v.s.i  d i'r${tough_name}"
  fi

  . "set u.p  f i'l${tough_name}e"

  just build

  if [ "${docker_is_local-}" = "1" ]; then
    tar c . | docker run -i --rm -v "${tmp_volume}:${JUST_PATH_ESC}/src" -w "${JUST_PATH_ESC}/src" alpine:3.8 tar x

    # Change the source dir to a volume
    export JTEST_SOURCE_DIR="${tmp_volume}"
    export JTEST_SOURCE_DIR_TYPE=volume
    echo "  ${tmp_volume}:" >> "${TESTDIR}/docker-compose.yml"
    echo "    name: ${tmp_volume}" >> "${TESTDIR}/docker-compose.yml"
  fi

  # for some reason, only on Windows running through xargs do I have this tty issue, and only here
  [[ $(DOCKER_COMPOSE_EXTRA_RUN_ARGS='-T' just run yaan pipenv run pip freeze --all) =~ pip==.*setuptools==.*wheel==.* ]] || false

  just docker-compose down
)
end_test

begin_test "Make sure new_just works with curl"
(
  setup_test

  # Makes sure the cat line wasn't commented out
  grep ^cat "${VSI_COMMON_DIR}/linux/just_files/new_just"
)
end_test