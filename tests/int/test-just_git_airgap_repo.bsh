#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/tests/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/aliases.bsh"
command -v "${GIT}" &> /dev/null && source "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"
source "${VSI_COMMON_DIR}/linux/real_path"

# These tests chain together, so no point in continuing after one breaks
TESTLIB_STOP_AFTER_FAILS=1
unset TESTLIB_SKIP_TESTS TESTLIB_RUN_SINGLE_TEST

if ! command -v "${GIT}" &> /dev/null || ! git lfs &> /dev/null; then
  TESTLIB_SKIP_TESTS='.*'
fi

function setup()
{
  # Easier way to take care of committers on vanilla install
  export GIT_COMMITTER_NAME='Foo Bar'
  export GIT_AUTHOR_NAME='Foo Bar'
  export GIT_COMMITTER_EMAIL='foo.bar@example.com'
  export GIT_AUTHOR_EMAIL='foo.bar@example.com'
}

function setup_variables()
{
  VSI_COMMON_URL="${TRASHDIR}/git/VisionSystemsInc/vsi_common.git" # bare repo
  RECIPES_URL="${TRASHDIR}/git/VisionSystemsInc/docker_recipes.git" # bare repo
  BLUEPRINTS_URL="${TRASHDIR}/git/VisionSystemsInc/docker_blueprints.git" # bare repo
  PRETEND_URL="${TRASHDIR}/git/pretend_repo.git" # bare repo
  BUILD_REPO="${TRASHDIR}/build"
  PREP_DIR="${TRASHDIR}/pretend_prep"
  TRANSFER_DIR="${TRASHDIR}/transfer"
  AIRGAP_MIRROR_DIR="${TRASHDIR}/airgap/mirror"
  AIRGAP_CLONE_DIR="${TRASHDIR}/airgap/clone"

  mkdir -p "${VSI_COMMON_URL}"
  mkdir -p "${RECIPES_URL}"
  mkdir -p "${BLUEPRINTS_URL}"
  mkdir -p "${PRETEND_URL}"
  mkdir -p "${BUILD_REPO}"
  mkdir -p "${TRANSFER_DIR}"
  mkdir -p "${AIRGAP_CLONE_DIR}"
}

begin_test "Part 1 - Setup test repo"
(
  setup_test
  setup_variables

  VSI_COMMON_SHA="$(cd "${VSI_COMMON_DIR}" && git rev-parse HEAD)"
  RECIPES_SHA="$(cd "${VSI_COMMON_DIR}/docker/recipes" && git rev-parse HEAD)"
  BLUEPRINTS_SHA="$(cd "${VSI_COMMON_DIR}/docker/blueprints" && git rev-parse HEAD)"

  # Create faux-urls for the repo and its submodules

  # I cannot directly add the actual vsi_common repository (VSI_COMMON_DIR)
  # under test as a submodule because the docker/recipes submodule can't be
  # found (it is expected to be at ../../VisionSystemsInc/docker_recipes.git)
  # I also now push a change to it
  pushd "${VSI_COMMON_URL}" &> /dev/null
    # The mirror's HEAD will be at the same SHA as the real VSI_COMMON_DIR
    # under test
    git clone --mirror "${VSI_COMMON_DIR}" . # This is the real VSI_COMMON_DIR
    [ "${VSI_COMMON_SHA}" = "$(git rev-parse HEAD)" ]
    # This is creating a faux-mirror from a (local) clone. Therefore, the
    # tracked commit (HEAD) cannot exist on a remote-only branch (e.g.,
    # origin/master) because these are skipped during git_import-repo to the
    # air-gapped server (in a true mirror, there should be no refs/remotes;
    # they get translated to refs/heads by the refspec on push)
    # This will fail with:
    #   error: Server does not allow request for unadvertised object ...
    #   Fetched in submodule path 'docker/recipes', but it did not contain
    # RE Could checkout each ref/remotes, but we only need the current SHA
    # RE This should not be a problem on CI
    git branch local "${VSI_COMMON_SHA}"
  popd &> /dev/null

  # In this case, it is lucky that the recipes submodule is stored as a relative
  # URL; otherwise, we'd have to modify the parent project
  pushd "${RECIPES_URL}" &> /dev/null
    git clone --mirror "${VSI_COMMON_DIR}"/docker/recipes .
    [ "${RECIPES_SHA}" = "$(git rev-parse HEAD)" ]
    # Because we are creating a faux-mirror from a (local) clone, create a
    # local branch at the current SHA to ensure the commit is properly mirrored
    # (see above)
    git branch local "${RECIPES_SHA}"
  popd &> /dev/null

  # repeat recipes pattern for blueprints
  pushd "${BLUEPRINTS_URL}" &> /dev/null
    git clone --mirror "${VSI_COMMON_DIR}"/docker/blueprints .
    [ "${BLUEPRINTS_SHA}" = "$(git rev-parse HEAD)" ]
    git branch local "${BLUEPRINTS_SHA}"
  popd &> /dev/null

  # Main repo
  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init
    touch readme
    git add readme
    git commit -m "Initial commit"

    # The working tree of this vsi_common submodule will have the same SHA
    # checked out as the VSI_COMMON_DIR being tested. Uncommited changes will
    # not exist in this repo
    git submodule add "${VSI_COMMON_URL}" vsi_common
    git submodule update --init --recursive
    [ "${VSI_COMMON_SHA}" = "$(git submodule status vsi_common | awk '{print $1}')" ]
    git add vsi_common

    git commit -m "Added submodules"
    git remote add origin "${PRETEND_URL}"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}"
  pushd "${PRETEND_URL}" &> /dev/null
    git clone --mirror "${BUILD_REPO}" .
  popd &> /dev/null
)
end_test

begin_test "Part 2 - Initial mirror"
(
  setup_test
  setup_variables

  pushd "${BUILD_REPO}" &> /dev/null
    # NOTE Uncommited changes to just_git_airgap_repo.bsh will not exist in
    # this repo, so they cannot be not sourced
    source "${BUILD_REPO}/vsi_common/linux/just_files/just_version.bsh"
    source "${BUILD_REPO}/vsi_common/linux/just_git_airgap_repo.bsh"
    GIT_MIRROR_PREP_DIR="${PREP_DIR}"
    VSI_COMMON_DIR="${BUILD_REPO}"/vsi_common JUST_VERSION="${JUST_VERSION}" JUST_USER_CWD="${PWD}" \
        relocate_git_defaultify git_export-repo "${PRETEND_URL}" master
  popd &> /dev/null
)
end_test

begin_test "Part 3 - Simulating transfer"
(
  setup_test
  setup_variables

  PREP_FILE=("${PREP_DIR}"/transfer_*.tgz)

  pushd "${TRANSFER_DIR}" &> /dev/null
    tar zxf "${PREP_FILE[0]}"
  popd &> /dev/null
)
end_test

begin_test "Part 4 - Pushing to mirror"
(
  setup_test
  setup_variables

  for d in pretend_repo.git vsi_common.git recipes.git blueprints.git; do
    mkdir -p "${AIRGAP_MIRROR_DIR}/${d}"
    pushd "${AIRGAP_MIRROR_DIR}/${d}" &> /dev/null
      git init --bare
    popd &> /dev/null
  done

  pushd "${TRANSFER_DIR}" &> /dev/null
    source setup.env # Sets VSI_COMMON_DIR to "${TRANSFER_DIR}"/.vsi_common
    source "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"
    sed "${sed_flags_i[@]}" -e \
        's|^JUST_GIT_AIRGAP_MIRROR_URL=$|JUST_GIT_AIRGAP_MIRROR_URL="'"${AIRGAP_MIRROR_DIR}"'"|' repo_map.env
    JUST_USER_CWD="${PWD}" relocate_git_defaultify git_import-repo
  popd &> /dev/null
)
end_test

begin_test "Part 5 - Cloning from mirror"
(
  setup_test
  setup_variables

  pushd "${AIRGAP_CLONE_DIR}" &> /dev/null
    git clone "${AIRGAP_MIRROR_DIR}"/pretend_repo.git .

    # per just_git_airgap_repo:print_git_airgap_submodule_update
    source /dev/stdin <<< "$(git show origin/__just_git_mirror_info_file:repo_map.env 2>/dev/null)"
    git_airgap_submodule_update vsi_common

    source "${AIRGAP_CLONE_DIR}/vsi_common/linux/just_git_airgap_repo.bsh"

    # NOTE if an "error: Server does not allow" failure occurs here, see above
    JUST_USER_CWD="${PWD}" relocate_git_defaultify git_airgap-submodule-update
  popd &> /dev/null

  # The main repo is dealt with separately from submodules. Be sure to test both
  ans="$(cd "${BUILD_REPO}" && git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}" && git rev-parse HEAD)" = "${ans}" ]
  ans="$(cd "${BUILD_REPO}"/vsi_common/docker/recipes&& git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}"/vsi_common/docker/recipes && git rev-parse HEAD)" = "${ans}" ]
  ans="$(cd "${BUILD_REPO}"/vsi_common/docker/blueprints&& git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}"/vsi_common/docker/blueprints && git rev-parse HEAD)" = "${ans}" ]

  # NOTE More complicated scenarios are tested in test-git_mirror.bsh
)
end_test

begin_test "Part 6 - Incremental update"
(
  setup_test
  setup_variables

  ##################################
  #              SETUP             #
  ##################################

  # Add a file to the main repo
  pushd "${BUILD_REPO}" &> /dev/null
    touch newfile
    git add newfile
    git commit -m "add a file"

    pushd vsi_common &> /dev/null
      touch newfile_sub
      git add newfile_sub
      git commit -m "add a new file"
      # NOTE This adds a commit to a mirrored copy of vsi_common
      git push origin "$(git rev-parse --abbrev-ref HEAD)"
    popd &> /dev/null
    git add vsi_common
    git commit -m "update submodule"

    git push origin master
  popd &> /dev/null

  # Update the prepped mirror
  pushd "${BUILD_REPO}" &> /dev/null
  (
    # NOTE Uncommited changes to just_git_airgap_repo.bsh will not exist in
    # this repo, so they cannot be sourced
    source "${BUILD_REPO}/vsi_common/linux/just_files/just_version.bsh"
    source "${BUILD_REPO}/vsi_common/linux/just_git_airgap_repo.bsh"
    GIT_MIRROR_PREP_DIR="${PREP_DIR}"
    # URL and branch are chosen automatically
    VSI_COMMON_DIR="${BUILD_REPO}"/vsi_common JUST_VERSION="${JUST_VERSION}" JUST_USER_CWD="${PWD}" \
        relocate_git_defaultify git_export-repo "${PRETEND_URL}" master
  )
  popd &> /dev/null

  # Select the incremental backup if it exists
  PREP_FILE="$(ls -rt "${PREP_DIR}"/transfer_*_transfer_*.tgz 2> /dev/null | tail -n1)"
  if [ -z "${PREP_FILE:+set}" ]; then
    PREP_FILE="$(ls -rt "${PREP_DIR}"/transfer_*.tgz | tail -n1)"
  fi

  # Simulate the transfer
  pushd "${TRANSFER_DIR}" &> /dev/null
    tar zxf "${PREP_FILE}"
  popd &> /dev/null

  # Pushing to the mirror
  pushd "${TRANSFER_DIR}" &> /dev/null
  (
    source setup.env # Sets VSI_COMMON_DIR to "${TRANSFER_DIR}"/.vsi_common
    source "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"
    sed "${sed_flags_i[@]}" -e \
        's|^JUST_GIT_AIRGAP_MIRROR_URL=$|JUST_GIT_AIRGAP_MIRROR_URL="'"${AIRGAP_MIRROR_DIR}"'"|' repo_map.env
    JUST_USER_CWD="${PWD}" relocate_git_defaultify git_import-repo
  )
  popd &> /dev/null

  # Pulling changes from the mirror
  pushd "${AIRGAP_CLONE_DIR}" &> /dev/null
    git pull
    git submodule update
  popd

  #################################
  #              TEST             #
  #################################

  ans="$(cd "${BUILD_REPO}" && git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}" && git rev-parse HEAD)" = "${ans}" ]
  ans="$(cd "${BUILD_REPO}/vsi_common" && git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}/vsi_common" && git rev-parse HEAD)" = "${ans}" ]
)
end_test
