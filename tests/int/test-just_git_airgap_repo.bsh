#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/tests/test_utils.bsh"
command -v "${GIT-git}" &> /dev/null && source "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"
source "${VSI_COMMON_DIR}/linux/requirements.bsh"
source "${VSI_COMMON_DIR}/linux/real_path"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

# These tests chain together, so no point in continuing after one breaks
TESTLIB_STOP_AFTER_FAILS=1
unset TESTLIB_SKIP_TESTS TESTLIB_RUN_SINGLE_TEST

if ! command -v "${GIT-git}" &> /dev/null || ! git lfs &> /dev/null; then
  TESTLIB_SKIP_TESTS='.*'
fi

function setup()
{
  # Easier way to take care of committers on vanilla install
  export GIT_COMMITTER_NAME='Foo Bar'
  export GIT_AUTHOR_NAME='Foo Bar'
  export GIT_COMMITTER_EMAIL='foo.bar@example.com'
  export GIT_AUTHOR_EMAIL='foo.bar@example.com'
}

function setup_variables()
{
  VSI_COMMON_URL="${TRASHDIR}/git/VisionSystemsInc/vsi_common.git" # bare repo
  RECIPES_URL="${TRASHDIR}/git/VisionSystemsInc/docker_recipes.git" # bare repo
  PRETEND_URL="${TRASHDIR}/git/pretend_repo.git" # bare repo
  BUILD_REPO="${TRASHDIR}/build"
  PREP_DIR="${TRASHDIR}/pretend_prep"
  TRANSFER_DIR="${TRASHDIR}/transfer"
  AIRGAP_MIRROR_DIR="${TRASHDIR}/airgap/mirror"
  AIRGAP_CLONE_DIR="${TRASHDIR}/airgap/clone"

  mkdir -p "${VSI_COMMON_URL}"
  mkdir -p "${RECIPES_URL}"
  mkdir -p "${PRETEND_URL}"
  mkdir -p "${BUILD_REPO}"
  mkdir -p "${TRANSFER_DIR}"
  mkdir -p "${AIRGAP_CLONE_DIR}"
}

begin_test "Part 1 - Setup test repo"
(
  setup_test
  setup_variables

  VSI_COMMON_SHA="$(cd "${VSI_COMMON_DIR}" && git rev-parse HEAD)"
  RECIPES_SHA="$(cd "${VSI_COMMON_DIR}/docker/recipes" && git rev-parse HEAD)"

  # Create faux-urls for the repo and its submodules

  # I cannot directly add the actual vsi_common repository (VSI_COMMON_DIR)
  # under test as a submodule because the docker/recipes submodule can't be
  # found (it is expected to be at ../../VisionSystemsInc/docker_recipes.git)
  # I also now push a change to it
  pushd "${VSI_COMMON_URL}" &> /dev/null
    # The mirror's HEAD will be at the same SHA as the real VSI_COMMON_DIR
    # under test
    git clone --mirror "${VSI_COMMON_DIR}" . # This is the real VSI_COMMON_DIR
    [ "${VSI_COMMON_SHA}" = "$(git rev-parse HEAD)" ]
    # This is creating a faux-mirror from a (local) clone. Therefore, the
    # tracked commit (HEAD) cannot exist on a remote-only branch because (e.g.,
    # origin/master) because these are skipped during git_import-repo to the
    # air-gapped server (in a true mirror, there should be no refs/remotes;
    # they get translated to refs/heads by the refspec on push)
    # RE Could checkout each ref/remotes, but we only need the current SHA
    # RE This should not be a problem on CI
    git branch local "${VSI_COMMON_SHA}"
  popd &> /dev/null

  # In this case, it is lucky that the recipes submodule is stored as a relative
  # URL; otherwise, we'd have to modify the parent project
  pushd "${RECIPES_URL}" &> /dev/null
    git clone --mirror "${VSI_COMMON_DIR}"/docker/recipes .
    [ "${RECIPES_SHA}" = "$(git rev-parse HEAD)" ]
    # Because we are creating a faux-mirror from a (local) clone, create a
    # local branch at the current SHA to ensure the commit is properly mirrored
    # (see above)
    git branch local "${RECIPES_SHA}"
  popd &> /dev/null

  # Main repo
  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init
    touch readme
    git add readme
    git commit -m "Initial commit"

    # The working tree of this vsi_common submodule will have the same SHA
    # checked out as the VSI_COMMON_DIR being tested. Uncommited changes will
    # not exist in this repo
    git submodule add "${VSI_COMMON_URL}" vsi_common
    git submodule update --init --recursive
    [ "${VSI_COMMON_SHA}" = "$(git submodule status vsi_common | awk '{print $1}')" ]
    git add vsi_common

    git commit -m "Added submodules"
    git remote add origin "${PRETEND_URL}"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}"
  pushd "${PRETEND_URL}" &> /dev/null
    git clone --mirror "${BUILD_REPO}" .
  popd &> /dev/null
)
end_test

begin_test "Part 2 - Initial mirror"
(
  setup_test
  setup_variables

  pushd "${BUILD_REPO}" &> /dev/null
    # NOTE Uncommited changes to just_git_airgap_repo.bsh will not exist in
    # this repo, so they cannot be not sourced
    source "${BUILD_REPO}/vsi_common/linux/just_files/just_version.bsh"
    source "${BUILD_REPO}/vsi_common/linux/just_git_airgap_repo.bsh"
    GIT_MIRROR_PREP_DIR="${PREP_DIR}"
    VSI_COMMON_DIR="${BUILD_REPO}"/vsi_common JUST_VERSION="${JUST_VERSION}" JUST_USER_CWD="${PWD}" \
        relocate_git_defaultify git_export-repo "${PRETEND_URL}" master
  popd &> /dev/null
)
end_test

begin_test "Part 3 - Simulating transfer"
(
  setup_test
  setup_variables

  PREP_FILE=("${PREP_DIR}"/transfer_*.tgz)

  pushd "${TRANSFER_DIR}" &> /dev/null
    tar zxf "${PREP_FILE[0]}"
  popd &> /dev/null
)
end_test

begin_test "Part 4 - Pushing to mirror"
(
  setup_test
  setup_variables

  for d in pretend_repo.git vsi_common.git recipes.git; do
    mkdir -p "${AIRGAP_MIRROR_DIR}/${d}"
    pushd "${AIRGAP_MIRROR_DIR}/${d}" &> /dev/null
      git init --bare
    popd &> /dev/null
  done

  pushd "${TRANSFER_DIR}" &> /dev/null
    source setup.env # Sets VSI_COMMON_DIR to "${TRANSFER_DIR}"/.vsi_common
    source "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"
    sed "${sed_flags_i[@]}" -e \
        's|^JUST_GIT_AIRGAP_MIRROR_URL=$|JUST_GIT_AIRGAP_MIRROR_URL="'"${AIRGAP_MIRROR_DIR}"'"|' repo_map.env
    JUST_USER_CWD="${PWD}" relocate_git_defaultify git_import-repo
  popd &> /dev/null
)
end_test

begin_test "Part 5 - Cloning from mirror"
(
  setup_test
  setup_variables

  pushd "${AIRGAP_CLONE_DIR}" &> /dev/null
    git clone "${AIRGAP_MIRROR_DIR}"/pretend_repo.git .

    # per just_git_airgap_repo:print_git_airgap_submodule_update
    source /dev/stdin <<< "$(git show origin/__just_git_mirror_info_file:repo_map.env 2>/dev/null)"
    git_airgap_submodule_update vsi_common

    source "${AIRGAP_CLONE_DIR}/vsi_common/linux/just_git_airgap_repo.bsh"

    JUST_USER_CWD="${PWD}" relocate_git_defaultify git_clone-airgap-repo
  popd &> /dev/null

  # The main repo is dealt with separately from submodules. Be sure to test both
  ans="$(cd "${BUILD_REPO}" && git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}" && git rev-parse HEAD)" = "${ans}" ]
  ans="$(cd "${BUILD_REPO}"/vsi_common/docker/recipes&& git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}"/vsi_common/docker/recipes && git rev-parse HEAD)" = "${ans}" ]

  # NOTE More complicated scenarios are tested in test-git_mirror.bsh
)
end_test

begin_test "Part 6 - Incremental update"
(
  setup_test
  setup_variables

  ##################################
  #              SETUP             #
  ##################################

  # Add a file to the main repo
  pushd "${BUILD_REPO}" &> /dev/null
    touch newfile
    git add newfile
    git commit -m "add a file"

    pushd vsi_common &> /dev/null
      touch newfile_sub
      git add newfile_sub
      git commit -m "add a new file"
      # NOTE This adds a commit to a mirrored copy of vsi_common
      git push origin "$(git rev-parse --abbrev-ref HEAD)"
    popd &> /dev/null
    git add vsi_common
    git commit -m "update submodule"

    git push origin master
  popd &> /dev/null

  # Update the prepped mirror
  pushd "${BUILD_REPO}" &> /dev/null
  (
    # NOTE Uncommited changes to just_git_airgap_repo.bsh will not exist in
    # this repo, so they cannot be sourced
    source "${BUILD_REPO}/vsi_common/linux/just_files/just_version.bsh"
    source "${BUILD_REPO}/vsi_common/linux/just_git_airgap_repo.bsh"
    GIT_MIRROR_PREP_DIR="${PREP_DIR}"
    # URL and branch are chosen automatically
    VSI_COMMON_DIR="${BUILD_REPO}"/vsi_common JUST_VERSION="${JUST_VERSION}" JUST_USER_CWD="${PWD}" \
        relocate_git_defaultify git_export-repo "${PRETEND_URL}" master
  )
  popd &> /dev/null

  # Select the incremental backup if it exists
  PREP_FILE="$(ls -rt "${PREP_DIR}"/transfer_*_transfer_*.tgz 2> /dev/null | tail -n1)"
  if [ -z "${PREP_FILE:+set}" ]; then
    PREP_FILE="$(ls -rt "${PREP_DIR}"/transfer_*.tgz | tail -n1)"
  fi

  # Simulate the transfer
  pushd "${TRANSFER_DIR}" &> /dev/null
    tar zxf "${PREP_FILE}"
  popd &> /dev/null

  # Pushing to the mirror
  pushd "${TRANSFER_DIR}" &> /dev/null
  (
    source setup.env # Sets VSI_COMMON_DIR to "${TRANSFER_DIR}"/.vsi_common
    source "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"
    sed "${sed_flags_i[@]}" -e \
        's|^JUST_GIT_AIRGAP_MIRROR_URL=$|JUST_GIT_AIRGAP_MIRROR_URL="'"${AIRGAP_MIRROR_DIR}"'"|' repo_map.env
    JUST_USER_CWD="${PWD}" relocate_git_defaultify git_import-repo
  )
  popd &> /dev/null

  # Pulling changes from the mirror
  pushd "${AIRGAP_CLONE_DIR}" &> /dev/null
    git pull
    git submodule update --init --recursive
  popd

  #################################
  #              TEST             #
  #################################

  ans="$(cd "${BUILD_REPO}" && git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}" && git rev-parse HEAD)" = "${ans}" ]
  ans="$(cd "${BUILD_REPO}/vsi_common" && git rev-parse HEAD)"
  [ "$(cd "${AIRGAP_CLONE_DIR}/vsi_common" && git rev-parse HEAD)" = "${ans}" ]
)
end_test

begin_test "Check for unpushed tracked commits in submodules"
(
  setup_test

  ##################################
  #              SETUP             #
  ##################################

  BUILD_REPO="${TESTDIR}"/build_repo
  SYNC_REPO="${TESTDIR}"/sync_repo
  PRETEND_URL="${TESTDIR}/git/pretend_repo" # bare repo
  # Test if git supports difficult submodule paths
  if git_bug_submodule_path_with_special_characters; then
    DIFFICULT_PATH='ext/diff  i cult'
  else
    DIFFICULT_PATH=$'ext/diff  i \t cult'
  fi
  DIFFICULT_NAME='difficult submod'

  ENCLOSING_REPO="${TESTDIR}"/enclosing
  SEPARATE_REPO="${ENCLOSING_REPO}"/separate
  SEPARATE_GITDIR="${TESTDIR}"/separate.git

  # Sub sub module
  mkdir -p "${BUILD_REPO}_sub_sub"
  pushd "${BUILD_REPO}_sub_sub" &> /dev/null
    git init .
    touch readme_sub_sub
    git add readme_sub_sub
    git commit -m "Initial commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_sub_sub"
  pushd "${PRETEND_URL}_sub_sub" &> /dev/null
    # This only works right because all branches appear to be "topic" branches,
    # so a push --mirror (once) will do what I want. Doesn't work well with more
    # complexities like lfs
    git clone --mirror "${BUILD_REPO}_sub_sub" .
    # git init --bare .
    # cd "${BUILD_REPO}_sub_sub"
    # git remote add origin "${PRETEND_URL}_sub_sub"
    # git push origin --mirror
  popd &> /dev/null

  # Sub module
  mkdir -p "${BUILD_REPO}_sub"
  pushd "${BUILD_REPO}_sub" &> /dev/null
    git init .
    touch readme_sub
    git add readme_sub
    git submodule add "${PRETEND_URL}_sub_sub" "a_sub_sub_module"
    git commit -m "Initial commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_sub"
  pushd "${PRETEND_URL}_sub" &> /dev/null
    git clone --mirror "${BUILD_REPO}_sub" .
    # git init --bare .
    # cd "${BUILD_REPO}_sub"
    # git remote add origin "${PRETEND_URL}_sub"
    # git push origin --mirror
  popd &> /dev/null

  # Main Repo

  # sm_path (sm_name, if different)              URL
  # ./                                           "${PRETEND_URL}"
  # ./"${DIFFICULT_PATH}" ("${DIFFICULT_NAME}")  "${PRETEND_URL}_sub"
  # ./"${DIFFICULT_PATH}/a_sub_sub_module"       "${PRETEND_URL}_sub_sub"
  #
  # NOTE each repo is created in a respective ${BUILD_REPO}"_* repo and mirror
  # pushed to "${PRETEND_URL}"_*

  mkdir -p "${PRETEND_URL}"
  pushd "${PRETEND_URL}" &> /dev/null
    git init --bare .
  popd &> /dev/null
  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init
    touch readme
    mkdir subdir
    touch subdir/a_file
    git add readme subdir/a_file
    git commit -m "Initial commit"
    # REVIEW Make this a relative URL and the submodule a relative URL as well
    # RE I think this only matters in submodule-helper-relative-url, which is
    # tested (with relative URLs) separately below
    git remote add origin "${PRETEND_URL}"
    git push origin master

    git submodule add --name "${DIFFICULT_NAME}" "${PRETEND_URL}_sub" "${DIFFICULT_PATH}"
    # Git itself can't handle newlines, although the config file actually can
    # escape them. This is a PURE git bug, plain and simple.
    # This won't actually create a newline in the name, it just ignores it
    # git submodule add https://github.com/visionsystemsinc/vsi_common $'  foo\tar\n'
    # This will.
    # git mv $'  diff  i \t cult' $' \n diff  i \t cult'
    # However, at random this gives permission denied errors, good thing I don't need it...
    git submodule update --init --recursive
    git commit -m "Added submodules"

    pushd "${DIFFICULT_PATH}" &> /dev/null
      pushd a_sub_sub_module &> /dev/null
        git checkout master
        mkdir subdir
        touch subdir/a_sub_sub_file
        git add subdir/a_sub_sub_file
        git commit -m "Second commit"
      popd &> /dev/null

      git add a_sub_sub_module
      git commit -m "update (sub) sub module"
    popd &> /dev/null

    git add "${DIFFICULT_PATH}"
    git commit -m "Updated submodules"
  popd &> /dev/null

  # Use this repo to test git_sync_submodules
  cp -a "${BUILD_REPO}" "${SYNC_REPO}"


  # Create another repo hierarchy, similar to the first, but with a separate
  # git dir and inside another git repo

  mkdir -p "${ENCLOSING_REPO}"
  pushd "${ENCLOSING_REPO}" &> /dev/null
    git init .
    touch readme
    git add readme
    git commit -m "Initial commit"
  popd &> /dev/null

  mkdir -p "${SEPARATE_REPO}"
  pushd "${SEPARATE_REPO}" &> /dev/null
    git init --separate-git-dir "${SEPARATE_GITDIR}" .
    touch readme
    mkdir subdir
    touch subdir/a_file
    git add readme subdir/a_file
    git commit -m "Initial commit"

    git submodule add --name "${DIFFICULT_NAME}" "${PRETEND_URL}_sub" "${DIFFICULT_PATH}"
    git submodule update --init --recursive
    git commit -m "Added submodules"
    # doesn't actually have to be tracked by the repo
    mkdir -p "${DIFFICULT_PATH}"/a_sub_sub_module/subdir
  popd &> /dev/null

  #################################
  #              TEST             #
  #################################

  pushd "${BUILD_REPO}" &> /dev/null
    # Verify the listing of the submodule paths
    [ "$(get_submodule_displaypaths)" = "${DIFFICULT_PATH}" ]
    ans="$(printf "${DIFFICULT_PATH}\n${DIFFICULT_PATH}/a_sub_sub_module")"
    [ "$(RECURSIVE=0 get_submodule_displaypaths)" = "${ans}" ]

    # Test in a subdir
    [ "$(cd subdir && get_submodule_displaypaths)" = "../${DIFFICULT_PATH}" ]
    ans="$(printf "../${DIFFICULT_PATH}\n../${DIFFICULT_PATH}/a_sub_sub_module")"
    [ "$(cd subdir && RECURSIVE=0 get_submodule_displaypaths)" = "${ans}" ]

    # Test in a subdir that is in the path to the submodule (e.g., external and
    # external/vsi_common)
    [ "$(basename "${DIFFICULT_PATH}")" != "$(dirname "${DIFFICULT_PATH}")" ]
    ans="$(basename "${DIFFICULT_PATH}")"
    [ "$(cd "$(dirname "${DIFFICULT_PATH}")" && get_submodule_displaypaths)" = "${ans}" ]
    ans="$(printf "$(basename "${DIFFICULT_PATH}")\n$(basename "${DIFFICULT_PATH}")/a_sub_sub_module")"
    [ "$(cd "$(dirname "${DIFFICULT_PATH}")" && RECURSIVE=0 get_submodule_displaypaths)" = "${ans}" ]

    # Test in a submodule
    [ "$(cd "${DIFFICULT_PATH}" && get_submodule_displaypaths)" = "a_sub_sub_module" ]
    [ "$(cd "${DIFFICULT_PATH}" && RECURSIVE=0 get_submodule_displaypaths)" = "a_sub_sub_module" ]

    # Test in a repo with no submodules
    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && get_submodule_displaypaths)"
    [ "${output}" = "" ]
    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && RECURSIVE=0 get_submodule_displaypaths)"
    [ "${output}" = "" ]

    # Verify the listing of the submodule URLs
    [ "$(get_submodule_urls)" = "${PRETEND_URL}_sub" ]
    ans="$(printf "${PRETEND_URL}_sub\n${PRETEND_URL}_sub_sub")"
    [ "$(RECURSIVE=0 get_submodule_urls)" = "${ans}" ]

    [ "$(cd subdir && get_submodule_urls)" = "${PRETEND_URL}_sub" ]
    ans="$(printf "${PRETEND_URL}_sub\n${PRETEND_URL}_sub_sub")"
    [ "$(cd subdir && RECURSIVE=0 get_submodule_urls)" = "${ans}" ]

    [ "$(cd "${DIFFICULT_PATH}" && get_submodule_urls)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && RECURSIVE=0 get_submodule_urls)" = "${PRETEND_URL}_sub_sub" ]

    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && get_submodule_urls)"
    [ "${output}" = "" ]
    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && RECURSIVE=0 get_submodule_urls)"
    [ "${output}" = "" ]

    # Verify the listing of the submodule names
    [ "$(get_submodule_names)" = "${DIFFICULT_NAME}" ]
    ans="$(printf "${DIFFICULT_NAME}\na_sub_sub_module")"
    [ "$(RECURSIVE=0 get_submodule_names)" = "${ans}" ]

    [ "$(cd subdir && get_submodule_names)" = "${DIFFICULT_NAME}" ]
    ans="$(printf "${DIFFICULT_NAME}\na_sub_sub_module")"
    [ "$(cd subdir && RECURSIVE=0 get_submodule_names)" = "${ans}" ]

    [ "$(cd "${DIFFICULT_PATH}" && get_submodule_names)" = a_sub_sub_module ]
    [ "$(cd "${DIFFICULT_PATH}" && RECURSIVE=0 get_submodule_names)" = a_sub_sub_module ]

    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && get_submodule_names)"
    [ "${output}" = "" ]
    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && RECURSIVE=0 get_submodule_names)"
    [ "${output}" = "" ]

    # Verify the listing of the submodule top-levels
    [ "$(real_path "$(get_submodule_toplevels)")" = "$(real_path "${BUILD_REPO}")" ]
    [ "$(cd subdir && real_path "$(get_submodule_toplevels)")" = "$(real_path "${BUILD_REPO}")" ]

    expected=("$(real_path "${BUILD_REPO}")" "$(real_path "${BUILD_REPO}/${DIFFICULT_PATH}")")
    ans="$(printf '%s\n' "${expected[@]}")"
    output="$(RECURSIVE=0 get_submodule_toplevels | tr "\n" "\0" | xargs -0 -I {} -n 1 real_path {})"
    [ "${output}" = "${ans}" ]
    output="$(cd subdir && \
        RECURSIVE=0 get_submodule_toplevels | tr "\n" "\0" | xargs -0 -I {} -n 1 real_path {})"
    [ "${output}" = "${ans}" ]

    output="$(cd "${DIFFICULT_PATH}" && real_path "$(get_submodule_toplevels)")"
    [ "${output}" = "$(real_path "${BUILD_REPO}/${DIFFICULT_PATH}")" ]
    output="$(cd "${DIFFICULT_PATH}" && real_path "$(RECURSIVE=0 get_submodule_toplevels)")"
    [ "${output}" = "$(real_path "${BUILD_REPO}/${DIFFICULT_PATH}")" ]

    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && get_submodule_toplevels)"
    [ "${output}" = "" ]
    output="$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && RECURSIVE=0 get_submodule_toplevels)"
    [ "${output}" = "" ]
  popd &> /dev/null


  # Test git_sync_submodules
  # NOTE submodule-helper-relative-url is tested below
  pushd "${SYNC_REPO}" &> /dev/null
    # (Don't change git config remote.origin.url here)
    git config submodule."${DIFFICULT_NAME}".url "${PRETEND_URL}_sub1"
    pushd "${DIFFICULT_PATH}" &> /dev/null
      git config remote.origin.url "${PRETEND_URL}_sub1"
      git config submodule.a_sub_sub_module.url "${PRETEND_URL}_sub_sub1"
    popd &> /dev/null
    pushd "${DIFFICULT_PATH}/a_sub_sub_module" &> /dev/null
      git config remote.origin.url "${PRETEND_URL}_sub_sub1"
    popd &> /dev/null
    git submodule sync --recursive
    # Test the default configuration is correct (absolute paths)
    [ "$(git config remote.origin.url)" = "${PRETEND_URL}" ]
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
      git config submodule.a_sub_sub_module.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && \
      git config remote.origin.url)" = "${PRETEND_URL}_sub_sub" ]

    # Test non-recursively
    git_sync_submodules
    [ "$(git config remote.origin.url)" = "${PRETEND_URL}" ]
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
      git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
    # Test the just_upstream configuration is correct
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub" ]
    pushd "${DIFFICULT_PATH}"/a_sub_sub_module &> /dev/null
      not git config remote.just_upstream.url
    popd &> /dev/null

    #        submod
    #      abs rel url
    # abs  1   4   7
    # rel  2   5   8
    # url  3   6   9
    # Tests 4, 5, and 6 depend on the parent repository; the rest should not

    # 1) Test the default configuration is still correct (just_upstream == origin)
    RECURSIVE=0 git_sync_submodules
    [ "$(git config remote.origin.url)" = "${PRETEND_URL}" ]
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
      git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
      git config submodule.a_sub_sub_module.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && \
      git config remote.origin.url)" = "${PRETEND_URL}_sub_sub" ]
    # Test the just_upstream configuration is correct
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub_sub" ]

    # 1) Test abs remote and abs submodule (for a specified remote)
    git remote add upstream "${PRETEND_URL}"
    # Change origin's URL so we can tell if we are using the wrong remote
    # NOTE These paths don't have to resolve
    git remote set-url origin "${PRETEND_URL}_origin"
    pushd "${DIFFICULT_PATH}" &> /dev/null
      git remote set-url origin "${PRETEND_URL}_origin_sub"
    popd &> /dev/null
    pushd "${DIFFICULT_PATH}"/a_sub_sub_module &> /dev/null
      git remote set-url origin "${PRETEND_URL}_origin_sub_sub"
    popd &> /dev/null
    RECURSIVE=0 git_sync_submodules upstream
    # 1) Test the default configuration is still correct
    [ "$(git config remote.origin.url)" = "${PRETEND_URL}_origin" ]
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
      git config remote.origin.url)" = "${PRETEND_URL}_origin_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
      git config submodule.a_sub_sub_module.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && \
      git config remote.origin.url)" = "${PRETEND_URL}_origin_sub_sub" ]
    # Test the upstream configuration is still correct
    [ "$(git config remote.upstream.url)" = "${PRETEND_URL}" ]
    # Test the just_upstream configuration is correct
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub_sub" ]

    # 2) Test relative remote and abs submodule
    git remote set-url upstream "../$(basename "${PRETEND_URL}")"
    RECURSIVE=0 git_sync_submodules upstream
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub" ]

    # 3) Test URL remote and abs submodule
    git remote set-url upstream "https://git-server.com/org/repo.git"
    RECURSIVE=0 git_sync_submodules upstream
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub" ]


    # 4) Test an abs remote and relative submodule
    git remote set-url upstream "${PRETEND_URL}"
    cp .gitmodules .gitmodules.bak
    sed "${sed_flags_i[@]}" -e \
         "s|url = ${PRETEND_URL}_sub|url = ../$(basename "${PRETEND_URL}_rel_sub")|" .gitmodules
    git add .gitmodules
    git commit -m "update .gitmodules"
    RECURSIVE=0 git_sync_submodules upstream
    # Test the just_upstream configuration is correct
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_rel_sub" ]

    # 5) Test relative remote and relative submodule
    git remote set-url upstream "../$(basename "${PRETEND_URL}")"
    RECURSIVE=0 git_sync_submodules upstream
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "../../../$(basename "${PRETEND_URL}_rel_sub")" ]

    # 6) Test URL remote and relative submodule
    git remote set-url upstream "https://git-server.com/org/repo.git"
    RECURSIVE=0 git_sync_submodules upstream
    [ "$(cd "${DIFFICULT_PATH}" && git config remote.just_upstream.url)" = \
        "https://git-server.com/org/$(basename "${PRETEND_URL}_rel_sub")" ]


    # 7) Test abs remote and URL submodule
    git remote set-url upstream "${PRETEND_URL}"
    cp .gitmodules.bak .gitmodules
    sed "${sed_flags_i[@]}" -e \
         "s|url = ${PRETEND_URL}_sub|url = https://git-server.com/org/submod.git|" .gitmodules
    git add .gitmodules
    git commit -m "update .gitmodules"
    RECURSIVE=0 git_sync_submodules upstream
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "https://git-server.com/org/submod.git" ]

    # 8) Test relative remote and URL submodule
    git remote set-url upstream "../$(basename "${PRETEND_URL}")"
    RECURSIVE=0 git_sync_submodules upstream
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "https://git-server.com/org/submod.git" ]

    # 9) Test URL remote and URL submodule
    git remote set-url upstream "https://git-server.com/org/repo.git"
    RECURSIVE=0 git_sync_submodules upstream
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.just_upstream.url)" = "https://git-server.com/org/submod.git" ]

    # Reset remotes
    cp .gitmodules.bak .gitmodules
    git add .gitmodules
    git commit -m "update .gitmodules"
    # git submodule sync
    git remote set-url origin "${PRETEND_URL}"
    pushd "${DIFFICULT_PATH}" &> /dev/null
      git remote set-url origin "${PRETEND_URL}_sub"
    popd &> /dev/null
    pushd "${DIFFICULT_PATH}"/a_sub_sub_module &> /dev/null
      git remote set-url origin "${PRETEND_URL}_sub_sub"
    popd &> /dev/null


    # Test in a repository with no submodules
    pushd "${DIFFICULT_PATH}/a_sub_sub_module" &> /dev/null
      RECURSIVE=0 git_sync_submodules # This shouldn't die
      [ "$(git config remote.just_upstream.url)" = "${PRETEND_URL}_sub_sub" ]
    popd &> /dev/null


    # Customize the remote name and ensure no other remotes get modified
    git remote set-url origin "https://git-server.com/org/repo1.git"
    pushd "${DIFFICULT_PATH}" &> /dev/null
      git remote set-url just_upstream "https://git-server.com/org/submod2.git"
    popd &> /dev/null
    cp .gitmodules.bak .gitmodules
    sed "${sed_flags_i[@]}" -e \
        "s|url = ${PRETEND_URL}_sub|url = https://git-server.com/org/submod3.git|" .gitmodules
    git add .gitmodules
    git commit -m "update .gitmodules"
    JUST_GIT_UPSTREAM=foo_upstream RECURSIVE=0 git_sync_submodules
    [ "$(git config remote.origin.url)" = "https://git-server.com/org/repo1.git" ]
    pushd "${DIFFICULT_PATH}" &> /dev/null
      [ "$(git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
      [ "$(git config remote.just_upstream.url)" = "https://git-server.com/org/submod2.git" ]
      [ "$(git config remote.foo_upstream.url)" = "https://git-server.com/org/submod3.git" ]
    popd &> /dev/null

    # Test the default configuration is still correct
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && \
        git config submodule.a_sub_sub_module.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && \
        git config remote.origin.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && \
        git config remote.just_upstream.url)" = "${PRETEND_URL}_sub_sub" ]
  popd &> /dev/null


  # Test check_submodules_are_pushed_recursively
  expected1="WARNING The commit tracked by the parent repository of the
submodule, '${DIFFICULT_NAME}', has not been pushed to the
remote URL tracked by the parent repository:
  ${PRETEND_URL}_sub

WARNING The commit tracked by the parent repository of the
submodule, 'a_sub_sub_module', has not been pushed to the
remote URL tracked by the parent repository:
  ${PRETEND_URL}_sub_sub" # NOTE there is actually a trailing newline here...

  expected2="WARNING The commit tracked by the parent repository of the
submodule, 'a_sub_sub_module', has not been pushed to the
remote URL tracked by the parent repository:
  ${PRETEND_URL}_sub_sub" # NOTE there is actually a trailing newline here...

  pushd "${BUILD_REPO}" &> /dev/null
    rv=0
    output="$(check_submodules_are_pushed_recursively)" || rv=$?
    [ "${rv}" -eq 1 ] && [ "${output}" = "${expected1}" ]

    # Push the changes to the submodule
    pushd "${DIFFICULT_PATH}" &> /dev/null
      git push origin master
    popd &> /dev/null
    rv=0
    output="$(check_submodules_are_pushed_recursively)" || rv=$?
    [ "${rv}" -eq 1 ] && [ "${output}" = "${expected2}" ]

    # Push the changes to the sub submodule
    pushd "${DIFFICULT_PATH}"/a_sub_sub_module &> /dev/null
      git push origin master
    popd &> /dev/null
    output="$(check_submodules_are_pushed_recursively)"
    [ "${output}" = "" ]

    # NOTE We are not testing whether whether the top-level repo has unpushed
    # changes for a given remote & branch; log_unpushed_commits is used to
    # test for this. See the next section, git functionality
  popd &> /dev/null

  # A repo with no submodules
  pushd "${BUILD_REPO}_sub_sub" &> /dev/null
    output="$(check_submodules_are_pushed_recursively)"
    [ "${output}" = "" ]
  popd &> /dev/null


  # Test git_project_root_dir
  ans="$(real_path "${BUILD_REPO}")"
  # needed by macOS to deal with /var/... and /private/var/...
  [ "$(cd "${BUILD_REPO}" && real_path "$(git_project_root_dir)")" = "${ans}" ]
  # needed by macOS to deal with /var/... and /private/var/...
  [ "$(cd "${BUILD_REPO}"/subdir && real_path "$(git_project_root_dir)")" = "${ans}" ]
  [ "$(cd "${BUILD_REPO}/${DIFFICULT_PATH}"/a_sub_sub_module/subdir && \
      real_path "$(git_project_root_dir)")" = "${ans}" ]

  ans="$(real_path "${SEPARATE_REPO}")"
  # needed by macOS to deal with /var/... and /private/var/...
  [ "$(cd "${SEPARATE_REPO}" && real_path "$(git_project_root_dir)")" = "${ans}" ]
  # needed by macOS to deal with /var/... and /private/var/...
  [ "$(cd "${SEPARATE_REPO}"/subdir && real_path "$(git_project_root_dir)")" = "${ans}" ]
  [ "$(cd "${SEPARATE_REPO}/${DIFFICULT_PATH}"/a_sub_sub_module/subdir && \
      real_path "$(git_project_root_dir)")" = "${ans}" ]


  # Test git_project_git_dir
  ans="$(real_path "${BUILD_REPO}/.git")"
  # needed by macOS to deal with /var/... and /private/var/...
  [ "$(cd "${BUILD_REPO}" && real_path "$(git_project_git_dir)")" = "${ans}" ]
  # needed by macOS to deal with /var/... and /private/var/...
  [ "$(cd "${BUILD_REPO}"/subdir && real_path "$(git_project_git_dir)")" = "${ans}" ]
  [ "$(cd "${BUILD_REPO}/${DIFFICULT_PATH}"/a_sub_sub_module/subdir && \
      real_path "$(git_project_git_dir)")" = "${ans}" ]

  # Test from within a repo with a separate .git directory
  ans="$(real_path "${SEPARATE_GITDIR}")"
  # needed by macOS to deal with /var/... and /private/var/...
  [ "$(cd "${SEPARATE_REPO}" && real_path "$(git_project_git_dir)")" = "${ans}" ]

  # Test from within a bare repo
  ans="$(real_path "${PRETEND_URL}")"
  [ "$(cd "${PRETEND_URL}" && real_path "$(git_project_git_dir)")" = "${ans}" ]
  [ "$(cd "${PRETEND_URL}/hooks" && real_path "$(git_project_git_dir)")" = "${ans}" ]

  # Test from within the separate .git directory
  ans="$(real_path "${SEPARATE_GITDIR}")"
  [ "$(cd "${SEPARATE_GITDIR}" && real_path "$(git_project_git_dir)")" = "${ans}" ]
)
end_test

begin_test "git functionality"
(
  setup_test

  ##################################
  #              SETUP             #
  ##################################

  # git log --pretty=format:"%s%d" --graph --all
  # * Eleventh commit (HEAD -> tracking_branchpoint)
  # * Tenth commit (master)
  # *   Merge branch 'nontracking_merge'
  # |\
  # | * Branching commit (nontracking_merge)
  # * | Ninth commit
  # |/
  # | * Eighth commit (tracking_branch_ahead)
  # | * Seventh commit (nontracking_branch_ahead)
  # | * Sixth commit (origin/checkpoint, checkpoint)
  # |/
  # | * Tag commit (tag: v0.9)
  # |/
  # * Fourth commit (origin/tracking_branch_equal, origin/tracking_branch_ahead, origin/master,   # tracking_branch_equal, nontracking_branch_equal)
  # * Third commit (tracking_branch_behind)
  # * Second commit (nontracking_branch_behind)
  # * First commit (remote_tracking_branch_deleted)
  # * Initial commit
  #
  # git branch -vv
  #   checkpoint                     Sixth commit
  #   master                         [origin/master] Fourth commit
  #   nontracking_branch_ahead       Seventh commit
  #   nontracking_branch_behind      Second commit
  #   nontracking_branch_equal       Fourth commit
  #   nontracking_merge              Branching commit
  #   remote_tracking_branch_deleted [origin/remote_tracking_branch_deleted: gone] First commit
  # * tracking_branch_ahead          [origin/tracking_branch_ahead: ahead 3] Eighth commit
  #   tracking_branch_behind         [origin/master: behind 1] Third commit
  #   tracking_branch_equal          [origin/tracking_branch_equal] Fourth commit
  #   tracking_branchpoint           [origin/master: ahead 1] Tenth commit

  BUILD_REPO="${TESTDIR}"/build_repo
  PRETEND_URL="${TESTDIR}/git/pretend_repo.git" # bare repo

  # Main repo
  mkdir -p "${PRETEND_URL}"
  pushd "${PRETEND_URL}" &> /dev/null
    git init --bare .
  popd &> /dev/null
  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init .
    touch readme
    git add readme
    git commit -m "Initial commit"
    git remote add origin "${PRETEND_URL}"
    git push origin master # master is not tracking origin/master

    # no outgoing commits - no tracking branches
    output="$(log_outgoing_commits)"
    [ "${output}" = "" ]

    echo "1" >> readme
    git add readme
    git commit -m "First commit"

    git checkout -b remote_tracking_branch_deleted
    git push -u origin remote_tracking_branch_deleted
    git push origin --delete remote_tracking_branch_deleted
    git checkout master

    echo "2" >> readme
    git add readme
    git commit -m "Second commit"
    git branch nontracking_branch_behind

    echo "3" >> readme
    git add readme
    git commit -m "Third commit"
    git branch tracking_branch_behind
    git branch tracking_branch_behind -u origin/master

    echo "4" >> readme
    git add readme
    git commit -m "Fourth commit"
    git branch nontracking_branch_equal
    git branch tracking_branch_equal
    git push -u origin tracking_branch_equal

    git branch master -u origin/master
    git push origin master
    # make a remote-tracking branch, origin/tracking_branch_ahead, at
    # origin/master
    git push origin origin/master:refs/heads/tracking_branch_ahead

    git checkout -b checkpoint
    echo "6" >> readme
    git add readme
    git commit -m "Sixth commit"
    git push origin checkpoint # non-tracking branch

    echo "7" >> readme
    git checkout -b nontracking_branch_ahead
    git add readme
    git commit -m "Seventh commit"

    echo "8" >> readme
    git checkout -b tracking_branch_ahead
    git branch tracking_branch_ahead -u origin/tracking_branch_ahead
    git add readme
    git commit -m "Eighth commit"

    git checkout master
    git checkout -b nontracking_merge
    echo "A" >> readme
    git add readme
    git commit -m "Branching commit"

    git checkout master
    git checkout -b v0.9
    echo "version bump" >> readme
    git add readme
    git commit -m "Tag commit"
    git tag v0.9

    git checkout master
    git branch -D v0.9
    echo "9" >> a_file
    git add a_file
    git commit -m "Ninth commit"
    git merge nontracking_merge

    echo "10" >> readme
    git add readme
    git commit -m "Tenth commit"

    git checkout master
    git checkout -b tracking_branchpoint
    git branch tracking_branchpoint -u origin/master
    echo "11" >> readme
    git add readme
    git commit -m "Eleventh commit"
  popd &> /dev/null

  #################################
  #              TEST             #
  #################################

  pushd "${BUILD_REPO}" &> /dev/null
    # list local tracking branches and their corresponding remote branch
    # NOTE remote_tracking_branch_deleted is a tracking branch, but the remote-
    # tracking branch has been deleted
    get_tracking_branches
    ans=("master" "tracking_branch_ahead" "tracking_branch_behind" \
        "tracking_branch_equal" "tracking_branchpoint")
    assert_array_eq just_git_tracking_branches ans

    ans=("origin/master" "origin/tracking_branch_ahead" "origin/master" \
        "origin/tracking_branch_equal" "origin/master")
    assert_array_eq just_git_remote_tracking_branches ans

    # specify a branch that has a tracking branch
    output="$(get_tracking_branches origin tracking_branch_behind)"
    [ "${output}" = "origin/master" ]

    # specify a branch that does not have a tracking branch
    output="$(get_tracking_branches origin nontracking_branch_behind)"
    [ "${output}" = "" ]
  popd &> /dev/null


  pushd "${BUILD_REPO}" &> /dev/null
    # nothing unpushed - branch (non-tracking) behind origin/master
    output="$(log_unpushed_commits origin nontracking_branch_behind)"
    [ "${output}" = "" ]

    # no outgoing commits - tracking_branch is behind its tracked branch, origin/master (a differently named branch)
    output="$(log_outgoing_commits origin tracking_branch_behind)"
    [ "${output}" = "" ]

    # nothing unpushed - branch (non-tracking) equal to origin/master
    output="$(log_unpushed_commits origin nontracking_branch_equal)"
    [ "${output}" = "" ]

    # no outgoing commits - tracking_branch is equal to its tracked branch, origin/master (a differently named branch)
    output="$(log_outgoing_commits origin tracking_branch_equal)"
    [ "${output}" = "" ]

    # unpushed commits - branch (non-tracking) ahead of origin/master
    [[ "$(log_unpushed_commits origin nontracking_branch_ahead | head -n 1)" = *"1 unpushed"* ]] || false

    # outgoing commits - tracking_branch is ahead of its tracked branch, origin/master (a differently named branch)
    [[ "$(log_unpushed_commits origin tracking_branch_ahead | head -n 1)" = *"2 unpushed"* ]] || false
    [[ "$(log_outgoing_commits origin tracking_branch_ahead | head -n 1)" = *"3 outgoing"* ]] || false

    # all unpushed commits
    [[ "$(log_unpushed_commits | head -n 1)" = *"8 unpushed"* ]] || false

    # all outgoing commits
    # These logs don't always seem to organize themselves in the most compact
    # possible manner; in this case, commits are repeated because branches that
    # follow one-another are logged separately
    [[ "$(log_outgoing_commits | head -n 1)" = *"12 outgoing"* ]] || false
  popd &> /dev/null


  # Test submodule-helper-relative-url
  # NOTE git_sync_submodules is tested above
  [ "$(submodule-helper-relative-url https://git-server.com/org/repo.git ../submod.git)" = "https://git-server.com/org/submod.git" ]
  [ "$(submodule-helper-relative-url /path/to/git/repo.git ../submod.git)" = "/path/to/git/submod.git" ]
  [ "$(submodule-helper-relative-url ../../git/repo.git ../submod.git)" = "../../git/submod.git" ]
  [ "$(submodule-helper-relative-url ../../git/repo.git ../../git/submod.git)" = "../../git/submod.git" ]

  [ "$(submodule-helper-relative-url https://git-server.com/org/repo.git ../submod.git ../)" = \
      "https://git-server.com/org/submod.git" ]
  [ "$(submodule-helper-relative-url /some/git/repo.git ../submod.git ../)" = "/some/git/submod.git" ]
  [ "$(submodule-helper-relative-url ../../git/repo.git ../submod.git ../)" = "../../../git/submod.git" ]
  [ "$(submodule-helper-relative-url ../../git/repo.git ../../git/submod.git ../)" = "../../../git/submod.git" ]

  [ "$(submodule-helper-relative-url https://git-server.com/org/repo.git ../submod.git ../../)" = \
      "https://git-server.com/org/submod.git" ]
  [ "$(submodule-helper-relative-url /some/git/repo.git ../submod.git ../../)" = "/some/git/submod.git" ]
  [ "$(submodule-helper-relative-url ../../git/repo.git ../submod.git ../../)" = \
      "../../../../git/submod.git" ]
  [ "$(submodule-helper-relative-url ../../git/repo.git ../../git/submod.git ../../)" = \
      "../../../../git/submod.git" ]
)
end_test

begin_test "Make remote pushable"
(
  setup_test

  ##################################
  #              SETUP             #
  ##################################

  BUILD_REPO="${TESTDIR}"/build_repo
  PRETEND_URL="${TESTDIR}/git/pretend_repo" # bare repo
  # Test if git supports difficult submodule paths
  if git_bug_submodule_path_with_special_characters; then
    DIFFICULT_PATH='diff  i cult'
  else
    DIFFICULT_PATH=$'diff  i \t cult'
  fi
  DIFFICULT_NAME='difficult submod'

  # Sub module
  mkdir -p "${BUILD_REPO}_sub"
  pushd "${BUILD_REPO}_sub" &> /dev/null
    git init .
    touch readme_sub
    git add readme_sub
    git commit -m "Initial commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_sub"
  pushd "${PRETEND_URL}_sub" &> /dev/null
    git clone --mirror "${BUILD_REPO}_sub" .
    # git init --bare .
    # cd "${BUILD_REPO}_sub"
    # git remote add origin "${PRETEND_URL}_sub"
    # git push origin --mirror
  popd &> /dev/null

  # Main repo
  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init .
    touch readme
    git add readme
    git commit -m "Initial commit"

    git submodule add --name "${DIFFICULT_NAME}" "${PRETEND_URL}_sub" "${DIFFICULT_PATH}"
    git submodule update --init --recursive
    git commit -m "Added submodules"

    git remote add origin http://git-server.org/company/arepo.git
    git remote add upstream https://git1-server.org/company/arepo1.git
    git remote set-url --add upstream https://git2-server.org/company/arepo1.git
    git remote add pushconfig https://git3-server.org/company/arepo1.git
    git remote set-url --push pushconfig git@git3-server.org:company/arepo1.git

    pushd "${DIFFICULT_PATH}" &> /dev/null
      git remote set-url origin https://git-server.org/company/asubmod.git
      git remote add sm_upstream https://git1-server.org/company/asubmod1.git
    popd &> /dev/null
  popd &> /dev/null

  #################################
  #              TEST             #
  #################################

  pushd "${BUILD_REPO}" &> /dev/null
    convert_git_remote_http_to_git origin
    [ "$(git config --get remote.origin.url)" = "http://git-server.org/company/arepo.git" ]
    [ "$(git config --get remote.origin.pushurl)" = "git@git-server.org:company/arepo.git" ]
    [ "$(git config --get remote.upstream.url)" = "https://git2-server.org/company/arepo1.git" ]
    not git config --get remote.upstream.pushurl
    convert_git_remote_http_to_git upstream
    [ "$(git config --get remote.upstream.url)" = "https://git2-server.org/company/arepo1.git" ]
    [ "$(git config --get remote.upstream.pushurl)" = "git@git2-server.org:company/arepo1.git" ]
    # do nothing if a pushurl is configured
    convert_git_remote_http_to_git pushconfig
    [ "$(git config --get remote.pushconfig.url)" = "https://git3-server.org/company/arepo1.git" ]
    [ "$(git config --get remote.pushconfig.pushurl)" = "git@git3-server.org:company/arepo1.git" ]

    pushd "${DIFFICULT_PATH}" &> /dev/null
      convert_git_remote_http_to_git origin
      [ "$(git config --get remote.origin.url)" = "https://git-server.org/company/asubmod.git" ]
      [ "$(git config --get remote.origin.pushurl)" = "git@git-server.org:company/asubmod.git" ]
      convert_git_remote_http_to_git sm_upstream
      [ "$(git config --get remote.sm_upstream.url)" = "https://git1-server.org/company/asubmod1.git" ]
      [ "$(git config --get remote.sm_upstream.pushurl)" = "git@git1-server.org:company/asubmod1.git" ]
    popd &> /dev/null

    # ensure the submodule's configured path is not changed
    [ "$(git config --get submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
  popd &> /dev/null
)
end_test
