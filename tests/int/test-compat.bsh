#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

function setup()
{
  # Easier way to take care of committers on vanilla install
  export GIT_COMMITTER_NAME='Foo Bar'
  export GIT_AUTHOR_NAME='Foo Bar'
  export GIT_COMMITTER_EMAIL='foo.bar@example.com'
  export GIT_AUTHOR_EMAIL='foo.bar@example.com'
}

begin_test "Test sed_flag_i"
(
  setup_test

  echo "foo" > "${TESTDIR}/file"
  sed "${sed_flags_i[@]}" -e 's|foo|bar|' "${TESTDIR}/file"
  [ "$(cat "${TESTDIR}/file")" = "bar" ]
  [ "$(ls "${TESTDIR}" | grep "file")" = "file" ]
)
end_test

command -v "${GIT-git}" &> /dev/null || skip_next_test
git_feature_support_tls && tls=0 || tls=$?
[ ${tls} -ge 2 ] && [ ${tls} -ne 125 ] || skip_next_test
begin_test "Test git_feature_support_tls"
(
  setup_test

  ${GIT-git} ls-remote -h https://github.com/visionsystemsinc/small_trinkets.git
)
end_test

function begin_submodule_path_test()
{
  if git_bug_submodule_path_with_special_characters; then
    begin_required_fail_test "${@}"
  else
    begin_test "${@}"
  fi
}

command -v "${GIT-git}" &> /dev/null || skip_next_test
begin_submodule_path_test "Test difficult git submodule path"
(
  setup_test

  GIT_TEST_REPO="${TESTDIR}/test"
  SUBMODULE_REPO="${TESTDIR}/difficult"
  SUBMODULE_URL="${TESTDIR}/git/difficult.git"
  DIFFICULT_PATH=$'diff  i \t cult'

  # Sub module
  mkdir -p "${SUBMODULE_REPO}"
  pushd "${SUBMODULE_REPO}" &> /dev/null
    git init .
    touch readme_sub
    git add readme_sub
    git commit -m "initial commit"
  popd &> /dev/null
  mkdir -p "${SUBMODULE_URL}"
  pushd "${SUBMODULE_URL}" &> /dev/null
    git clone --mirror "${SUBMODULE_REPO}" .
  popd &> /dev/null

  # Main Repo
  mkdir -p "${GIT_TEST_REPO}"
  pushd "${GIT_TEST_REPO}" &> /dev/null
    git init .
    git submodule add "${SUBMODULE_URL}" "${DIFFICULT_PATH}"
    git commit -m "add submodule"
  popd &> /dev/null

  # Test if git supports difficult submodule paths
  pushd "${GIT_TEST_REPO}" &> /dev/null
    output="$(git submodule foreach -q 'echo "${sm_path}"')"
    begin_fail_zone
    [ "${output}" = "${DIFFICULT_PATH}" ] # output="" when it fails
    end_fail_zone
  popd &> /dev/null
)
end_test

function begin_submodule_update_test()
{
  if git_feature_submodule_update_with_custom_command; then
    begin_test "${@}"
  else
    begin_required_fail_test "${@}"
  fi
}

command -v "${GIT-git}" &> /dev/null || skip_next_test
begin_submodule_update_test "Test git submodule update with custom command"
(
  setup_test

  BUILD_REPO="${TESTDIR}/build"
  SUBMODULE_REPO="${TESTDIR}/submod"
  SUBMODULE_URL="${TESTDIR}/git/submod.git"

  # Sub module
  mkdir -p "${SUBMODULE_REPO}"
  pushd "${SUBMODULE_REPO}" &> /dev/null
    git init .
    echo 1 > readme_sub
    git add readme_sub
    git commit -m "initial commit"
  popd &> /dev/null
  mkdir -p "${SUBMODULE_URL}"
  pushd "${SUBMODULE_URL}" &> /dev/null
    git clone --mirror "${SUBMODULE_REPO}" .
  popd &> /dev/null

  # Main Repo
  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init .
    git submodule add "${SUBMODULE_URL}"
    git commit -m "add submodule"
  popd &> /dev/null

  # Test if git supports custom commands in submodule.<name>.update
  pushd "${BUILD_REPO}" &> /dev/null
    pushd submod &> /dev/null
      git checkout master
      echo 2 >> readme_sub
      git add readme_sub
      git commit -m "second commit"
    popd &> /dev/null
    git -c "submodule.submod.update"='!echo custom_command' submodule update submod
    begin_fail_zone
    output="$(cd submod && git log -n1 --format="%s")"
    # "Ahead (1)" when it does not support a custom command
    [ "${output}" = "second commit" ]
    end_fail_zone
  popd &> /dev/null
)
end_test
