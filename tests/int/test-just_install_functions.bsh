#!/usr/bin/env bash

#**
# .. envvar:: VSI_FORCE_TEST_JUST_INSTALL_FUNCTIONS
#
# Force testing of functions in :file:`just_install_functions.bsh`.
#
#**

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/linux/common_source.sh"
source "${VSI_COMMON_DIR}/linux/versions.bsh"
source "${VSI_COMMON_DIR}/linux/requirements.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/just_install_functions.bsh"
source "${VSI_COMMON_DIR}/linux/string_tools.bsh"


# test cmake install
# alpine musl won't run the cmake executable
if [ "${VSI_OS}" = "linux" ] && [ "${VSI_MUSL}" = "1" ] && [ -z "${VSI_FORCE_TEST_JUST_INSTALL_FUNCTIONS+set}" ]; then
  skip_next_test
fi
begin_test "cmake-install"
(
  setup_test

  # environment
  export JUST_INSTALL_ACTIVATE_BASENAME="test_just_activate.bsh"

  # version info
  CMAKE_VER="3.18.2"
  CMAKE_VER_FULL=$'cmake version 3.18.2\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).'

  # install
  cmake-install \
      --dir "${TESTDIR}/cmake" \
      --version "${CMAKE_VER}"

  # output version
  [ "${cmake_version}" = "${CMAKE_VER}" ]

  # executable version
  RESULT="$("${cmake_exe}" --version)"
  [ "${RESULT}" = "${CMAKE_VER_FULL}" ]

  # activate version
  RESULT="$(source "${cmake_activate}"; "${CMAKE_EXE}" --version)"
  [ "${RESULT}" = "${CMAKE_VER_FULL}" ]

)
end_test


# helper function: print registry keys & subkeys to stdout, useful to compare
# registry values before & after an operation.  Take care to use the correct
# key names, as errors are ignored.
function registry_to_stdout()
{
  for key in ${@+"${@}"}
  do
    MSYS2_ARG_CONV_EXCL="*" reg query "${key}" /s 2>/dev/null || :
  done
}
function check_windows_has_short_paths()
{
  if [ "${OS-}" = "Windows_NT" ]; then
    if [ "$(MSYS2_ARG_CONV_EXCL="*" reg query 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Filesystem' /v LongPathsEnabled 2>/dev/null | sed -n 's| *LongPathsEnabled.* ||p')" = "0x1" ]; then
      return 1
    else
      return 0
    fi
  fi
}

# helper function: check if conda-based test should be skipped
function check_skip_conda_test()
{
  if [ "${VSI_OS}" = "linux" ] && [ -z "${VSI_FORCE_INSTALL_FUNCTIONS_TEST+set}" ]; then
    # alpine musl won't run the miniconda executable, nor will really old GLIBCs
    if [ "${VSI_MUSL}" = "1" ] || meet_requirements "$(glibc_version)" "<2.17"; then
      skip_next_test
    fi
  fi
  if [ -n "${TRASHDIR+set}" ] && [[ ! ${TRASHDIR} =~ ^${does_not_needs_quote_escape_regex}$ ]]; then
    # Conda is sad https://superuser.com/a/1495827/352118
    skip_next_test
  fi
}


# test conda-install with different options
CONDA_TEST_ID_ARRAY=(
    "miniconda"
    "miniforge"
    "miniconda latest"
    "miniforge latest"
)
CONDA_EXTRA_ARGS_ARRAY=(
    "--miniconda --version py312_24.3.0-0"
    "--version 24.1.2-0"
    "--miniconda --version latest"
    "--version latest"
)
CONDA_VER_FULL_ARRAY=(
    "conda 24.3.0"
    "conda 24.1.2"
    "conda [0-9]{2}(\.[0-9]+){2}"
    "conda [0-9]{2}(\.[0-9]+){2}"
)
CONDA_VER_SHORT_ARRAY=(
    "24.3.0"
    "24.1.2"
    "[0-9]{2}(\.[0-9]+){2}"
    "[0-9]{2}(\.[0-9]+){2}"
)

for i in "${!CONDA_EXTRA_ARGS_ARRAY[@]}"; do

  # test options
  CONDA_TEST_ID="${CONDA_TEST_ID_ARRAY[$i]}"
  CONDA_EXTRA_ARGS="${CONDA_EXTRA_ARGS_ARRAY[$i]}"
  CONDA_VER_FULL="${CONDA_VER_FULL_ARRAY[$i]}"
  CONDA_VER_SHORT="${CONDA_VER_SHORT_ARRAY[$i]}"

  # run test
  check_skip_conda_test
  begin_test "conda-install ${CONDA_TEST_ID}"
  (
    setup_test

    # environment
    export JUST_INSTALL_ACTIVATE_BASENAME="test_just_activate.bsh"

    # for windows, perform additional test if possible confirming no change to windows registry.
    # For example, when misconfigured conda may add an unwanted entry to <HKEY_CURRENT_USER\SOFTWARE\Python>
    if [ "${VSI_OS}" = "windows" ]; then

      # registry keys for comparison
      REGISTRY_KEYS=( "HKEY_CURRENT_USER\SOFTWARE\Python" )

      # before/after registry files
      REGISTRY_BEFORE="${TESTDIR}/before.reg"
      REGISTRY_AFTER="${TESTDIR}/after.reg"

      # registry comparison requires "reg" and "cmp" commands
      ENABLE_REGISTRY_TEST="$(command -v reg &> /dev/null && \
                              command -v cmp &> /dev/null && \
                              echo "1" )"
    fi

    # store registry
    if [ "${ENABLE_REGISTRY_TEST-}" = "1" ]; then
      registry_to_stdout "${REGISTRY_KEYS[@]}" > "${REGISTRY_BEFORE}"
    fi

    # install
    if check_windows_has_short_paths; then
      # This is short on appveyor: c:\msys64\tmp\conda.12345
      conda-install --dir "/tmp/conda.$$" ${CONDA_EXTRA_ARGS}
    else
      conda-install --dir "${TESTDIR}/conda" ${CONDA_EXTRA_ARGS}
    fi

    if [[ ${CONDA_EXTRA_ARGS} = *latest* ]]; then
      [[ ${conda_version} =~ ${CONDA_VER_SHORT} ]] || false

      RESULT="$("${conda_exe}" --version || :)"
      [ "${RESULT}" = "" ] || [[ ${RESULT} =~ ${CONDA_VER_FULL} ]] || false

      RESULT="$(source "${conda_activate}"; conda --version)"
      [[ ${RESULT} =~ ${CONDA_VER_FULL} ]] || false
    else
      # output version
      [ "${conda_version}" = "${CONDA_VER_SHORT}" ]

      # This catches some rare scenario when the conda exe without the executable
      # didn't report the right version. However, if the shebang is longer than 127
      # characters, then conda will not start without the right python interpreter
      # So a blank RESULT represent this case, and should be ignored
      # executable version
      RESULT="$("${conda_exe}" --version || :)"
      [ "${RESULT}" = "" ] || [ "${RESULT}" = "${CONDA_VER_FULL}" ]

      # activate version
      RESULT="$(source "${conda_activate}"; conda --version)"
      [ "${RESULT}" = "${CONDA_VER_FULL}" ]
    fi

    # registry test
    if [ "${ENABLE_REGISTRY_TEST-}" = "1" ]; then
      registry_to_stdout "${REGISTRY_KEYS[@]}" > "${REGISTRY_AFTER}"

      # echo to stderr for debugging
      { echo "Registry comparison of [${REGISTRY_KEYS[@]}]" ;
        echo "Initial state:" ;
        cat "${REGISTRY_BEFORE}" ;
        echo "Final state:" ;
        cat "${REGISTRY_AFTER}" ;
        echo ; } >&2

      # compare
      cmp "${REGISTRY_BEFORE}" "${REGISTRY_AFTER}"
    fi

    if check_windows_has_short_paths; then
      rm -r "/tmp/conda.$$"
    fi
  )
  end_test

done # test conda-install


# test conda-python-install & pipenv-install: test in sequence according to typical usage - install python then pipenv
check_skip_conda_test
begin_test "conda-python-install and pipenv-install"
(
  setup_test

  # environment
  export JUST_INSTALL_ACTIVATE_BASENAME="test_just_activate.bsh"

  # for windows, perform additional test if possible confirming no change to windows registry.
  # For example, when misconfigured conda may add an unwanted entry to <HKEY_CURRENT_USER\SOFTWARE\Python>
  if [ "${VSI_OS}" = "windows" ]; then

    # registry keys for comparison
    REGISTRY_KEYS=( "HKEY_CURRENT_USER\SOFTWARE\Python" )

    # before/after registry files
    REGISTRY_BEFORE="${TESTDIR}/before.reg"
    REGISTRY_AFTER="${TESTDIR}/after.reg"

    # registry comparison requires "reg" and "cmp" commands
    ENABLE_REGISTRY_TEST="$( command -v reg &> /dev/null && \
                             command -v cmp &> /dev/null && \
                             echo "1" )"
  fi

  # store registry
  if [ "${ENABLE_REGISTRY_TEST-}" = "1" ]; then
    registry_to_stdout "${REGISTRY_KEYS[@]}" > "${REGISTRY_BEFORE}"
  fi

  # --python--

  # version info
  VIRTUALENV_VERSION=20.26.1
  PYTHON_VER="3.12.3"
  PYTHON_VER_FULL="Python ${PYTHON_VER}"

  begin_fail_zone
    # install
    if check_windows_has_short_paths; then
      conda-python-install \
          --dir "/tmp/python.$$" \
          --version "${PYTHON_VER}" \
          --download
    else
      conda-python-install \
          --dir "${TESTDIR}/python" \
          --version "${PYTHON_VER}" \
          --download
    fi
  end_fail_zone

  # output version
  [ "${python_version}" = "${PYTHON_VER}" ]

  # executable version
  RESULT="$("${python_exe}" --version 2>&1)"
  [ "${RESULT}" = "${PYTHON_VER_FULL}" ]

  # activate version
  RESULT="$(source "${python_activate}"; "${PYTHON_EXE}" --version 2>&1)"
  [ "${RESULT}" = "${PYTHON_VER_FULL}" ]

  # registry test
  if [ "${ENABLE_REGISTRY_TEST-}" = "1" ]; then
    registry_to_stdout "${REGISTRY_KEYS[@]}" > "${REGISTRY_AFTER}"

    # echo to stderr for debugging
    { echo "Registry comparison of [${REGISTRY_KEYS[@]}]" ;
      echo "Initial state:" ;
      cat "${REGISTRY_BEFORE}" ;
      echo "Final state:" ;
      cat "${REGISTRY_AFTER}" ;
      echo ; } >&2

    # compare
    cmp "${REGISTRY_BEFORE}" "${REGISTRY_AFTER}"
  fi

  # --pipenv--

  # version info
  PIPENV_VER="2023.10.3"
  PIPENV_VER_FULL="pipenv, version ${PIPENV_VER}"

  # install
  pipenv-install \
      --dir "${TESTDIR}/pipenv" \
      --version "${PIPENV_VER}" \
      --python "${python_exe}" \
      --python-activate "${python_activate}"

  # validate outputs
  [ "${pipenv_version}" = "${PIPENV_VER}" ]

  # executable version
  RESULT="$("${pipenv_exe}" --version | sed 's|$\r||g')"
  [ "${RESULT}" = "${PIPENV_VER_FULL}" ]

  # activate version
  RESULT="$(source "${pipenv_activate}"; "${PIPENV_EXE}" --version | sed 's|$\r||g')"
  [ "${RESULT}" = "${PIPENV_VER_FULL}" ]

  if check_windows_has_short_paths; then
    rm -r "/tmp/python.$$"
  fi

)
end_test
