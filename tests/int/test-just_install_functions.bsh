#!/usr/bin/env bash

#**
# .. envvar:: VSI_FORCE_TEST_JUST_INSTALL_FUNCTIONS
#
# Force testing of functions in :file:`just_install_functions.bsh`.
#
#**

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/linux/common_source.sh"
source "${VSI_COMMON_DIR}/linux/just_files/just_install_functions.bsh"


# test cmake install
# alpine musl won't run the cmake executable
[ "${VSI_OS}" = "linux" ] && [ "${VSI_MUSL}" = "1" ] && [ -z "${VSI_FORCE_TEST_JUST_INSTALL_FUNCTIONS+set}" ] && skip_next_test
begin_test "cmake-install"
(
  setup_test

  # environment
  export TMPDIR="${TESTDIR}" # redirect mktemp commands to $TESTDIR
  export JUST_INSTALL_ACTIVATE_BASENAME="test_just_activate.bsh"

  # version info
  CMAKE_VER="3.18.2"
  CMAKE_VER_FULL=$'cmake version 3.18.2\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).'

  # install
  cmake-install \
      --dir "${TESTDIR}" \
      --version "${CMAKE_VER}"

  # output version
  [ "${cmake_version}" = "${CMAKE_VER}" ]

  # executable version
  RESULT="$("${cmake_exe}" --version)"
  [ "$RESULT" = "${CMAKE_VER_FULL}" ]

  # activate version
  RESULT="$(source "${cmake_activate}"; "${CMAKE_EXE}" --version)"
  [ "$RESULT" = "${CMAKE_VER_FULL}" ]

)
end_test


# test conda-python-install & pipenv-install: test in sequence according to typical usage - install python then pipenv
# alpine musl won't run the miniconda executable
[ "${VSI_OS}" = "linux" ] && [ "${VSI_MUSL}" = "1" ] && [ -z "${VSI_FORCE_INSTALL_FUNCTIONS_TEST+set}" ] && skip_next_test
begin_test "conda-python-install and pipenv-install"
(
  setup_test

  # environment
  export TMPDIR="${TESTDIR}" # redirect mktemp commands to $TESTDIR
  export JUST_INSTALL_ACTIVATE_BASENAME="test_just_activate.bsh"

  # --python--

  # version info
  PYTHON_VER="3.7.9"
  PYTHON_VER_FULL="Python ${PYTHON_VER}"

  # install
  conda-python-install \
      --dir "${TESTDIR}" \
      --version "${PYTHON_VER}" \
      --download

  # output version
  [ "${python_version}" = "${PYTHON_VER}" ]

  # executable version
  RESULT="$("${python_exe}" --version 2>&1)"
  [ "$RESULT" = "${PYTHON_VER_FULL}" ]

  # activate version
  RESULT="$(source "${python_activate}"; "${PYTHON_EXE}" --version 2>&1)"
  [ "$RESULT" = "${PYTHON_VER_FULL}" ]

  # --pipenv--

  # activate python environment
  source "${python_activate}"

  # version info
  PIPENV_VER="2020.6.2"
  PIPENV_VER_FULL="pipenv, version ${PIPENV_VER}"

  # install
  pipenv-install \
      --dir "${TESTDIR}" \
      --version "${PIPENV_VER}" \
      --python "${python_exe}"

  # validate outputs
  [ "${pipenv_version}" = "${PIPENV_VER}" ]

  # executable version
  RESULT="$("${pipenv_exe}" --version | sed 's|$\r||g')"
  [ "$RESULT" = "${PIPENV_VER_FULL}" ]

  # activate version
  RESULT="$(source "${pipenv_activate}"; "${PIPENV_EXE}" --version | sed 's|$\r||g')"
  [ "$RESULT" = "${PIPENV_VER_FULL}" ]

)
end_test
