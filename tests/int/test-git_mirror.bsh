#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/linux/web_tools.bsh"
command -v "${GIT-git}" &> /dev/null && source "${VSI_COMMON_DIR}/linux/git_mirror"
source "${VSI_COMMON_DIR}/linux/requirements.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

# These tests chain together, so no point in continuing after one breaks
TESTLIB_STOP_AFTER_FAILS=1
unset TESTLIB_SKIP_TESTS TESTLIB_RUN_SINGLE_TEST

if ! command -v unzip &> /dev/null || \
   ! command -v "${GIT-git}" &> /dev/null || ! git lfs &> /dev/null; then
  TESTLIB_SKIP_TESTS='.*'
fi

function setup()
{
  # Easier way to take care of committers on vanilla install
  export GIT_COMMITTER_NAME='Foo Bar'
  export GIT_AUTHOR_NAME='Foo Bar'
  export GIT_COMMITTER_EMAIL='foo.bar@example.com'
  export GIT_AUTHOR_EMAIL='foo.bar@example.com'

  BUILD_REPO="${TRASHDIR}/build_repo"
  PRETEND_URL="${TRASHDIR}/pretend_repo" # bare repo

  # Test if git supports difficult submodule paths
  if git_bug_submodule_path_with_special_characters; then
    DIFFICULT_NAME='diff  i cult'
  else
    DIFFICULT_NAME=$'diff  i \t cult'
  fi

  TRANSFER_DIR="${TRASHDIR}/transfer"
  MIRROR_DIR="${TRASHDIR}/mirror"
  CLONE_DIR="${TRASHDIR}/clone"


  # Create the repository mapping
  mkdir -p "${TRANSFER_DIR}"
  if [ "${BASH_VERSINFO[0]}" -ge 4 ]; then
    cat - << EOF > "${TRANSFER_DIR}/info.env"
repos[.]="${MIRROR_DIR}/main"
repos[lfs]="${MIRROR_DIR}/lfs"
repos['${DIFFICULT_NAME}']="${MIRROR_DIR}"/'${DIFFICULT_NAME}'
repos['${DIFFICULT_NAME}/a_sub_sub_module']="${MIRROR_DIR}/recipes"
EOF
  else
    cat - << EOF > "${TRANSFER_DIR}/info.env"
repo_paths=('.' lfs '${DIFFICULT_NAME}' '${DIFFICULT_NAME}/a_sub_sub_module')
repo_urls=("${MIRROR_DIR}/main"
           "${MIRROR_DIR}/lfs"
           "${MIRROR_DIR}"/'${DIFFICULT_NAME}'
           "${MIRROR_DIR}/recipes")
EOF
  fi


  # Create a directory based faux-git lfs server
  local os
  if [ "${OS-}" = "Windows_NT" ]; then
    os=windows-amd64
  elif [[ ${OSTYPE} = darwin* ]]; then
    os=darwin-amd64
  else
    os=linux-amd64
  fi

  pushd "${TRASHDIR}" &> /dev/null
    download_to_stdout "https://github.com/sinbad/lfs-folderstore/releases/download/v1.0.0/lfs-folderstore-${os}-v1.0.0.zip" > "lfs.zip"
    unzip lfs.zip &> /dev/null
    chmod 755 lfs-folderstore-${os}/lfs-folderstore
  popd &> /dev/null

  echo '#!/usr/bin/env bash
git -c lfs.customtransfer.lfs-folder.path="'"${TRASHDIR}/lfs-folderstore-${os}/lfs-folderstore"'" \
    -c lfs.customtransfer.lfs-folder.args="${LFS_DIR}" \
    -c lfs.standalonetransferagent=lfs-folder \
    ${@+"${@}"}' > "${TRASHDIR}/git2"
  # Use git2 when a command may deal with a git lfs file
  chmod 755 "${TRASHDIR}/git2"

  # The lfs-folderstore will not work unless the dir exists :(
  mkdir -p "${MIRROR_DIR}/lfs/lfs/objects"


  # Simple directory structure to test the creation of the tar archive
  ARCHIVE_DIR="${TRASHDIR}/archive"
  mkdir -p "${ARCHIVE_DIR}"
  pushd "${ARCHIVE_DIR}" &> /dev/null
    mkdir subdir
    touch readme archive.tgz subdir/archive.tgz subdir/readme1
  popd &> /dev/null
}

begin_test "Part 1 - Setup test repo"
(
  setup_test

  # NOTE should test that a stash is not pushed to the mirror
  # RE usually, a bare repo should not have ref/stash (although one created with
  # git clone --mirror can)

  # Sub sub module
  mkdir -p "${BUILD_REPO}_sub_sub"
  pushd "${BUILD_REPO}_sub_sub" &> /dev/null
    git init .
    touch readme_sub_sub
    git add readme_sub_sub
    git commit -m "Initial commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_sub_sub"
  pushd "${PRETEND_URL}_sub_sub" &> /dev/null
    # This only works right because all branches appear to be "topic" branches,
    # so a push --mirror (once) will do what I want. Doesn't work well with more
    # complexities like lfs
    git clone --mirror "${BUILD_REPO}_sub_sub" .
    # git init --bare .
    # cd "${BUILD_REPO}_sub_sub"
    # git remote add origin "${PRETEND_URL}_sub_sub"
    # git push origin --mirror
  popd &> /dev/null

  # Sub module
  mkdir -p "${BUILD_REPO}_sub"
  pushd "${BUILD_REPO}_sub" &> /dev/null
    git init .
    touch readme_sub
    git add readme_sub
    git submodule add "${PRETEND_URL}_sub_sub" "a_sub_sub_module"
    git commit -m "Initial commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_sub"
  pushd "${PRETEND_URL}_sub" &> /dev/null
    git clone --mirror "${BUILD_REPO}_sub" .
    # git init --bare .
    # cd "${BUILD_REPO}_sub"
    # git remote add origin "${PRETEND_URL}_sub"
    # git push origin --mirror
  popd &> /dev/null

  # LFS Repo
  mkdir -p "${BUILD_REPO}_lfs"
  pushd "${BUILD_REPO}_lfs" &> /dev/null
    git init .
    git lfs track '*.bin'
    echo hi > readme1.bin
    git add readme1.bin .gitattributes
    git commit -m "Initial commit"

    echo bye > readme1.bin
    git add readme1.bin
    git commit -m "Another commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_lfs"
  pushd "${PRETEND_URL}_lfs" &> /dev/null
    git clone --mirror "${BUILD_REPO}_lfs" .
    # https://github.com/git-lfs/git-lfs/issues/1338#issuecomment-229736496
    LFS_DIR="${BUILD_REPO}_lfs/.git/lfs/objects" "${TRASHDIR}/git2" lfs fetch --all
    # git init --bare .
    # cd "${BUILD_REPO}_lfs"
    # git remote add origin "${PRETEND_URL}_lfs"
    # LFS_DIR="${PRETEND_URL}_lfs/lfs/lfs/objects" "${TRASHDIR}/git2" push origin --mirror
  popd &> /dev/null

  # Main Repo

  # sm_path (sm_name, if different)         URL                        mirrored to
  # ./                                      "${PRETEND_URL}"          "${MIRROR_DIR}/main"
  # ./lfs ("lfs files")                     "${PRETEND_URL}_lfs"      "${MIRROR_DIR}/lfs"
  # ./"${DIFFICULT_NAME}"                   "${PRETEND_URL}_sub"      "${MIRROR_DIR}/${DIFFICULT_NAME}"
  # ./"${DIFFICULT_NAME}/a_sub_sub_module"  "${PRETEND_URL}_sub_sub"  "${MIRROR_DIR}/recipes"
  #
  # NOTE each repo is created in a respective ${BUILD_REPO}"_* repo and mirror
  # pushed to "${PRETEND_URL}"_*

  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init
    touch readme
    git add readme
    git commit -m "Initial commit"
    git tag "original_commit"

    # LFS_DIR="${PRETEND_URL}_lfs/lfs/objects" "${TRASHDIR}/git2" submodule add "${PRETEND_URL}_lfs" "lfs"
    GIT_LFS_SKIP_SMUDGE=1 git submodule add --name "lfs files" "${PRETEND_URL}_lfs" "lfs"
    git submodule add "${PRETEND_URL}_sub" "${DIFFICULT_NAME}"
    # Git itself can't handle newlines, although the config file actually can
    # escape them. This is a PURE git bug, plain and simple.
    # This won't actually create a newline in the name, it just ignores it
    # git submodule add https://github.com/visionsystemsinc/vsi_common $'  foo\tar\n'
    # This will.
    # git mv $'  diff  i \t cult' $' \n diff  i \t cult'
    # However, at random this gives permission denied errors, good thing I don't need it...

    git commit -m "Added submodules"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}"
  pushd "${PRETEND_URL}" &> /dev/null
    git clone --mirror "${BUILD_REPO}" .
    # git init --bare .
    # cd "${BUILD_REPO}"
    # git remote add origin "${PRETEND_URL}"
    # git push origin --mirror
  popd &> /dev/null

  # read -p "Press any key to continue" >&${stdout-1}
)
end_test

begin_test "Part 2 - Initial mirror"
(
  setup_test

  pushd "${TRASHDIR}" &> /dev/null
    LFS_DIR="${PRETEND_URL}_lfs/lfs/objects" GIT="${TRASHDIR}/git2" git_mirror_main "${PRETEND_URL}"
  popd &> /dev/null
)
end_test

begin_test "Part 3 - Simulating transfer"
(
  setup_test

  PREP_FILE=("${PRETEND_URL}_prep"/transfer_*.tgz)

  pushd "${TRANSFER_DIR}" &> /dev/null
    tar zxf "${PREP_FILE[0]}"
  popd &> /dev/null
)
end_test

begin_test "Part 4 - Pushing to mirror"
(
  setup_test

  for d in main lfs "${DIFFICULT_NAME}" recipes; do
    mkdir -p "${MIRROR_DIR}/${d}"
    pushd "${MIRROR_DIR}/${d}" &> /dev/null
      git init --bare
    popd &> /dev/null
  done

  LFS_DIR="${MIRROR_DIR}/lfs/lfs/objects" GIT="${TRASHDIR}/git2" git_push_main "${TRANSFER_DIR}/info.env" "${TRANSFER_DIR}"
)
end_test

begin_test "Part 5 - Cloning from mirror"
(
  setup_test

  # REVIEW add to compat.bsh or maybe file_tools.bsh
  if [[ ${OSTYPE} = darwin* ]]; then
    function sha256sum()
    {
      shasum -a 256 ${@+"${@}"}
    }
  fi

  LFS_DIR="${MIRROR_DIR}/lfs/lfs/objects" GIT="${TRASHDIR}/git2" git_clone_main "${TRANSFER_DIR}/info.env" "${CLONE_DIR}"

  # Tests
  [ -f "${CLONE_DIR}/readme" ]
  # git 1.8.3 does not support git -C
  pushd "${CLONE_DIR}" &> /dev/null
    git show-ref --verify --quiet refs/tags/original_commit
  popd &> /dev/null
  [ -f "${CLONE_DIR}/${DIFFICULT_NAME}/readme_sub" ]
  [ -f "${CLONE_DIR}/${DIFFICULT_NAME}/a_sub_sub_module/readme_sub_sub" ]
  [ $(sha256sum ${CLONE_DIR}/lfs/readme1.bin | awk '{print $1}') = abc6fd595fc079d3114d4b71a4d84b1d1d0f79df1e70f8813212f2a65d8916df ]
  # This file shouldn't exist yet
  [ ! -e "${CLONE_DIR}/.git/modules/lfs files/lfs/objects/98/ea/98ea6e4f216f2fb4b69fff9b3a44842c38686ca685f3f55dc48c5d3fb1107be4" ]
  cd "${CLONE_DIR}/lfs"
  LFS_DIR="${MIRROR_DIR}/lfs/lfs/objects" "${TRASHDIR}/git2" lfs fetch --all
  [ -e "${CLONE_DIR}/.git/modules/lfs files/lfs/objects/98/ea/98ea6e4f216f2fb4b69fff9b3a44842c38686ca685f3f55dc48c5d3fb1107be4" ]
)
end_test

begin_test "Part 6 - Update a repo and the prepped mirror"
(
  setup_test

  # Add a file to the main repo
  pushd "${BUILD_REPO}" &> /dev/null
    touch newfile
    git add newfile
    git commit -m "add a file"

    # Add a file to a submodule and update the main repo
    pushd "${DIFFICULT_NAME}" &> /dev/null
      touch newfile_sub
      git add newfile_sub
      git commit -m "add a new file"
      git push origin master
    popd &> /dev/null
    git add "${DIFFICULT_NAME}"
    git commit -m "update submodule"
    git push "${PRETEND_URL}" master

    # Add a commit to a submodule that is not tracked by the main repo
    pushd "${DIFFICULT_NAME}" &> /dev/null
      echo "1" >> newfile_sub
      git add newfile_sub
      git commit -m "update file"
      git push origin master
    popd &> /dev/null

    # Add a branch to the main repo
    current_branch="$(git rev-parse --abbrev-ref HEAD)"
    git checkout -b a_branch
    touch branchfile
    git add branchfile
    git commit -m "add a file on a branch"
    git push "${PRETEND_URL}" a_branch
    git checkout "${current_branch}"
  popd &> /dev/null

  # Add a branch to the air-gapped main repo
  pushd "${CLONE_DIR}" &> /dev/null
    current_branch="$(git rev-parse --abbrev-ref HEAD)"
    git checkout -b airgap_branch
    touch branch_file
    git add branch_file
    git commit -m "add a new file on this branch"
    git push origin airgap_branch
    git checkout "${current_branch}"
  popd &> /dev/null

  # Update the prepped mirror
  pushd "${TRASHDIR}" &> /dev/null
    LFS_DIR="${PRETEND_URL}_lfs/lfs/objects" GIT="${TRASHDIR}/git2" git_mirror_main "${PRETEND_URL}"
  popd &> /dev/null

  # Select the incremental backup if it exists (should be at most one)
  PREP_FILE="$(shopt -s nullglob; echo "${PRETEND_URL}_prep"/transfer_*_transfer_*.tgz)"
  if [ -z "${PREP_FILE:+set}" ]; then
    # List with 'ls -rt' because the archives are only datetime stamped out to
    # seconds, so its not inconceivable two archives could be created within a
    # single second
    PREP_FILE="$(ls -rt "${PRETEND_URL}_prep"/transfer_*.tgz | tail -n1)"
  fi

  # Simulate the transfer
  pushd "${TRANSFER_DIR}" &> /dev/null
    tar zxf "${PREP_FILE}"
  popd &> /dev/null

  # Push to mirror
  LFS_DIR="${MIRROR_DIR}/lfs/lfs/objects" GIT="${TRASHDIR}/git2" git_push_main "${TRANSFER_DIR}/info.env" "${TRANSFER_DIR}"

  # Pull changes
  pushd "${CLONE_DIR}" &> /dev/null
    git pull
    git submodule update --init --recursive
  popd &> /dev/null

  # Tests
  [ -f "${CLONE_DIR}/newfile" ]
  [ -f "${CLONE_DIR}/${DIFFICULT_NAME}/newfile_sub" ]
  output="$(cat "${CLONE_DIR}/${DIFFICULT_NAME}/newfile_sub")"
  [ "${output}" = "" ]
  # git 1.8.3 does not support git -C
  pushd "${MIRROR_DIR}"/main &> /dev/null
    git show-ref --verify --quiet refs/heads/airgap_branch
    git show-ref --verify --quiet refs/heads/a_branch
  popd &> /dev/null
  pushd "${MIRROR_DIR}/${DIFFICULT_NAME}" &> /dev/null
    [ "$(git log -n1 --format="%s")" = "update file" ]
    # alternatively
    #[ "$(git show HEAD | git patch-id | awk '{print $1}')" = "bd6ba42dfd6bb1cacf02ec71f97292f25b58d0da" ]
  popd &> /dev/null


  # Verify that if nothing changed, the next incremental mirror (if it exists)
  # doesn't include any (all) of the git objects (there was a problem where
  # these were always being included)

  # Select the incremental backup if it exists (should be at most one)
  PREP_FILE="$(shopt -s nullglob; echo "${PRETEND_URL}_prep"/transfer_*_transfer_*.tgz)"
  if [ -n "${PREP_FILE:+set}" ]; then
    pushd "${TRASHDIR}" &> /dev/null
      LFS_DIR="${PRETEND_URL}_lfs/lfs/objects" GIT="${TRASHDIR}/git2" git_mirror_main "${PRETEND_URL}"
      last_incremental_tar_file="$(LC_ALL=C ls "${PRETEND_URL}_prep"/transfer_*_transfer_*.tgz 2>/dev/null | \
          tail -n1)"
      # There should not be any files under git's objects directory; these look
      # like objects/12/SHA
      ! tar tf "${last_incremental_tar_file}" | grep -e "/objects/../.\+[^/]$"
    popd &> /dev/null
  fi
)
end_test

function begin_archive_test()
{
  tar_version_info # Sets tar_version and tar_vendor
  if [ "${tar_vendor}" = "GNU" ] || \
     [ "${tar_vendor}" = "BUSYBOX" ] || \
    ([ "${tar_vendor}" = "BSD" ] && meet_requirements "${tar_version}" "<3"); then
    ans=$'./\n./readme\n./subdir/\n./subdir/archive.tgz\n./subdir/readme1'
    if [ "${tar_vendor}" = "BSD" ]; then
      begin_required_fail_test "${@}"
    else
      begin_test "${@}"
    fi
  else # BSD >3
    # It is unfortunate, but I can't figure out a way for these paths to match
    ans=$'readme\nsubdir/\nsubdir/archive.tgz\nsubdir/readme1'
    begin_test "${@}"
  fi
}

# Verify archive_mirrors only excludes .tgz files in the root directory
#
# NOTE This test is required to fail on older versions of BSD tar, like 2.8.3,
# that don't support the --strip-components flag on extraction. This is ok in
# this case because our archives should be datetime stamped and the
# subdirectories are all git mirrors, so the chance of a name collision is
# highly unlikely
begin_archive_test "Archive"
(
  setup_test

  archive_mirrors "${ARCHIVE_DIR}"

  PREP_FILE=("${ARCHIVE_DIR}/"transfer_*.tgz)
  [ "${#PREP_FILE[@]}" -eq 1 ]

  # Ensure all "${ARCHIVE_DIR}"/*.tgz files are excluded but any .tgz files
  # in subdirectories are not
  begin_fail_zone
  [ "$(tar ztf "${PREP_FILE[0]}" | sort)" = "${ans}" ]
  end_fail_zone

  # Test incremental archive (if possible)
  if [ -f "${PREP_FILE[0]%.tgz}.snar" ]; then
    touch "${ARCHIVE_DIR}"/newfile

    # The archives are only datetime stamped out to seconds
    # Rename file to just some point in the past
    ORIG_PREP_FILE=("${PREP_FILE[@]}")
    PREP_FILE=("$(dirname ${PREP_FILE[0]})/transfer_2020_09_23_20_40_58.tgz")
    mv "${ORIG_PREP_FILE[0]}" "${PREP_FILE[0]}"
    mv "${ORIG_PREP_FILE[0]%.tgz}.snar" "${PREP_FILE[0]%.tgz}.snar"

    archive_mirrors "${ARCHIVE_DIR}"

    INCREMENTAL_PREP_FILE="$(shopt -s nullglob; echo "${ARCHIVE_DIR}"/transfer_*_transfer_*.tgz)"
    ans=$'./\n./subdir/\n./newfile' # BSD tar does not appear to support incremental backups
    [ "$(tar ztf "${INCREMENTAL_PREP_FILE}")" = "${ans}" ]


    # Test deleting the last (incremental) backup and re-generating it
    # Must delete the full and incremental archives and the snar files
    last_snar_file="$(ls "${ARCHIVE_DIR}"/transfer_*.snar 2>/dev/null | tail -n1)"
    rm "${last_snar_file}" "${last_snar_file%.snar}.tgz" \
        "${INCREMENTAL_PREP_FILE}" "${PREP_FILE[0]%.tgz}.l1.snar"

    archive_mirrors "${ARCHIVE_DIR}"

    INCREMENTAL_PREP_FILE="$(shopt -s nullglob; echo "${ARCHIVE_DIR}"/transfer_*_transfer_*.tgz)"
    ans=$'./\n./subdir/\n./newfile' # BSD tar does not appear to support incremental backups
    [ "$(tar ztf "${INCREMENTAL_PREP_FILE}")" = "${ans}" ]
  fi
)
end_test
