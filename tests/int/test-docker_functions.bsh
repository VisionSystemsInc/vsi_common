#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/docker_functions.bsh"
source "${VSI_COMMON_DIR}/linux/aliases.bsh"
: ${DRYRUN=} # The only thing I need from just_functions

setup()
{
  compose_file_hay="version: '3.2'
services:
  test_hay:
    image: alpine
    command: sh -c 'echo horse'
    network_mode: 'bridge'"

  compose_file_sleep="version: '3.2'
services:
  test_sleepy:
    image: alpine
    command: sleep 100"

  track_touched_files

  temp_image="$(mktemp -u test_XXXXXXXXXXXXXXXX | tr '[:upper:]' '[:lower:]')"
}

if ! command -v "${DOCKER}" &> /dev/null; then
  skip_next_test
fi
begin_test "container get label"
(
  setup_test

  "${DOCKER}" rm "${temp_image}" || :
  "${DOCKER}" create -l t1=15 -l "TEST=THIS=t h  a   t" -l blank --name "${temp_image}" alpine

  [ "$(container_get_label "${temp_image}" t1)" = "15" ]
  [ "$(container_get_label "${temp_image}" TEST)" = "THIS=t h  a   t" ]
  [ "$(container_get_label "${temp_image}" blank)" = "" ]
  [ "$(container_get_label "${temp_image}" none)" = "" ]

  "${DOCKER}" rm "${temp_image}"
)
end_test

if ! (command -v "${DOCKER}" &> /dev/null && command -v jq &> /dev/null); then
  skip_next_test
fi
begin_test "container has label"
(
  setup_test

  "${DOCKER}" rm ${temp_image} || :
  "${DOCKER}" create -l t1=15 -l "TEST=THIS=t h  a   t" -l blank --name ${temp_image} alpine

  container_has_label ${temp_image} t1
  container_has_label ${temp_image} TEST
  container_has_label ${temp_image} blank
  not container_has_label ${temp_image} none

  "${DOCKER}" rm ${temp_image}
)
end_test

if ! command -v "${DOCKER}" &> /dev/null; then
  skip_next_test
fi
begin_test "Just docker compose"
(
  setup_test

  JUST_PROJECT_PREFIX=TEST

  # Show calling from a different dir works
  cd "${TRASHDIR}"
  touch "${TESTDIR}/Dockerfile"
  echo "${compose_file_hay}" > "${TESTDIR}/Dockerfile"

  # I don't know why the -T is needed for this in Windows, but something between
  [ "$(Just-docker-compose -f "${TESTDIR}/Dockerfile" run -T test_hay)" = "horse" ]
)
end_test

if ! (command -v "${DOCKER}" &> /dev/null && command -v "${DOCKER_COMPOSE}" &> /dev/null); then
  skip_next_test
fi
begin_test "Docker service running"
(
  setup_test

  echo "${compose_file_sleep}" > "${TESTDIR}/dsr.yml"

  "${DOCKER_COMPOSE}" -f "${TESTDIR}/dsr.yml" rm -s -f
  "${DOCKER_COMPOSE}" -f "${TESTDIR}/dsr.yml" up -d test_sleepy
  [ "$(COMPOSE_FILE="${TESTDIR}/dsr.yml" docker_service_running test_sleepy)" = "running" ]
  [ "$(COMPOSE_FILE="${TESTDIR}/dsr.yml" docker_service_running test_sleepy2)" = "" ]
  "${DOCKER_COMPOSE}" -f "${TESTDIR}/dsr.yml" kill test_sleepy
  [ "$(COMPOSE_FILE="${TESTDIR}/dsr.yml" docker_service_running test_sleepy)" = "exited" ]

  # Clean up
  "${DOCKER_COMPOSE}" -f "${TESTDIR}/dsr.yml" rm -s -f
)
end_test

if ! command -v "${DOCKER_COMPOSE}" &> /dev/null; then
  skip_next_test
fi
begin_test "Just docker compose with internal volumes"
(
  setup_test

  JUST_PROJECT_PREFIX=TEST

  ans="version: '3.2'
services:
  test_hay:
    environment:"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="
      - JUST_HOST_WINDOWS=1"
  fi
  ans+="
      - JUST_DOCKER_ENTRYPOINT_INTERNAL_VOLUMES=/int///lint"

  echo "${compose_file_hay}" > "${TESTDIR}/dc.yml"
  echo "    volumes:" >> "${TESTDIR}/dc.yml"
  echo "    - int:/int" >> "${TESTDIR}/dc.yml"
  echo "    - .:/src" >> "${TESTDIR}/dc.yml"
  echo "    - lint:/lint" >> "${TESTDIR}/dc.yml"
  echo "volumes:" >> "${TESTDIR}/dc.yml"
  echo "  lint:" >> "${TESTDIR}/dc.yml"
  echo "  int:" >> "${TESTDIR}/dc.yml"
  DRYRUN=echo

  override_file="$(Just-docker-compose -f "${TESTDIR}/dc.yml" run test_hay|tail -n1)"
  override_file="${override_file#rm *}"
  ttouch "${override_file}"
  [ "$(cat "${override_file}")" = "${ans}" ]
)
end_test

teardown()
(
  # Docker cleanup
  "${DOCKER}" rm ${temp_image} &> /dev/null || :

  # teardown should always return true on success
)
