#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/aliases.bsh"
command -v "${GIT}" &> /dev/null && source "${VSI_COMMON_DIR}/linux/just_files/just_git_functions.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"


if ! command -v "${GIT}" &> /dev/null; then
  TESTLIB_SKIP_TESTS='.*'
fi

function setup()
{
  # Easier way to take care of committers on vanilla install
  export GIT_COMMITTER_NAME='Foo Bar'
  export GIT_AUTHOR_NAME='Foo Bar'
  export GIT_COMMITTER_EMAIL='foo.bar@example.com'
  export GIT_AUTHOR_EMAIL='foo.bar@example.com'
}

begin_test "Test safe-submodule-update"
(
  setup_test

  ##################################
  #              SETUP             #
  ##################################

  BUILD_REPO="${TESTDIR}"/build/repo
  TEST_REPO="${TESTDIR}"/clone
  PRETEND_URL="${TESTDIR}/git/pretend_repo" # bare repo
  # Test if git supports difficult submodule paths
  if git_bug_submodule_path_with_special_characters; then
    DIFFICULT_PATH='external/diff  i cult'
  else
    DIFFICULT_PATH=$'external/diff  i \t cult'
  fi
  DIFFICULT_NAME='difficult submod'

  # Sub sub module
  mkdir -p "${BUILD_REPO}_sub_sub"
  pushd "${BUILD_REPO}_sub_sub" &> /dev/null
    git init .
    touch readme_sub_sub
    git add readme_sub_sub
    git commit -m "Initial commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_sub_sub"
  pushd "${PRETEND_URL}_sub_sub" &> /dev/null
    # This only works right because all branches appear to be "topic" branches,
    # so a push --mirror (once) will do what I want. Doesn't work well with more
    # complexities like lfs
    git clone --mirror "${BUILD_REPO}_sub_sub" .
    # git init --bare .
    # cd "${BUILD_REPO}_sub_sub"
    # git remote add origin "${PRETEND_URL}_sub_sub"
    # git push origin --mirror
  popd &> /dev/null

  # Sub module
  mkdir -p "${BUILD_REPO}_sub"
  pushd "${BUILD_REPO}_sub" &> /dev/null
    git init .
    touch readme_sub
    git add readme_sub
    git submodule add "${PRETEND_URL}_sub_sub" "a_sub_sub_module"
    git commit -m "Initial commit"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_sub"
  pushd "${PRETEND_URL}_sub" &> /dev/null
    git clone --mirror "${BUILD_REPO}_sub" .
    # git init --bare .
    # cd "${BUILD_REPO}_sub"
    # git remote add origin "${PRETEND_URL}_sub"
    # git push origin --mirror
  popd &> /dev/null

  # Sub module
  # NOTE non-fast-forward merge is tested in this submodule
  mkdir -p "${BUILD_REPO}_behind"
  pushd "${BUILD_REPO}_behind" &> /dev/null
    git init .
    touch readme_behind
    git add readme_behind
    git commit -m "Behind (1)"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_behind"
  pushd "${PRETEND_URL}_behind" &> /dev/null
    git clone --mirror "${BUILD_REPO}_behind" .
  popd &> /dev/null

  # Sub module
  mkdir -p "${BUILD_REPO}_equal"
  pushd "${BUILD_REPO}_equal" &> /dev/null
    git init .
    touch readme_equal
    git add readme_equal
    git commit -m "Equal (1)"
    echo 2 >> readme_equal
    git add readme_equal
    git commit -m "Equal (2)"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_equal"
  pushd "${PRETEND_URL}_equal" &> /dev/null
    git clone --mirror "${BUILD_REPO}_equal" .
  popd &> /dev/null

  # Sub module
  mkdir -p "${BUILD_REPO}_ahead"
  pushd "${BUILD_REPO}_ahead" &> /dev/null
    git init .
    touch readme_ahead
    git add readme_ahead
    git commit -m "Ahead (1)"
  popd &> /dev/null
  mkdir -p "${PRETEND_URL}_ahead"
  pushd "${PRETEND_URL}_ahead" &> /dev/null
    git clone --mirror "${BUILD_REPO}_ahead" .
  popd &> /dev/null

  # Main Repo

  # sm_path (sm_name, if different)              URL
  # ./                                           "${PRETEND_URL}"
  # ./"${DIFFICULT_PATH}" ("${DIFFICULT_NAME}")  "${PRETEND_URL}_sub"
  # ./"${DIFFICULT_PATH}/a_sub_sub_module"       "${PRETEND_URL}_sub_sub"
  # ./behind                                     "${PRETEND_URL}_behind"
  # ./equal                                      "${PRETEND_URL}_equal"
  # ./ahead                                      "${PRETEND_URL}_ahead"
  #
  # NOTE each repo is created in a respective ${BUILD_REPO}"_* repo and mirror
  # pushed to "${PRETEND_URL}"_*

  mkdir -p "${PRETEND_URL}"
  pushd "${PRETEND_URL}" &> /dev/null
    git init --bare .
  popd &> /dev/null
  mkdir -p "${BUILD_REPO}"
  pushd "${BUILD_REPO}" &> /dev/null
    git init
    touch readme
    mkdir subdir
    touch subdir/a_file
    git add readme subdir/a_file
    git commit -m "Initial commit"

    git submodule add --name "${DIFFICULT_NAME}" "${PRETEND_URL}_sub" "${DIFFICULT_PATH}"
    # Git itself can't handle newlines, although the config file actually can
    # escape them. This is a PURE git bug, plain and simple.
    # This won't actually create a newline in the name, it just ignores it
    # git submodule add https://github.com/visionsystemsinc/vsi_common $'  foo\tar\n'
    # This will.
    # git mv $'  diff  i \t cult' $' \n diff  i \t cult'
    # However, at random this gives permission denied errors, good thing I don't need it...

    git submodule add "${PRETEND_URL}_behind" behind
    git submodule add "${PRETEND_URL}_equal" equal
    git submodule add "${PRETEND_URL}_ahead" ahead
    git submodule update --init --recursive
    pushd equal &> /dev/null
      git checkout HEAD~1 # Don't track the latest commit
    popd &> /dev/null
    git add behind equal ahead
    git commit -m "Added submodules"
    git remote add origin "${PRETEND_URL}"
    git push origin master
  popd &> /dev/null

  # REVIEW The TEST_REPO isn't strictly necessary for most of these tests
  # because the only thing that is important is the tracked commit. However,
  # when a submodule's URL in the .gitmodules file changes, that change must
  # be sync'd with the 'just_upstream' remote. In this case, it is important
  # that changes to the submodule still need to be fetched from the new remote.
  # (Typically, git fetches changes in submodules when it fetches them in the
  # parent repository. However, if the submodule's URL changed, this can't
  # happen until git submodule sync is run, which updates the default remote,
  # typically origin). This isn't possible (without surgery) without making the
  # change in one reop, pushing those changes, and then pulling those changes
  # in another repo
  # RE We could cut out the middle man, but this is more realistic

  # Clone the test repo in its initial configuration
  git clone "${PRETEND_URL}" "${TEST_REPO}"
  pushd "${TEST_REPO}" &> /dev/null
    git submodule update --init --recursive "${DIFFICULT_PATH}" behind ahead
    # Don't init submodule equal
  popd &> /dev/null

  # Commit/push updates to the submodules
  pushd "${BUILD_REPO}" &> /dev/null
    pushd "${DIFFICULT_PATH}" &> /dev/null
      pushd a_sub_sub_module &> /dev/null
        git checkout master
        mkdir subdir
        touch subdir/a_sub_sub_file
        git add subdir/a_sub_sub_file
        git commit -m "Second Commit"
        git push origin master
      popd &> /dev/null

      git add a_sub_sub_module
      git commit -m "update (sub) sub module"
      git push origin master
    popd &> /dev/null
    git add "${DIFFICULT_PATH}"

    pushd behind &> /dev/null
      git checkout master
      echo 2 >> readme_behind
      git add readme_behind
      git commit -m "Behind (2)"
      git push origin master
    popd &> /dev/null
    git add behind

    git commit -m "Update submodules (1)"
    git push origin master
  popd &> /dev/null

  #################################
  #              TEST             #
  #################################

  pushd "${TEST_REPO}" &> /dev/null
    submodule-helper-list
    ans=("${DIFFICULT_NAME}" behind equal ahead)
    assert_array_eq submodule_names ans
    ans=("${DIFFICULT_PATH}" behind equal ahead)
    assert_array_eq submodule_paths ans

    submodule-helper-list external
    ans=("${DIFFICULT_NAME}")
    assert_array_eq submodule_names ans
    ans=("${DIFFICULT_PATH}")
    assert_array_eq submodule_paths ans
  popd &> /dev/null


  # Test the initial configuration
  pushd "${TEST_REPO}" &> /dev/null
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && git config submodule.a_sub_sub_module.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(git config submodule.behind.url)" = "${PRETEND_URL}_behind" ]
    not git config submodule.equal.url
    [ "$(git config submodule.ahead.url)" = "${PRETEND_URL}_ahead" ]
    [ "$(cd "${DIFFICULT_PATH}" && git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && git config remote.origin.url)" = \
        "${PRETEND_URL}_sub_sub" ]
    [ "$(cd behind && git config remote.origin.url)" = "${PRETEND_URL}_behind" ]
    #[ "$(cd equal && git config remote.origin.url)" = "" ] # Can't do this test yet
    [ "$(cd ahead && git config remote.origin.url)" = "${PRETEND_URL}_ahead" ]
  popd &> /dev/null

  # Update a single submodule using a specified named remote
  pushd "${TEST_REPO}" &> /dev/null
    output="$(JUST_GIT_UPSTREAM=foo_upstream safe_git_submodule_update equal | grep "Uninitialized submodule")"
    # Test an un-init'd submodule
    [ "${output}" = "Uninitialized submodule 'equal'...Initializing" ]

    # Verify initial configuration is still correct
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && git config submodule.a_sub_sub_module.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(git config submodule.behind.url)" = "${PRETEND_URL}_behind" ]
    [ "$(git config submodule.equal.url)" = "${PRETEND_URL}_equal" ]
    [ "$(git config submodule.ahead.url)" = "${PRETEND_URL}_ahead" ]
    [ "$(cd "${DIFFICULT_PATH}" && git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && git config remote.origin.url)" = \
        "${PRETEND_URL}_sub_sub" ]
    [ "$(cd behind && git config remote.origin.url)" = "${PRETEND_URL}_behind" ]
    [ "$(cd equal && git config remote.origin.url)" = "${PRETEND_URL}_equal" ]
    [ "$(cd ahead && git config remote.origin.url)" = "${PRETEND_URL}_ahead" ]

    pushd behind &> /dev/null
      not git config remote.foo_upstream.url
      not git config remote.just_upstream.url
      [ "$(git log -n1 --format="%s")" = "Behind (1)" ]
    popd &> /dev/null
    # Test that the foo_upstream remote was created in the equal submodule
    pushd equal &> /dev/null
      [ "$(git config remote.foo_upstream.url)" = "${PRETEND_URL}_equal" ]
      not git config remote.just_upstream.url
      [ "$(git log -n1 --format="%s")" = "Equal (1)" ]
      # alternatively
      #[ "$(git show HEAD | git patch-id | awk '{print $1}')" = "${aSHA}" ]
    popd &> /dev/null
    pushd "ahead" &> /dev/null
      not git config remote.foo_upstream.url
      not git config remote.just_upstream.url
      [ "$(git log -n1 --format="%s")" = "Ahead (1)" ]
    popd &> /dev/null
  popd &> /dev/null

  # Update all submodules using a specified named remote
  pushd "${TEST_REPO}" &> /dev/null
    JUST_GIT_UPSTREAM=foo_upstream safe_git_submodule_update
    # Verify initial configuration is still correct
    [ "$(git config submodule."${DIFFICULT_NAME}".url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}" && git config submodule.a_sub_sub_module.url)" = "${PRETEND_URL}_sub_sub" ]
    [ "$(git config submodule.behind.url)" = "${PRETEND_URL}_behind" ]
    [ "$(git config submodule.equal.url)" = "${PRETEND_URL}_equal" ]
    [ "$(git config submodule.ahead.url)" = "${PRETEND_URL}_ahead" ]
    [ "$(cd "${DIFFICULT_PATH}" && git config remote.origin.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && git config remote.origin.url)" = \
        "${PRETEND_URL}_sub_sub" ]
    [ "$(cd behind && git config remote.origin.url)" = "${PRETEND_URL}_behind" ]
    [ "$(cd equal && git config remote.origin.url)" = "${PRETEND_URL}_equal" ]
    [ "$(cd ahead && git config remote.origin.url)" = "${PRETEND_URL}_ahead" ]

    # Test that the foo_upstream remote was created
    [ "$(cd "${DIFFICULT_PATH}" && git config remote.foo_upstream.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && git config remote.foo_upstream.url)" = \
        "${PRETEND_URL}_sub_sub" ]
    [ "$(cd behind && git config remote.foo_upstream.url)" = "${PRETEND_URL}_behind" ]
    [ "$(cd equal && git config remote.foo_upstream.url)" = "${PRETEND_URL}_equal" ]
    [ "$(cd ahead && git config remote.foo_upstream.url)" = "${PRETEND_URL}_ahead" ]

    [ "$(cd behind && git log -n1 --format="%s")" = "Behind (1)" ]
    [ "$(cd equal && git log -n1 --format="%s")" = "Equal (1)" ]
    [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (1)" ]
  popd &> /dev/null


  # Update all submodules using the default named remote (just_upstream)
  pushd "${TEST_REPO}" &> /dev/null
    safe_git_submodule_update
    [ "$(cd "${DIFFICULT_PATH}" && git config remote.just_upstream.url)" = "${PRETEND_URL}_sub" ]
    [ "$(cd "${DIFFICULT_PATH}/a_sub_sub_module" && git config remote.just_upstream.url)" = \
        "${PRETEND_URL}_sub_sub" ]
    [ "$(cd behind && git config remote.just_upstream.url)" = "${PRETEND_URL}_behind" ]
    [ "$(cd equal && git config remote.just_upstream.url)" = "${PRETEND_URL}_equal" ]
    [ "$(cd ahead && git config remote.just_upstream.url)" = "${PRETEND_URL}_ahead" ]
  popd &> /dev/null

  # Create an untracked file that will not conflict with the submodule update
  pushd "${TEST_REPO}" &> /dev/null
    echo 1 >> ahead/file
    output="$(safe_git_submodule_update | grep "Untracked files")"
    [ "${output}" = "Untracked files in 'ahead'" ]
    [ "$(cat ahead/file)" = "1" ]
    [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (1)" ]
    rm ahead/file
  popd &> /dev/null

  # Modify a tracked file in the ahead submodule of the test repo
  pushd "${TEST_REPO}" &> /dev/null
    pushd "ahead" &> /dev/null
      git checkout master
      echo 2 >> readme_ahead
    popd &> /dev/null
    output="$(safe_git_submodule_update | grep "Uncommited tracked files")"
    [ "${output}" = "Uncommited tracked files in 'ahead'" ]
    [ "$(cat ahead/readme_ahead)" = "2" ]
    [ "$(cd ahead && git status --short readme_ahead | cut -c2)" = "M" ]
    [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (1)" ]
  popd &> /dev/null

  # Stage the change in the ahead submodule of the test repo
  pushd "${TEST_REPO}" &> /dev/null
    pushd "ahead" &> /dev/null
      git add readme_ahead
    popd &> /dev/null
    output="$(askcontinue=y safe_git_submodule_update <<< "a" | grep "Staged tracked files")"
    [ "${output}" = "Staged tracked files in 'ahead'" ]
    [ "$(cat ahead/readme_ahead)" = "2" ]
    [ "$(cd ahead && git status --short readme_ahead | cut -c1)" = "M" ]
    [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (1)" ]
  popd &> /dev/null

  # Commit the change in the ahead submodule of the test repo
  pushd "${TEST_REPO}" &> /dev/null
    pushd "ahead" &> /dev/null
      # Create a local commit; this submodule is now ahead of the tracked commit
      git commit -m "Ahead (2)"
      git push origin master
    popd &> /dev/null
    if git_feature_submodule_update_with_custom_command; then
      # Warns that the repository 'ahead' is not on the expected SHA; prompts
      # the user to continue
      askcontinue=y safe_git_submodule_update
      [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (2)" ]
    else
      pushd ahead &> /dev/null
        lost_commit="$(git rev-parse HEAD)"
      popd &> /dev/null

      safe_git_submodule_update

      # git is too old to do a safe submodule update; does a normal submodule
      # update, which forcefully moves HEAD, loosing the new commit
      # RE This commit is really only lost if there was not a branch tracking
      # it. However, forgetting to checkout a branch is pretty easy in a
      # submodule.
      [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (1)" ]

      # Manually recover this commit
      pushd ahead &> /dev/null
        git checkout "${lost_commit}"
      popd &> /dev/null
    fi
    # Track the new commit in the ahead submodule
    git add ahead
    git commit -m "Update submodule (2)"
  popd &> /dev/null

  # Pull new changes
  pushd "${TEST_REPO}" &> /dev/null
    # In git <=1.8.3, 'git fetch origin master' amazingly does not update the
    # remote tracking branch: https://stackoverflow.com/a/20967347
    # RE git fetch origin master:refs/remotes/origin/master would have also
    # worked
    git fetch
    # main repo - merges (commits) changes to submodules
    git merge origin/master --no-edit
    # behind - HEAD is now behind the tracked commit
    # equal - HEAD is still equal to tracked commit
    # ahead - HEAD is still ahead of the tracked commit (if git >1.8.3)
    git push origin master
  popd &> /dev/null

  # TODO Untracked file that will conflict with the submodule update

  # Modify a tracked file in the behind submodule of the test repo
  pushd "${TEST_REPO}" &> /dev/null
    pushd "behind" &> /dev/null
      git checkout master
      echo 3 >> readme_behind
    popd &> /dev/null
    output="$(askcontinue=y safe_git_submodule_update <<< "a" 2>&1 | \
        grep -e "Uncommited tracked files" -e "in submodule  \?path")"
    [[ "${output}" = *"Uncommited tracked files in 'behind'"* ]] || false
    # Tried to update submodule but failed
    if git_feature_submodule_update_with_custom_command; then
      [[ "${output}" = *"failed in submodule  path 'behind'" ]] || \
      [[ "${output}" = *"failed in submodule path 'behind'" ]] || false
    else
      [[ "${output}" = *"Unable to checkout"*"in submodule path 'behind'" ]] || false
    fi
    [ "$(cat behind/readme_behind)" = "3" ]
    [ "$(cd behind && git status --short readme_behind | cut -c2)" = "M" ]
    [ "$(cd behind && git log -n1 --format="%s")" = "Behind (1)" ]
  popd &> /dev/null

  # Stage the change in the behind submodule of the test repo
  pushd "${TEST_REPO}" &> /dev/null
    pushd "behind" &> /dev/null
      git add readme_behind
    popd &> /dev/null
    output="$(askcontinue=y safe_git_submodule_update <<< "a" 2>&1 | \
        grep "Staged tracked files")"
    [[ "${output}" = *"Staged tracked files in 'behind'" ]] || false
    [ "$(cat behind/readme_behind)" = "3" ]
    [ "$(cd behind && git status --short readme_behind | cut -c1)" = "M" ]
    [ "$(cd behind && git log -n1 --format="%s")" = "Behind (1)" ]
  popd &> /dev/null

  # Test non-ff merge
  # Commit the change in the behind submodule of the test repo
  pushd "${TEST_REPO}" &> /dev/null
    pushd "behind" &> /dev/null
      # Create a local commit; this submodule is now ahead of the tracked
      # commit, which itself has a new commit. Consequently, we have a
      # non-fast-forward merge that will fail
      git commit -m "Behind (3)"
    popd &> /dev/null
    if git_feature_submodule_update_with_custom_command; then
      output="$(askcontinue=y safe_git_submodule_update <<< "a" 2>&1 | \
          grep "failed in submodule  \?path")"
      [[ "${output}" = *"failed in submodule  path 'behind'" ]] || \
      [[ "${output}" = *"failed in submodule path 'behind'" ]] || false
      [ "$(cd behind && git log -n1 --format="%s")" = "Behind (3)" ]
      # drop last commit in the behind submodule (so we don't get errors going
      # forward)
      pushd "behind" &> /dev/null
        git reset --hard HEAD~1
      popd &> /dev/null
    else
      safe_git_submodule_update
      # git is too old to do a safe submodule update; does a normal submodule
      # update, which forcefully moves HEAD, loosing the new commit
      [ "$(cd behind && git log -n1 --format="%s")" = "Behind (2)" ]
      # drop last commit in the behind submodule (so we don't get errors going
      # forward)
      pushd "behind" &> /dev/null
        # Move HEAD back to master after git submodule update forcefully moved it
        git checkout master
        git reset --hard HEAD~1
      popd &> /dev/null
    fi
  popd &> /dev/null

  # All submodules are now on the correct SHA
  pushd "${TEST_REPO}" &> /dev/null
    safe_git_submodule_update
    [ "$(cd behind && git log -n1 --format="%s")" = "Behind (2)" ]
    [ "$(cd equal && git log -n1 --format="%s")" = "Equal (1)" ]
    [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (2)" ]
  popd &> /dev/null


  # Test just_upstream sync'ing (and that other remotes, e.g., origin, are
  # unaffected). (This could be a separate test. If only setting up submodules
  # wasn't such a pain)
  cp -a "${PRETEND_URL}_behind" "${PRETEND_URL}_behind2"
  pushd "${BUILD_REPO}" &> /dev/null
    # In git <=1.8.3, 'git fetch origin master' amazingly does not update the
    # remote tracking branch: https://stackoverflow.com/a/20967347
    git fetch
    git merge origin/master
    git submodule update --init --recursive
    sed "${sed_flags_i[@]}" -e \
         "s|url = ${PRETEND_URL}_behind|url = ${PRETEND_URL}_behind2|" .gitmodules
    git add .gitmodules
    git commit -m "Update submodule behind's URL"
    git submodule sync behind
    pushd behind &> /dev/null
      git checkout master
      # Add a new commit to the new URL
      echo 4 >> readme_behind
      git add readme_behind
      git commit -m "Behind (4)"
      # We sync'd so this should be true
      [ "$(git config remote.origin.url)" = "${PRETEND_URL}_behind2" ]
      git push origin master
    popd &> /dev/null
    # Track the new commit at the new URL
    git add behind
    git commit -m "Update the behind submodule"
    git push origin master
  popd &> /dev/null

  pushd "${TEST_REPO}" &> /dev/null
    # Ensure submodule behind's URL hasn't been updated yet
    [ "$(git config submodule.behind.url)" = "${PRETEND_URL}_behind" ]
    [ "$(cd behind && git config remote.origin.url)" = "${PRETEND_URL}_behind" ]
    [ "$(cd behind && git config remote.just_upstream.url)" = "${PRETEND_URL}_behind" ]

    # The tracked SHA in submodule behind will not be in the repository because
    # the URL changed. safe_git_submodule_update will update just_upstream and
    # fetch from the new URL
    #
    # In git 2.27, git pull began recommending a merge strategy
    # https://stackoverflow.com/a/62653694
    #
    # In git <=1.8.3, 'git fetch origin master' amazingly does not update the
    # remote tracking branch: https://stackoverflow.com/a/20967347
    #
    # In git 2.21.0, 'git fetch' started failing if the commit of a submodule
    # as tracked by the parent repo couldn't be found (which can happen if the
    # submodule's URL changes and needs to be sync'd). That is, running
    # 'git fetch'  from within a parent repo fetches all branches (from either
    # the default remote of the current branch or, if not set, origin). Then,
    # git runs fetch in each submodule (assuming fetch.recurseSubmodules is
    # enabled, which it is by default since at least git 1.8.3). Finally, git
    # seems to inspect the submodule to ensure that each commit tracked by the
    # parent exists in the submodule, otherwise, it errors
    git fetch || :
    git merge origin/master

    # Sync the submodules, fetches new commits, and update
    safe_git_submodule_update

    [ "$(git config submodule.behind.url)" = "${PRETEND_URL}_behind" ]
    [ "$(cd behind && git config remote.origin.url)" = "${PRETEND_URL}_behind" ]
    # just_upstream sync'd to the updated URL in the .gitmodules file
    [ "$(cd behind && git config remote.just_upstream.url)" = "${PRETEND_URL}_behind2" ]
    [ "$(cd behind && git log -n1 --format="%s")" = "Behind (4)" ]
  popd &> /dev/null


  # Verify that sync'ing uses the default remote of the current branch;
  # otherwise origin (all of the previous tests implicitly used origin to sync,
  # but go ahead and test it explicitly)
  pushd "${TEST_REPO}" &> /dev/null
    sed "${sed_flags_i[@]}" -e \
         "s|url = ${PRETEND_URL}_equal|url = "../$(basename ${PRETEND_URL}_equal)"|" .gitmodules
    sed "${sed_flags_i[@]}" -e \
         "s|url = ${PRETEND_URL}_ahead|url = "../$(basename ${PRETEND_URL}_ahead)"|" .gitmodules
    git add .gitmodules
    git commit -m "Update submodule behind's URL"
    # Modify the remotes of submodule equal and ahead
    # These repos don't have to exist because git submodule update (which is
    # called by safe_git_submodule_update's helper function
    # _checkout_git_submodule) does not fetch if the tracked commit can be
    # found in the submodule
    updated_pretend_url="${PRETEND_URL/git\/pretend_repo/git1/pretend_repo}"
    git config remote.origin.url "${updated_pretend_url}"
    git config submodule.equal.url "${PRETEND_URL}_equal3"
    git config submodule.ahead.url "${PRETEND_URL}_ahead3"
    pushd equal &> /dev/null
      git config remote.origin.url "${PRETEND_URL}_equal4"
      git config remote.just_upstream.url "${PRETEND_URL}_equal5"
      git config remote.foo_upstream.url "${PRETEND_URL}_equal6"
      git checkout -b abranch
      # Set the default remote of the branch to foo_upstream
      git config branch.abranch.remote foo_upstream
    popd &> /dev/null
    pushd ahead &> /dev/null
      git config remote.origin.url "${PRETEND_URL}_ahead4"
      git config remote.just_upstream.url "${PRETEND_URL}_ahead5"
      git config remote.foo_upstream.url "${PRETEND_URL}_ahead6"
      # Checkout a detached head
      git checkout "$(git rev-parse HEAD)"
    popd &> /dev/null
  popd &> /dev/null
  cp -a "${TEST_REPO}" "${TEST_REPO}_ex1"

  cp -a "${TEST_REPO}_ex1" "${TEST_REPO}_ref1"
  pushd "${TEST_REPO}_ref1" &> /dev/null
    git submodule sync

    pushd ahead &> /dev/null
      ahead_remote_origin_url="$(git config remote.origin.url)"
      [ "${ahead_remote_origin_url}" = "${updated_pretend_url}_ahead" ]
    popd &> /dev/null
    pushd equal &> /dev/null
      # (unchanged)
      [ "$(git config remote.origin.url)" = "${PRETEND_URL}_equal4" ]
      equal_remote_foo_upstream_url="$(git config remote.foo_upstream.url)"
      [ "${equal_remote_foo_upstream_url}" = "${updated_pretend_url}_equal" ]
    popd &> /dev/null
  popd &> /dev/null

  pushd "${TEST_REPO}_ex1" &> /dev/null
    # Sync the submodules, fetches new commits, and update
    safe_git_submodule_update

    [ "$(git config submodule.ahead.url)" = "${PRETEND_URL}_ahead3" ]
    # I'm not sure how to be sure that git used this remote to sync as opposed
    # to origin. However, if the function being tested assumed origin, this
    # would fail
    [ "$(cd ahead && git config remote.origin.url)" = "${PRETEND_URL}_ahead4" ]
    [ "$(cd ahead && git config remote.just_upstream.url)" = "${ahead_remote_origin_url}" ]
    [ "$(cd ahead && git config remote.foo_upstream.url)" = "${PRETEND_URL}_ahead6" ]
    [ "$(cd ahead && git log -n1 --format="%s")" = "Ahead (2)" ] # Still on a detached head

    [ "$(git config submodule.equal.url)" = "${PRETEND_URL}_equal3" ]
    [ "$(cd equal && git config remote.origin.url)" = "${PRETEND_URL}_equal4" ]
    [ "$(cd equal && git config remote.just_upstream.url)" = "${equal_remote_foo_upstream_url}" ]
    # I'm not sure how to be sure that git used this remote to sync as opposed
    # to origin. However, if the function being tested assumed origin, this
    # would fail
    [ "$(cd equal && git config remote.foo_upstream.url)" = "${PRETEND_URL}_equal6" ]
    [ "$(cd equal && git log -n1 --format="%s")" = "Equal (1)" ] # Now on a detached head
  popd &> /dev/null

  # Verify that if the submodule's URL is relative, sync'ing resolves it using
  # the default remote of the current branch in the parent repository;
  # otherwise, origin
  cp -a "${TEST_REPO}" "${TEST_REPO}_ex2"
  pushd "${TEST_REPO}_ex2" &> /dev/null
    git checkout -b new_branch
    # Shouldn't be used by this test
    [ "$(git config remote.origin.url)" = "${updated_pretend_url}" ] # .../git1
    updated_pretend_url="${PRETEND_URL/git\/pretend_repo/git2/pretend_repo}"
    git remote add upstream "${updated_pretend_url}"
    git config branch.new_branch.remote upstream
  popd &> /dev/null

  cp -a "${TEST_REPO}_ex2" "${TEST_REPO}_ref2"
  pushd "${TEST_REPO}_ref2" &> /dev/null
    git submodule sync

    pushd ahead &> /dev/null
      ahead_remote_origin_url="$(git config remote.origin.url)"
      [ "${ahead_remote_origin_url}" = "${updated_pretend_url}_ahead" ]
    popd &> /dev/null
    pushd equal &> /dev/null
      equal_remote_foo_upstream_url="$(git config remote.foo_upstream.url)"
      [ "${equal_remote_foo_upstream_url}" = "${updated_pretend_url}_equal" ]
    popd &> /dev/null
  popd &> /dev/null

  pushd "${TEST_REPO}_ex2" &> /dev/null
    # Sync the submodules, fetches new commits, and update
    safe_git_submodule_update

    [ "$(cd ahead && git config remote.just_upstream.url)" = "${ahead_remote_origin_url}" ]
    [ "$(cd equal && git config remote.just_upstream.url)" = "${equal_remote_foo_upstream_url}" ]
  popd &> /dev/null


  # Test git_reattach_heads (This could be a separate test; it only requires a
  # detached head and a branch at the same commit. If only setting up submodules
  # wasn't such a pain)
  pushd "${TEST_REPO}" &> /dev/null
    # Setup some branches to re-attach
    pushd "${DIFFICULT_PATH}" &> /dev/null
      git checkout master
      git checkout "$(git rev-parse master)" # Detach the head

      pushd a_sub_sub_module &> /dev/null
        git checkout master # An attached head
      popd &> /dev/null
    popd &> /dev/null

    pushd equal &> /dev/null
      git checkout "$(git rev-parse abranch)" # Detach the head
    popd &> /dev/null

    git_reattach_heads "${DIFFICULT_PATH}"
    [ "$(cd "${DIFFICULT_PATH}" && git rev-parse --abbrev-ref HEAD)" = "master" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && git rev-parse --abbrev-ref HEAD)" = "master" ]
    [ "$(cd behind && git rev-parse --abbrev-ref HEAD)" = "HEAD" ]
    [ "$(cd equal && git rev-parse --abbrev-ref HEAD)" = "HEAD" ]

    git_reattach_heads
    [ "$(cd "${DIFFICULT_PATH}" && git rev-parse --abbrev-ref HEAD)" = "master" ]
    [ "$(cd "${DIFFICULT_PATH}"/a_sub_sub_module && git rev-parse --abbrev-ref HEAD)" = "master" ]
    [ "$(cd behind && git rev-parse --abbrev-ref HEAD)" = "HEAD" ]
    [ "$(cd equal && git rev-parse --abbrev-ref HEAD)" = "abranch" ]
  popd &> /dev/null
)
end_test
