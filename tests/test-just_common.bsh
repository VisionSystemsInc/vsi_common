#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/just_common.bsh"

begin_test "_just_commands_from_file"
(
  setup_test

  JUST_HELP_SEPARATOR=':-:'

  # Null case
  [ "$(_just_commands_from_file <(:))" = "" ]

  # Single line
  input='apple)#Red delicious'
  ans='apple :-:Red delicious'
  [ "$(_just_commands_from_file <(echo -n "${input}"))" = "${ans}" ]

  input+=$'\n  cherry) '
  # Another null case

  # Test extra spaces
  input+=$'\napricot) #Ok drupe fruit'
  ans+=$'\napricot :-:Ok drupe fruit'
  input+=$'\navacado)# The first of the evil fruit'
  ans+=$'\navacado :-:The first of the evil fruit'
  input+=$'\n  banana   )  #  Every  monkey\'s    favorite  '
  ans+=$'\nbanana :-:Every  monkey\'s    favorite'
  input+=$'\n#   Bilberry  ) # That Norwegian treat  '
  ans+=$'\nBilberry :-:That Norwegian treat'

  # Test Comment different from target
  input+=$'\n#blackberry) #That\'s a phone, right?'
  input+=$'\nblackberr*)'
  ans+=$'\nblackberry :-:That\'s a phone, right?'

  # This expansion feature should pass through unchanged
  cucurbitaceae=(cucumber sqauch zucchini)
  input+=$'\n# fresh_{cucurbitaceae}) # Fresh'
  input+=$'\nfresh_*)'
  ans+=$'\nfresh_{cucurbitaceae} :-:Fresh'

  # I guess this should be parsed as a command
  input+=$'\nraw_*) # The raw version'
  ans+=$'\nraw_* :-:The raw version'

  # Test multiple target
  input+=$'\nraspberry|strawberry) # Common aggregate fruit  '
  ans+=$'\nraspberry :-:Common aggregate fruit'
  ans+=$'\nstrawberry :-:Common aggregate fruit'

  input+=$'\nboysenberry|\\'
  input+=$'\nmarionberry) \\'
  input+=$'\n # Unnatural cultivars'
  ans+=$'\nboysenberry :-:Unnatural cultivars'
  ans+=$'\nmarionberry :-:Unnatural cultivars'

  input+=$'\nnocomment) #'
  ans+=$'\nnocomment :-:'

  # [ "$(_just_commands_from_file <(echo -n "${input}") | od -a -t x1)" = "$(od -a -t x1 <<< "${ans}")" ]
  [ "$(_just_commands_from_file <(echo -n "${input}"))" = "${ans}" ]

)
end_test

begin_test "_just_subcommands_from_array"
(
  setup_test

  # It's weird, but this line jams sed in _just_subcommands_from_array on
  # bashcov... The next line tests the same thing, so good enough
  # [ "$(_just_subcommands_from_array <(:))" = "" ]
  [ "$(echo "" | _just_subcommands_from_array)" = "" ]

  input='pineapple #@#Not an apple'
  [ "$(_just_subcommands_from_array <<< "${input}")" = "" ]

  input='apple_washington #@#Red apple'
  ans='apple'
  [ "$(_just_subcommands_from_array <<< "${input}")" = "${ans}" ]

  input+=$'\napple_fuji #@#Red apple'
  ans+=$'\napple'
  input+=$'\napple_gala #@#Red apple'
  ans+=$'\napple'
  input+=$'\napple_golden_delicious #@#Not a red apple'
  ans+=$'\napple'
  [ "$(_just_subcommands_from_array <<< "${input}")" = "${ans}" ]

  input+=$'\norange #@#An orange orange'
  input+=$'\napple_honey_crisp #@#Also a red apple'
  ans+=$'\napple'
  [ "$(_just_subcommands_from_array <<< "${input}")" = "${ans}" ]

  input+=$'\npepper_bell #@#The evil pepper'
  ans+=$'\npepper'
  input+=$'\npepper_habanero #@#The good pepper'
  ans+=$'\npepper'
  input+=$'\npepper_jalapeño #@#Another good pepper'
  ans+=$'\npepper'
  input+=$'\napple_jazz #@#The musical apple'
  ans+=$'\napple'
  input+=$'\npepper_ghost #@#Bet\'cha can\'t have more than just one'
  ans+=$'\npepper'
  [ "$(_just_subcommands_from_array <<< "${input}")" = "${ans}" ]
)
end_test

begin_test "_just_subtargets_from_array"
(
  setup_test
  help_lines=()

  just_subtargets=()
  _just_subtargets_from_array apple ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets
  _just_subtargets_from_array pineapple ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets
  _just_subtargets_from_array pepper ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets

  help_lines+=('pineapple #@#Not an apple')
  _just_subtargets_from_array apple ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets
  _just_subtargets_from_array pineapple ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets
  _just_subtargets_from_array pepper ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets

  help_lines=('apple_washington #@#Red apple')
  _just_subtargets_from_array apple ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets washington
  just_subtargets=()
  _just_subtargets_from_array pepper ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets


  help_lines+=('apple_fuji #@#Red apple')
  help_lines+=('apple_gala #@#Red apple')
  help_lines+=('apple_golden_delicious #@#Not a red apple')
  _just_subtargets_from_array apple ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets washington fuji gala golden_delicious
  just_subtargets=()
  _just_subtargets_from_array pepper ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets

  help_lines+=('orange #@#An orange orange')
  help_lines+=('apple_honey_crisp #@#Also a red apple')


  help_lines+=('pepper_bell #@#The evil pepper')
  help_lines+=('pepper_habanero #@#The good pepper')
  help_lines+=('pepper_jalapeño #@#Another good pepper')
  help_lines+=('apple_jazz #@#The musical apple')
  help_lines+=($'pepper_ghost #@#Bet\'cha can\'t have more than just one')

  _just_subtargets_from_array apple ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets washington fuji gala golden_delicious honey_crisp jazz
  just_subtargets=()
  _just_subtargets_from_array orange ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets
  _just_subtargets_from_array pepper ${help_lines+"${help_lines[@]}"}
  assert_array_values just_subtargets bell habanero jalapeño ghost
)
end_test

begin_test "just parse helps"
(
  JUST_HELP_SEPARATOR='#@#'
  setup_test

  # Test expansion
  COLORS=(red yellow green gammaray)
  s=$'#test_{COLORS}) # The color is\n'
  s+=$'test_*)'
  _just_parse_helps <(printf "${s}")
  color_ans=('test_red #@#The color is red' \
             'test_yellow #@#The color is yellow' \
             'test_green #@#The color is green' \
             'test_gammaray #@#The color is gammaray')
  assert_array_values parsed_help_a "${color_ans[@]}"

  # Test everything else
  s=$'what) #huh\n'
  s+=$'a|b|c) # test\n'
  s+=$'mix|mix_ed|mixed) # best\n'
  s+=$'mix_ed|mixed) # test\n'
  s+=$'mix|mix_ed) # fest\n'
  s+=$'d|\\\ne) # foo\n'

  ans=('what #@#huh' \
       'a #@#test' \
       'b #@#test' \
       'c #@#test' \
       'mix #@#best' \
       'mix_ed #@#best' \
       'mixed #@#best' \
       'mix_ed #@#test' \
       'mixed #@#test' \
       'mix #@#fest' \
       'mix_ed #@#fest' \
       'd #@#foo' \
       'e #@#foo')

  _just_parse_helps <(printf "${s}")
  assert_array_values parsed_help_a "${ans[@]}"

  s+=$'#test_{COLORS}) # The color is\n'
  s+=$'test_*)\n'
  s+=$'rest_*) # Rest something\n'
  ans+=('rest_* #@#Rest something')
  s+=$'normal) # One more'
  ans+=('normal #@#One more')
  # Ordering gets changed by expansion, no big deal. It's all normal
  ans+=("${color_ans[@]}")
  _just_parse_helps <(printf "${s}")
  assert_array_values parsed_help_a "${ans[@]}"

  # Test subcommand and global subcommand
  s=$'test_this) #huh\n'
  s+=$'test_*) # test\n'
  ans=('test_this #@#huh' \
       'test_* #@#test')
  _just_parse_helps <(printf "${s}")
  assert_array_values parsed_help_a "${ans[@]}"
)
end_test

begin_test "_just_load_justfile"
(
  setup_test

  echo "x=20" > justfile
  mkdir foo
  cd foo

  not declare -p x 2>/dev/null
  JUST_DRYRUN_SOURCE=: _just_load_justfile justfile
  [ -z "${x+set}" ]
  _just_load_justfile justfile
  [ "${x}" = 20 ]
)
end_test

begin_test "_just_get_plugins"
(
  setup_test

  _just_get_plugins
  assert_array_values JUST_PLUGINS

  echo "testa" > .justplugins
  echo "testb" >> .justplugins
  echo "testc" >> .justplugins
  echo -n "testd" >> .justplugins

  _just_get_plugins
  assert_array_values JUST_PLUGINS "${TESTDIR}/testa" "${TESTDIR}/testb" "${TESTDIR}/testc" "${TESTDIR}/testd"

  JUST_PLUGIN_FILE=test2
  echo "test_1" > test2
  echo "test_2" >> test2
  echo "test_3" >> test2
  _just_get_plugins .
  assert_array_values JUST_PLUGINS "${TESTDIR}/testa"  "${TESTDIR}/testb"  "${TESTDIR}/testc" "${TESTDIR}/testd" \
                       "${TESTDIR}/test_1" "${TESTDIR}/test_2" "${TESTDIR}/test_3"

)
end_test
