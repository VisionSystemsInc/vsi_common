#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/dir_tools.bsh"

begin_test "parent find files"
(
  setup_test

  mkdir -p a/b/c/d/e/f
  touch a/b/test1
  touch a/b/test11
  touch a/test12
  touch a/b/c/d/e/f/test2
  touch test3

  pushd a/b/c/d/e/f > /dev/null
    parent_find_files test1
    assert_array_values file_matches "${TESTDIR}/a/b/test1"
    parent_find_files test1 test11 test12
    assert_array_values file_matches "${TESTDIR}/a/b/test1" "${TESTDIR}/a/b/test11"
    parent_find_files test2
    assert_array_values file_matches "${TESTDIR}/a/b/c/d/e/f/test2"
    parent_find_files test3
    assert_array_values file_matches "${TESTDIR}/test3"
    parent_find_files test4
    assert_array_values file_matches
  popd > /dev/null

  pushd a/b/c/d/e > /dev/null
    parent_find_files test1
    assert_array_values file_matches "${TESTDIR}/a/b/test1"
    parent_find_files test1 test11 test12
    assert_array_values file_matches "${TESTDIR}/a/b/test1" "${TESTDIR}/a/b/test11"
    parent_find_files test2
    assert_array_values file_matches
    parent_find_files test3
    assert_array_values file_matches "${TESTDIR}/test3"
    parent_find_files test4
    assert_array_values file_matches
  popd > /dev/null

  parent_find_files test1
  assert_array_values file_matches
  parent_find_files test1 test11 test12
  assert_array_values file_matches
  parent_find_files test2
  assert_array_values file_matches
  parent_find_files test3
  assert_array_values file_matches "${TESTDIR}/test3"
  parent_find_files test4
  assert_array_values file_matches
)
end_test

begin_test "parent find files test infinite loop"
(
  setup_test

  timeout 10 bash -c ". '${VSI_COMMON_DIR}/linux/dir_tools.bsh'; parent_find_files does_not_exist"

  # Windows bash can't cd to // but can ///, which becomes /, so no point in testing
  if cd "/${PWD}"; then
    timeout 10 bash -c ". '${VSI_COMMON_DIR}/linux/dir_tools.bsh'; parent_find_files does_not_exist"
  fi
)
end_test

begin_test "make temp paths cleanup"
(
  setup_test

  # Find out where all the tempdirs go when they are born
  base_temp="$(dirname "$(mktemp -u -d)")"

  # Create random filename
  temp_file="$(basename "$(mktemp -u -t XXXXXXXXXXXXXXXX)")"

  (
    make_temp_path temp_dir -d
    touch "${temp_dir}/${temp_file}"
    make_temp_path temp_dir -d
    touch "${temp_dir}/${temp_file}"

    declare -i count=0
    for x in "${base_temp}/"*"/${temp_file}"; do
      count+=1
    done

    # Verify I have two different dirs with this same random file name in it
    [ "${count}" = "2" ]
  )

  # Verify I have no dirs with this random file name in it
  not ls "${base_temp}/"*"/${temp_file}" &> /dev/null

  make_temp_path temp_file
  [ -e "${temp_file}" ]
  _make_temp_path_cleanup
  [ ! -e "${temp_file}" ]
)
end_test

begin_test "normpath"
(
  setup_test

  [ "$(normpath /)" = "/" ]
  [ "$(normpath /abc)" = "/abc" ]
  [ "$(normpath /abc//def)" = "/abc/def" ]
  [ "$(normpath /abc///def)" = "/abc/def" ]
  [ "$(normpath /abc/././././def)" = "/abc/def" ]
  [ "$(normpath /abc/././././)" = "/abc" ]
  [ "$(normpath /././././abc)" = "/abc" ]
  [ "$(normpath /abc/./././def)" = "/abc/def" ]
  [ "$(normpath /abc/././def)" = "/abc/def" ]
  [ "$(normpath /abc/./def)" = "/abc/def" ]
  [ "$(normpath /abc/../)" = "/" ]
  [ "$(normpath /abc/def../)" = "/abc/def.." ]
  [ "$(normpath /abc/..def/)" = "/abc/..def" ]
  [ "$(normpath /abc/def/../)" = "/abc" ]
  [ "$(normpath /../)" = "/" ]
  [ "$(normpath /../../)" = "/" ]
  [ "$(normpath ../)" = ".." ]
  [ "$(normpath ./)" = "." ]
  [ "$(normpath ././././abc)" = "./abc" ]
  [ "$(normpath /abc/../../)" = "/" ]
  [ "$(normpath /abc/def/../../)" = "/" ]
  [ "$(normpath ../../wtf/)" = "../../wtf" ]
  [ "$(normpath ../../../wtf/)" = "../../../wtf" ]
  [ "$(normpath ./../../../wtf/)" = "../../../wtf" ]
  [ "$(normpath '/*')" = "/*" ]
)
end_test

begin_test "basenames"
(
  setup_test

  [ "$(basenames 2 test)" = "./test" ]
  [ "$(basenames 2 /aaa/test)" = "aaa/test" ]
  [ "$(basenames 2 /bbb/aaa/test)" = "aaa/test" ]
  [ "$(basenames 2 /ccc/bbb/aaa/test)" = "aaa/test" ]

  [ "$(basenames 2 ./test)" = "./test" ]
  [ "$(basenames 2 ./aaa/test)" = "aaa/test" ]
  [ "$(basenames 2 ./bbb/aaa/test)" = "aaa/test" ]
  [ "$(basenames 2 ./ccc/bbb/aaa/test)" = "aaa/test" ]

  [ "$(basenames 1 aaa/test)" = "test" ]
  [ "$(basenames 1 /aaa//test)" = "test" ]

  [ "$(basenames 2 /this/is/a/test)" = "a/test" ]
  [ "$(basenames 2 aaa/test)" = "aaa/test" ]
  [ "$(basenames 2 /aaa//test)" = "aaa/test" ]

  [ "$(basenames 1 '/foo/bar/*')" = '*' ]
)
end_test

begin_test "dirname"
(
  setup_test

  [ "$(command dirname /a/b/c)" = "$(dirname /a/b/c)" ]
  [ "$(command dirname /a/b/c/)" = "$(dirname /a/b/c/)" ]
  [ "$(command dirname a)" = "$(dirname a)" ]
  [ "$(command dirname a/b)" = "$(dirname a/b)" ]
  [ "$(command dirname /a)" = "$(dirname /a)" ]
)
end_test

begin_test "basename"
(
  setup_test

  [ "$(command basename /a/b/c)" = "$(basename /a/b/c)" ]
  [ "$(command basename /a/b/c/)" = "$(basename /a/b/c/)" ]
  [ "$(command basename a)" = "$(basename a)" ]
  [ "$(command basename a/b)" = "$(basename a/b)" ]
  [ "$(command basename /a)" = "$(basename /a)" ]
)
end_test

begin_test "Is dir empty"
(
  setup_test

  mkdir -p "${TESTDIR}/foo"
  is_dir_empty "${TESTDIR}/foo"

  mkdir -p "${TESTDIR}/foo/bar"
  not is_dir_empty "${TESTDIR}/foo"
  is_dir_empty "${TESTDIR}/foo/bar"

  touch "${TESTDIR}/foo/bar/.car"
  not is_dir_empty "${TESTDIR}/foo/bar"
)
end_test

begin_test "Get temp dir"
(
  setup_test
  unset OSTYPE TMPDIR _CS_DARWIN_USER_TEMP_DIR

  [ "$(get_mktemp_dir)" = "/tmp" ]
  [ "$(OSTYPE=darwin8 get_mktemp_dir)" = "/tmp" ]
  TMPDIR=/foo
  [ "$(get_mktemp_dir)" = "/foo" ]
  [ "$(_CS_DARWIN_USER_TEMP_DIR=/bar get_mktemp_dir)" = "/foo" ]
  OSTYPE=darwin8
  [ "$(get_mktemp_dir)" = "/foo" ]
  _CS_DARWIN_USER_TEMP_DIR=/bar
  [ "$(get_mktemp_dir)" = "/bar" ]
)
end_test

begin_test "common prefix"
(
  setup_test
  [ "$(common_prefix "/home/swenson/spam" "/home/swen/spam")" = "/home/swen" ]
  [ "$(common_prefix "/home/swen/spam" "/home/swen/eggs")" = "/home/swen/" ]
  [ "$(common_prefix "/home/swen/spam" "/home/swen/spam")" = "/home/swen/spam" ]
  [ "$(common_prefix "home/swenson/spam" "home/swen/spam")" = "home/swen" ]
  [ "$(common_prefix "/home/swen/spam" "/home/swen/eggs")" = "/home/swen/" ]
  [ "$(common_prefix "/home/swen/spam" "/home/swen/spam")" = "/home/swen/spam" ]


  testlist=('' 'abc' 'Xbcd' 'Xb' 'XY' 'abcd' 'aXc' 'abd' 'ab' 'aX' 'abcX')
  for s1 in "${testlist[@]}"; do
    for s2 in "${testlist[@]}"; do
      p="$(common_prefix "${s1}" "${s2}")"
      [ "${s1::${#p}}" = "${p}" ]
      [ "${s2::${#p}}" = "${p}" ]
      if [ "${s1}" != "${s2}" ]; then
        [ "${s1::${#p}+1}" != "${s2::${#p}+1}" ]
      fi
    done
  done
)
end_test

relpath_check()
{
  [ "$(relative_path "${1}" "${2}")" == "${3}" ]
  [ "$(relative_path "${1}/" "${2}")" == "${3}" ]
  [ "$(relative_path "${1}" "${2}/")" == "${3}" ]
  [ "$(relative_path "${1}/" "${2}/")" == "${3}" ]
}

begin_test "relaive path"
(
  setup_test
  # relpath_check '/    a   b/å/⮀*/!' '/    a   b/å/⮀/xäå/?'        '../../../⮀*/!'

  # relpath_check '/'                  '/A'                          '..'
  # relpath_check '/A'                 '/'                           'A'
  # relpath_check '/  & /  !/*/\\/E'   '/'                           '  & /  !/*/\\/E'
  # relpath_check '/'                  '/  & /  !/*/\\/E'            '../../../../..'
  relpath_check '/  & /  !/*/\\/E'   '/  & /  !/?/\\/E/F'          '../../../../*/\\/E'
  relpath_check '/X/Y'               '/  & /  !/C/\\/E/F'          '../../../../../../X/Y'
  relpath_check '/  & /  !/C'        '/A'                          '../  & /  !/C'
  relpath_check '/A /  !/C'          '/A /B'                       '../  !/C'
  relpath_check '/Â/  !/C'           '/Â/  !/C'                    '.'
  relpath_check '/  & /B / C'        '/  & /B / C/D'               '..'
  relpath_check '/  & /  !/C'        '/  & /  !/C/\\/Ê'            '../..'
  relpath_check '/Å/  !/C'           '/Å/  !/D'                    '../C'
  relpath_check '/.A /*B/C'          '/.A /*B/\\/E'                '../../C'
  relpath_check '/  & /  !/C'        '/  & /D'                     '../  !/C'
  relpath_check '/  & /  !/C'        '/  & /\\/E'                  '../../  !/C'
  relpath_check '/  & /  !/C'        '/\\/E/F'                     '../../../  & /  !/C'

  relpath_check /home/part1/part2    /home/part1/part3             '../part2'
  relpath_check /home/part1/part2    /home/part4/part5             '../../part1/part2'
  relpath_check /home/part1/part2    /work/part6/part7             '../../../home/part1/part2'
  relpath_check /home/part1          /work/part1/part2/part3/part4 '../../../../../home/part1'
  relpath_check /home                /work/part2/part3             '../../../home'
  relpath_check /                    /work/part2/part3/part4       '../../../..'
  relpath_check /home/part1/part2    /home/part1/part2/part3/part4 '../..'
  relpath_check /home/part1/part2    /home/part1/part2/part3       '..'
  relpath_check /home/part1/part2    /home/part1/part2             '.'
  relpath_check /home/part1/part2    /home/part1                   'part2'
  relpath_check /home/part1/part2    /home                         'part1/part2'
  relpath_check /home/part1/part2    /                             'home/part1/part2'
  relpath_check /home/part1/part2    /work                         '../home/part1/part2'
  relpath_check /home/part1/part2    /work/part1                   '../../home/part1/part2'
  relpath_check /home/part1/part2    /work/part1/part2             '../../../home/part1/part2'
  relpath_check /home/part1/part2    /work/part1/part2/part3       '../../../../home/part1/part2'
  relpath_check /home/part1/part2    /work/part1/part2/part3/part4 '../../../../../home/part1/part2'
  relpath_check home/part1/part2     home/part1/part3              '../part2'
  relpath_check home/part1/part2     home/part4/part5              '../../part1/part2'
  relpath_check home/part1/part2     work/part6/part7              '../../../home/part1/part2'
  relpath_check home/part1           work/part1/part2/part3/part4  '../../../../../home/part1'
  relpath_check home                 work/part2/part3              '../../../home'
  relpath_check .                    work/part2/part3              '../../..'
  relpath_check home/part1/part2     home/part1/part2/part3/part4  '../..'
  relpath_check home/part1/part2     home/part1/part2/part3        '..'
  relpath_check home/part1/part2     home/part1/part2              '.'
  relpath_check home/part1/part2     home/part1                    'part2'
  relpath_check home/part1/part2     home                          'part1/part2'
  relpath_check home/part1/part2     .                             'home/part1/part2'
  relpath_check home/part1/part2     work                          '../home/part1/part2'
  relpath_check home/part1/part2     work/part1                    '../../home/part1/part2'
  relpath_check home/part1/part2     work/part1/part2              '../../../home/part1/part2'
  relpath_check home/part1/part2     work/part1/part2/part3        '../../../../home/part1/part2'
  relpath_check home/part1/part2     work/part1/part2/part3/part4  '../../../../../home/part1/part2'

  curdir="$(basename "$(pwd)")"

  relpath_check "a" . "a"
  relpath_check "$(pwd)/a" . "a"
  relpath_check "a/b" . "a/b"
  relpath_check "../a/b" . "../a/b"
  relpath_check "a" "../b" "../${curdir}/a"
  relpath_check "a/b" "../c" "../${curdir}/a/b"
  relpath_check "a" "b/c" "../../a"
  relpath_check "a" "a" "."
  relpath_check "/foo/bar/bat" "/x/y/z" '../../../foo/bar/bat'
  relpath_check "/foo/bar/bat" "/foo/bar" 'bat'
  relpath_check "/foo/bar/bat" "/" 'foo/bar/bat'
  relpath_check "/" "/foo/bar/bat" '../../..'
  relpath_check "/foo/bar/bat" "/x" '../foo/bar/bat'
  relpath_check "/x" "/foo/bar/bat" '../../../x'
  relpath_check "/" "/" '.'
  relpath_check "/a" "/a" '.'
  relpath_check "/a/b" "/a/b" '.'
)
end_test

begin_test "Strip copy"
(
  setup_test

  mkdir -p "${TESTDIR}/foo/dir1/dir12"
  mkdir -p "${TESTDIR}/foo/dir1/dir11"
  touch "${TESTDIR}/foo/dir1/file11"
  touch "${TESTDIR}/foo/dir1/file12"

  mkdir -p "${TESTDIR}/foo/dir1/dir_common"
  echo 111 > "${TESTDIR}/foo/dir1/file_common"
  touch "${TESTDIR}/foo/dir1/dir_common/filec1"

  mkdir -p "${TESTDIR}/foo/dir2/dir21"
  mkdir -p "${TESTDIR}/foo/dir2/dir22"
  touch "${TESTDIR}/foo/dir2/file21"

  mkdir -p "${TESTDIR}/foo/dir2/dir_common"
  mkdir -p "${TESTDIR}/foo/dir2/dir_common/dir2"
  echo 222 > "${TESTDIR}/foo/dir2/file_common"

  touch "${TESTDIR}/foo/file1"
  touch "${TESTDIR}/foo/file2"

  mkdir "${TESTDIR}/bar1"

  strip_copy "${TESTDIR}/foo" "${TESTDIR}/bar0a" 0
  pushd "${TESTDIR}/foo" &> /dev/null
  strip_copy . "${TESTDIR}/bar0b" 0
  strip_copy . "${TESTDIR}/bar1" 1
  popd  &> /dev/null
  strip_copy "${TESTDIR}/foo" "${TESTDIR}/bar2" 2

  # Verify no stripping works (level 0) and level 1 stripping
  for d in bar0a/foo bar0b/foo bar1; do
    [ -f "${TESTDIR}/${d}/file1" ]
    [ -f "${TESTDIR}/${d}/file2" ]

    [ -d "${TESTDIR}/${d}/dir1/dir11" ]
    [ -d "${TESTDIR}/${d}/dir1/dir12" ]
    [ -f "${TESTDIR}/${d}/dir1/file11" ]
    [ -f "${TESTDIR}/${d}/dir1/file12" ]

    [ -d "${TESTDIR}/${d}/dir2/dir21" ]
    [ -d "${TESTDIR}/${d}/dir2/dir22" ]
    [ -f "${TESTDIR}/${d}/dir2/file21" ]


    [ -f "${TESTDIR}/${d}/dir1/dir_common/filec1" ]
    [ -d "${TESTDIR}/${d}/dir2/dir_common/dir2" ]

    [ "$(cat "${TESTDIR}/${d}/dir1/file_common")" == "111" ]
    [ "$(cat "${TESTDIR}/${d}/dir2/file_common")" == "222" ]
  done

  # Verify Collision case at level 2
  [ -d "${TESTDIR}/bar2/dir11" ]
  [ -d "${TESTDIR}/bar2/dir12" ]
  [ -f "${TESTDIR}/bar2/file11" ]
  [ -f "${TESTDIR}/bar2/file12" ]

  [ -d "${TESTDIR}/bar2/dir21" ]
  [ -d "${TESTDIR}/bar2/dir22" ]
  [ -f "${TESTDIR}/bar2/file21" ]

  [ -f "${TESTDIR}/bar2/dir_common/filec1" ]
  [ -d "${TESTDIR}/bar2/dir_common/dir2" ]

  contents="$(cat "${TESTDIR}/bar2/file_common")"
  [ "${contents}" = "111" ] || [ "${contents}" = "222" ]
)
end_test