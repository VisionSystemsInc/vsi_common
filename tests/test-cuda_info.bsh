#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/aliases.bsh"
source "${VSI_COMMON_DIR}/linux/cuda_info.bsh"

device_query_string='deviceQuery Starting...

 CUDA Device Query (Runtime API) version (CUDART static linking)

Detected 3 CUDA Capable device(s)

Device 0: "TITAN X (Pascal)"
  CUDA Driver Version / Runtime Version          11.1 / 7.5
  CUDA Capability Major/Minor version number:    6.1
  Total amount of global memory:                 12196 MBytes (12788498432 bytes)
MapSMtoCores for SM 6.1 is undefined.  Default to use 128 Cores/SM
MapSMtoCores for SM 6.1 is undefined.  Default to use 128 Cores/SM
  (28) Multiprocessors, (128) CUDA Cores/MP:     3584 CUDA Cores
  GPU Max Clock rate:                            1531 MHz (1.53 GHz)
  Memory Clock rate:                             5005 Mhz
  Memory Bus Width:                              384-bit
  L2 Cache Size:                                 3145728 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)
  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  2048
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)
  Run time limit on kernels:                     No
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Device PCI Domain ID / Bus ID / location ID:   0 / 4 / 0
  Compute Mode:
     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >

Device 1: "TITAN X (Pascal)"
  CUDA Driver Version / Runtime Version          11.1 / 7.5
  CUDA Capability Major/Minor version number:    6.1
  Total amount of global memory:                 12196 MBytes (12788498432 bytes)
MapSMtoCores for SM 6.1 is undefined.  Default to use 128 Cores/SM
MapSMtoCores for SM 6.1 is undefined.  Default to use 128 Cores/SM
  (28) Multiprocessors, (128) CUDA Cores/MP:     3584 CUDA Cores
  GPU Max Clock rate:                            1531 MHz (1.53 GHz)
  Memory Clock rate:                             5005 Mhz
  Memory Bus Width:                              384-bit
  L2 Cache Size:                                 3145728 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)
  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  2048
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)
  Run time limit on kernels:                     No
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Device PCI Domain ID / Bus ID / location ID:   0 / 131 / 0
  Compute Mode:
     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >

Device 2: "Quadro K600"
  CUDA Driver Version / Runtime Version          11.1 / 7.5
  CUDA Capability Major/Minor version number:    3.0
  Total amount of global memory:                 982 MBytes (1029570560 bytes)
  ( 1) Multiprocessors, (192) CUDA Cores/MP:     192 CUDA Cores
  GPU Max Clock rate:                            876 MHz (0.88 GHz)
  Memory Clock rate:                             891 Mhz
  Memory Bus Width:                              128-bit
  L2 Cache Size:                                 262144 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)
  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  2048
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)
  Run time limit on kernels:                     Yes
  Integrated GPU sharing Host Memory:            No
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Device PCI Domain ID / Bus ID / location ID:   0 / 3 / 0
  Compute Mode:
     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >
> Peer access from TITAN X (Pascal) (GPU0) -> TITAN X (Pascal) (GPU1) : No
> Peer access from TITAN X (Pascal) (GPU0) -> Quadro K600 (GPU2) : No
> Peer access from TITAN X (Pascal) (GPU1) -> TITAN X (Pascal) (GPU0) : No
> Peer access from TITAN X (Pascal) (GPU1) -> Quadro K600 (GPU2) : No
> Peer access from Quadro K600 (GPU2) -> TITAN X (Pascal) (GPU0) : No
> Peer access from Quadro K600 (GPU2) -> TITAN X (Pascal) (GPU1) : No

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 11.1, CUDA Runtime Version = 7.5, NumDevs = 3, Device0 = TITAN X (Pascal), Device1 = TITAN X (Pascal), Device2 = Quadro K600
Result = PASS'

nvidia_smi_old='Wed Mar 17 20:15:45 2021
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 384.81                 Driver Version: 384.81                    |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  Tesla K80           Off  | 00000000:04:00.0 Off |                    0 |
| N/A   32C    P0    59W / 149W |      0MiB / 11439MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+'

nvidia_smi_new='Wed Mar 17 19:10:41 2021
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 455.45.01    Driver Version: 455.45.01    CUDA Version: 11.1     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Quadro K600         Off  | 00000000:03:00.0 Off |                  N/A |
| 25%   48C    P8    N/A /  N/A |    182MiB /   981MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+'

# ``nvidia-smi --query-gpu=gpu_name,compute_cap --format=csv,noheader``
nvidia_smi_query_string=$'TITAN X (Pascal), 6.1\nTITAN X (Pascal), 6.1\nNVIDIA GeForce GTX 1650 Ti, 7.5'

# ``wmic.exe PATH win32_VideoController GET AdapterCompatibility,Name /format:csv``
wmic_query_string=$'\r\r\nNode,AdapterCompatibility,Name\r\r\DUMMY,Intel Corporation,Intel(R) UHD Graphics\r\r\DUMMY,NVIDIA,NVIDIA GeForce GTX 1650 Ti\r\r'

nvidia_docker_gpu_info='
Driver version:          455.28
Supported CUDA version:  11.1

Device #0
  Model:         Quadro P600
  UUID:          GPU-d5023f30-5d7b-57b1-5dc2-012a1ade040a
  Path:          /dev/nvidia0
  Family:        Pascal
  Arch:          6.1
  Cores:         384
  Power:         N/A
  CPU Affinity:  NUMA node0
  PCI
    Bus ID:     0000:B5:00.0
    BAR1:       256 MiB
    Bandwidth:  15760 MB/s
  Memory
    ECC:        false
    Global:     1997 MiB
    Constant:   64 KiB
    Shared:     96 KiB
    L2 Cache:   512 KiB
    Bandwidth:  64160 MB/s
  Clocks
    Cores:        1620 MHz
    Memory:       2005 MHz
  P2P Available:  None

Device #1
  Model:         TITAN Xp
  UUID:          GPU-752e3f5a-ee57-13ea-aff9-4e785ce7a949
  Path:          /dev/nvidia1
  Family:        Pascal
  Arch:          6.1
  Cores:         3840
  Power:         250 W
  CPU Affinity:  NUMA node0
  PCI
    Bus ID:     0000:B6:00.0
    BAR1:       256 MiB
    Bandwidth:  15760 MB/s
  Memory
    ECC:        false
    Global:     12196 MiB
    Constant:   64 KiB
    Shared:     96 KiB
    L2 Cache:   3072 KiB
    Bandwidth:  547680 MB/s
  Clocks
    Cores:        1911 MHz
    Memory:       5705 MHz
  P2P Available:  None'

if ! command -v "${NVIDIA_SMI}" &> /dev/null || ! command -v "${DEVICE_QUERY-deviceQuery}" &> /dev/null; then
  skip_next_test
fi
begin_test "Cuda discover"
(
  setup_test

  discover_cuda_all

  (( ${#CUDA_CARD_FAMILIES[@]} > 0 ))
  (( ${#CUDA_CARD_ARCHES[@]} > 0 ))
  (( ${#CUDA_CARDS[@]} > 0 ))
  (( ${#CUDA_VERSIONS[@]} > 0 ))
)
end_test

begin_test "Cuda 7.5 test"
(
  setup_test

  # Setup
  CUDA_VERSION=7.5.01
  CUDA_CARD_ARCHES=(30 35 52 200)

  # Run code
  cuda_capabilities "${CUDA_VERSION}"
  suggested_architectures

  # Test it
  assert_array_values CUDA_ARCHES 20 30 32 35 37 50 52 53
  assert_array_values CUDA_CODES 20 21 30 32 35 37 50 52 53
  assert_str_eq "${CUDA_VERSION}" "7.5.01"
  assert_array_values CUDA_SUGGESTED_ARCHES 30 35 52
  assert_array_values CUDA_SUGGESTED_CODES 30 35 52
  assert_str_eq "$(cmake_cuda_flags)" "3.0 3.5 5.2 5.3+PTX"

  if [ "${OS-}" = "Windows_NT" ]; then
    assert_str_eq "${CUDA_MINIMAL_DRIVER_VERSION}" 353.66
  else
    assert_str_eq "${CUDA_MINIMAL_DRIVER_VERSION}" 352.31
  fi

  assert_unset CUDA_COMPATIBLE_DRIVER_VERSION
)
end_test

begin_test "Cuda 9 test"
(
  setup_test

  # Setup
  CUDA_VERSION=9.0.01
  CUDA_CARD_ARCHES=(37 52 70)

  # Run code
  cuda_capabilities "${CUDA_VERSION}"
  suggested_architectures

  # Test it
  assert_array_values CUDA_ARCHES 30 32 35 37 50 52 53 60 61 62 70
  assert_array_values CUDA_CODES 30 32 35 37 50 52 53 60 61 62 70
  assert_str_eq "${CUDA_VERSION}" "9.0.01"
  assert_array_values CUDA_SUGGESTED_ARCHES 37 52 70
  assert_array_values CUDA_SUGGESTED_CODES 37 52 70
  assert_str_eq "$(cmake_cuda_flags)" "3.7 5.2 7.0"

  # Test the future flag
  CUDA_SUGGESTED_PTX+=(${CUDA_SUGGESTED_PTX+"${CUDA_SUGGESTED_PTX[@]}"} "${CUDA_FORWARD_PTX}")
  assert_str_eq "$(cmake_cuda_flags)" "3.7 5.2 7.0 7.0+PTX"

  if [ "${OS-}" = "Windows_NT" ]; then
    assert_str_eq "${CUDA_MINIMAL_DRIVER_VERSION}" 385.54
  else
    assert_str_eq "${CUDA_MINIMAL_DRIVER_VERSION}" 384.81
  fi

  assert_unset CUDA_COMPATIBLE_DRIVER_VERSION
)
end_test

begin_test "Cuda 11.8 test"
(
  setup_test

  # Setup
  CUDA_VERSION=11.8.89
  CUDA_CARD_ARCHES=(37 52 70)

  # Run code
  cuda_capabilities "${CUDA_VERSION}"
  suggested_architectures

  # Test it
  assert_array_values CUDA_ARCHES 35 37 50 52 53 60 61 62 70 72 75 80 86 87 89 90
  assert_array_values CUDA_CODES 35 37 50 52 53 60 61 62 70 72 75 80 86 87 89 90
  assert_str_eq "${CUDA_VERSION}" "11.8.89"
  assert_array_values CUDA_SUGGESTED_ARCHES 37 52 70
  assert_array_values CUDA_SUGGESTED_CODES 37 52 70
  assert_str_eq "$(cmake_cuda_flags)" "3.7 5.2 7.0"

  # Test the future flag
  CUDA_SUGGESTED_PTX+=(${CUDA_SUGGESTED_PTX+"${CUDA_SUGGESTED_PTX[@]}"} "${CUDA_FORWARD_PTX}")
  assert_str_eq "$(cmake_cuda_flags)" "3.7 5.2 7.0 9.0+PTX"

  if [ "${OS-}" = "Windows_NT" ]; then
    assert_str_eq "${CUDA_MINIMAL_DRIVER_VERSION}" 522.06
    assert_str_eq "${CUDA_COMPATIBLE_DRIVER_VERSION}" 452.39
  else
    assert_str_eq "${CUDA_MINIMAL_DRIVER_VERSION}" 520.61.05
    assert_str_eq "${CUDA_COMPATIBLE_DRIVER_VERSION}" 450.80.02
  fi
)
end_test

if [[ ${OSTYPE} != darwin* ]]; then
 skip_next_test
fi
begin_test "No Cuda on Darwin"
(
  setup_test

  . "${VSI_COMMON_DIR}/linux/cuda_info.bsh"

  [ -z "${CUDA_ARCHES+set}" ]
  [ -z "${CUDA_CODES+set}" ]
  [ -z "${CUDA_SUGGESTED_ARCHES+set}" ]
  [ -z "${CUDA_SUGGESTED_CODES+set}" ]
  [ -z "${CUDA_SUGGESTED_PTX+set}" ]
  [ -z "${CUDA_VERSIONS+set}" ]
  [ -z "${CUDA_VERSION+set}" ]
  [ -z "${CUDA_FORWARD_PTX+set}" ]
)
end_test

begin_test "Use nvidia-smi to get cuda version"
(
  setup_test

  function nvidia-smi()
  {
    echo "${nvidia_smi_old}"
  }

  [ "$(nvidia_smi_cuda_version)" == "" ]

  function nvidiasmi2()
  {
    echo "${nvidia_smi_new}"
  }

  [ "$(NVIDIA_SMI=nvidiasmi2 nvidia_smi_cuda_version)" == "11.1" ]
)
end_test

begin_test "Use deviceQuery to get cuda version"
(
  setup_test

  function deviceQuery2()
  {
    echo "${device_query_string}"
  }

  function deviceQuery(){ return 1;}

  not device_query_cuda_capability

  DEVICE_QUERY=deviceQuery2 device_query_cuda_capability

  assert_array_values CUDA_CARD_ARCHES 61 61 30
  assert_array_values CUDA_CARDS "TITAN X (Pascal)" "TITAN X (Pascal)" "Quadro K600"
)
end_test

begin_test "Use nvidia-smi to get cuda capabilities"
(
  setup_test

  function nvidia-smi() { return 1; }
  not nvidia_smi_cuda_capability

  function nvidia-smi2()
  {
    echo "${nvidia_smi_query_string}"
  }
  NVIDIA_SMI=nvidia-smi2 nvidia_smi_cuda_capability
  assert_array_values CUDA_CARD_ARCHES 61 61 75
  assert_array_values CUDA_CARDS "TITAN X (Pascal)" "TITAN X (Pascal)" "NVIDIA GeForce GTX 1650 Ti"
)
end_test

begin_test "Use wmic to get cuda capabilities"
(
  setup_test

  function wmic.exe() { return 1; }
  not wmic_cuda_capability

  function wmic2()
  {
    echo "${wmic_query_string}"
  }
  WMIC=wmic2 wmic_cuda_capability
  assert_array_values CUDA_CARDS "NVIDIA GeForce GTX 1650 Ti"
)
end_test

begin_test "Use nvidia-docker plugin to get capabilities"
(
  setup_test

  function wget()
  {
    echo "${nvidia_docker_gpu_info}"

    echo "${@}" > "${TESTDIR}/args.txt"
  }

  nvidia_docker_plugin_cuda_capability

  assert_array_values CUDA_CARD_FAMILIES Pascal Pascal
  assert_array_values CUDA_CARD_ARCHES 61 61
  assert_array_values CUDA_CARDS "Quadro P600" "TITAN Xp"

  [[ $(cat "${TESTDIR}/args.txt") = http://localhost:3476/gpu/info* ]]

  NV_HOST=http://foo.bar:1234
  nvidia_docker_plugin_cuda_capability
  [[ $(cat "${TESTDIR}/args.txt") = http://foo.bar:1234/gpu/info* ]]
)
end_test

begin_test "Discover cuda versions"
(
  setup_test
  function nvcc(){ :;}
  function nvcc_version(){ :;}
  function version_txt_cuda_version(){ :;}
  function version_json_cuda_version(){ :;}
  function nvidia-smi(){ :;}

  function nvidia_smi_cuda_version(){ echo "11.2";}
  discover_cuda_versions
  [[ ${CUDA_VERSIONS[*]} = *11.2* ]] || false

  function nvcc_version(){ echo "10.2.3";}
  discover_cuda_versions
  [[ ${CUDA_VERSIONS[*]} = *10.2.3* ]] || false
)
end_test

begin_test "Cuda Arch to Cuda Family"
(
  setup_test

  CUDA_CARD_ARCHES=()
  cuda_arch_to_cuda_family
  assert_array_values CUDA_CARD_FAMILIES

  CUDA_CARD_ARCHES=(61)
  cuda_arch_to_cuda_family
  assert_array_values CUDA_CARD_FAMILIES Pascal

  CUDA_CARD_ARCHES=(61 30)
  cuda_arch_to_cuda_family
  assert_array_values CUDA_CARD_FAMILIES Pascal Kepler

  CUDA_CARD_ARCHES=(61 61 80)
  cuda_arch_to_cuda_family
  assert_array_values CUDA_CARD_FAMILIES Pascal Pascal Ampere
)
end_test

begin_test "Discover cuda info"
(
  setup_test

  NVIDIA_SMI=--error
  DEVICE_QUERY=--error

  function __nvidia_docker_is_running()
  {
    return 1
  }

  ans="nvidia-smi not available or does not have"
  [[ $(discover_cuda_info) = ${ans}* ]] || false

  function __nvidia_docker_is_running()
  {
    return 0
  }

  function nvidia_docker_plugin_cuda_capability()
  {
    echo 111
  }
  [ "$(discover_cuda_info)" = "111" ]

  unset DEVICE_QUERY
  function deviceQuery()
  {
    return
  }

  function device_query_cuda_capability()
  {
    return 1
  }

  [ "$(discover_cuda_info)" = "111" ]

  function device_query_cuda_capability()
  {
    echo "222"
    return 0
  }
  [ "$(discover_cuda_info)" = "222" ]
)
end_test
