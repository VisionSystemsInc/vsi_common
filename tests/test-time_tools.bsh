#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/linux/time_tools.bsh"

[[ ! $(date +%N) =~ ^[0-9]+$ ]] && skip_next_test
begin_test "get_time_seconds fractional seconds"
(
  setup_test
  time1="$(get_time_seconds)"
  sleep 0.4
  time2="$(get_time_seconds)"

  t_diff="$(echo "${time1}" "${time2}" | awk '{printf "%.0f\n", ($2-$1)*1000}')"
  [ "${t_diff}" -gt 390 ]
  # 8000 is a ridiculous value, but when using an emulator on a virtual machine
  # time delays can add up to a second or two. So basically 8000 serves as a
  # upper bound to make sure something didn't go wrong and it's in the billions
  # of milliseconds or something
  [ "${t_diff}" -lt 8000 ]
)
end_test

begin_test "get_time_seconds whole second"
(
  setup_test
  time1="$(get_time_seconds)"
  sleep 1
  time2="$(get_time_seconds)"

  t_diff="$(echo "${time1}" "${time2}" | awk '{printf "%.0f\n", ($2-$1)*1000}')"
  [ "${t_diff}" -gt 990 ]
  # 9000 is a ridiculous value, but when using an emulator on a virtual machine
  # time delays can add up to a second or two. So basically 9000 serves as a
  # upper bound to make sure something didn't go wrong and it's in the billions
  # of milliseconds or something
  [ "${t_diff}" -lt 9000 ]
)
end_test


[ "${OS-}" = "Windows_NT" ] && skip_next_test
command -v perl &> /dev/null || skip_next_test
begin_test "macOS timeout substitute"
(
  setup_test

  OSTYPE=darwin16
  . "${VSI_COMMON_DIR}/linux/time_tools.bsh"

  time1="$(get_time_seconds)"
  timeout 1 sleep 10 || [ ${?} -eq 142 ]
  time2="$(get_time_seconds)"

  t_diff="$(echo "${time1}" "${time2}" | awk '{printf "%.0f\n", ($2-$1)*1000}')"
  [ "${t_diff}" -gt 990 ]
  [ "${t_diff}" -lt 1500 ]
)
end_test

begin_test "tic toc"
(
  setup_test
  tic

  t_ns="$(toc_ns)"
  t_ns="${t_ns% ns}"
  t_ms="$(toc_ms)"
  t_ms="${t_ms% ms}"
  t_s="$(toc)"
  t_s="${t_s% s}"

  toc_ns
  [ "${toc_time}" -ge 0 ]
  [ "${toc_time}" -lt 1000000000 ]

  toc_ms
  [ "${toc_time}" -ge 0 ]
  [ "${toc_time}" -lt 1000 ]

  toc
  [ "${toc_time}" -ge 0 ]
  [ "${toc_time}" -le 1 ]

  # Pretend a second has passed
  _time0=$((_time0-1000000000))
  toc_ns
  [ "${toc_time}" -ge 1000000000 ]
  [ "${toc_time}" -lt 2000000000 ]

  toc_ms
  [ "${toc_time}" -ge 1000 ]
  [ "${toc_time}" -lt 2000 ]

  toc
  [ "${toc_time}" -ge 1 ]
  [ "${toc_time}" -le 2 ]

)
end_test