#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/docker_functions.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/just_functions.bsh"
source "${VSI_COMMON_DIR}/linux/elements.bsh"

setup()
{
  compose_file='version: "3.2"
services:
  nb:
    image: blah
    volumes:
    - /tmp:/mnt
    - test:/opt
# here is a comment
    # here is another
  foo: &foo_anchor
    image: bar
    volumes:
  bar:
    image: foo
volumes:
  test:'

  compose_file_long='version: "3.2"
services:
  nb:
    image: blah
    volumes:
    - /tmp:/mnt
    - source: /home/user/src
      target: /src
      type: bind
    - test:/opt
    - source: internal
      target: /src
      type: volume
    - target: /tmp2
      type: tmpfs
  foo: &foo_anchor
    image: bar
    volumes:
  bar:
    image: foo
volumes:
  test:'

  compose_file_hay="version: '3.2'
services:
  test_hay:
    image: alpine
    command: sh -c 'echo horse'
    network_mode: 'bridge'"

  track_touched_files
}

begin_test "Test DOCKER var"
(
  setup_test
  DRYRUN=echo
  DOCKER="DoCkEr"
  [ "$(Docker run test)" = "DoCkEr run --rm test" ]
)
end_test

begin_test "is_dir_and_not_exist"
(
  setup_test
  not is_dir_and_not_exist qwertyuiop
  not is_dir_and_not_exist /
  is_dir_and_not_exist "$(mktemp -d -u)"
)
end_test

begin_test "is_internal_docker_volume"
(
  setup_test

  is_internal_docker_volume test
  is_internal_docker_volume TEST
  is_internal_docker_volume 1test
  is_internal_docker_volume te-st
  is_internal_docker_volume is_internal_docker_volume
  not is_internal_docker_volume 'C:\test'
  not is_internal_docker_volume 'c:\test'
  not is_internal_docker_volume 'c:/test'
  not is_internal_docker_volume c
  not is_internal_docker_volume './test'
  not is_internal_docker_volume .test
  not is_internal_docker_volume '/test'
)
end_test

begin_test "docker_premkdir"
(
  setup_test

  docker_premkdir "${TESTDIR}"
  docker_premkdir internal_dir
  [ ! -e internal_dir ]

  touch "${TESTDIR}/premkfile"
  docker_premkdir "${TESTDIR}/premkfile"
  [ ! -d "${TESTDIR}/premkfile" ]
  [ -e "${TESTDIR}/premkfile" ]

  [ ! -d "${TESTDIR}/premkdir" ]
  docker_premkdir "${TESTDIR}/premkdir" 2>/dev/null
  [ -d "${TESTDIR}/premkdir" ]
)
end_test

begin_test "docker host dir"
(
  setup_test

  if [ "${OS-}" = "Windows_NT" ]; then
    [ "$(docker_host_dir /tmp)" = "$(cygpath -w /tmp)" ]
  else
    [ "$(docker_host_dir /tmp)" = "/tmp" ]
  fi
)
end_test

begin_test "Docker volume string parsing"
(
  setup_test

  host_paths=("."
              "/"
              "C:\\"
              "/foo/bar"
              "/foo/b  ar"
              "D:/foo/bar"
              "D:\\foo\\bar"
              "vl")

  docker_paths=("/test/this"
                "/te st/th  is"
                "C:\\"
                "z")
  test_volume_flags=(""
                     ":ro"
                     ":ro:z"
                     ":z:ro"
                     ":Z:rshared:rw:nocopy")

  if docker_parse_volume_string garbage; then
    return 1
  fi

  for host_path in "${host_paths[@]}"; do
    for docker_path in "${docker_paths[@]}"; do
      for test_volume_flag in "${test_volume_flags[@]}"; do
        docker_parse_volume_string "${host_path}:${docker_path}${test_volume_flag}"
        [ "${volume_host}" = "${host_path}" ]
        [ "${volume_docker}" = "${docker_path}" ]
        [ "${volume_flags}" = "${test_volume_flag}" ]
      done
    done
  done
)
end_test

begin_test "Sanitize Volumes"
(
  setup_test

  temp_dir="${TESTDIR}/sv"

  [ ! -e "${temp_dir}" ]

  if [ "${OS-notwindows}" = "Windows_NT" ]; then
    [ "$(docker_sanitize_volume ${temp_dir} 2>/dev/null)" = "$(cygpath -w "${temp_dir}"):/${temp_dir}" ]
    [ "$(docker_sanitize_volume ${temp_dir} /foo)" = "$(cygpath -w "${temp_dir}")://foo" ]
  else
    [ "$(docker_sanitize_volume ${temp_dir} 2>/dev/null)" = "${temp_dir}:${temp_dir}" ]
    [ "$(docker_sanitize_volume ${temp_dir} /bar)" = "${temp_dir}:/bar" ]
  fi

  [ -e "${temp_dir}" ]
)
end_test

begin_test "Parse docker args"
(
  setup_test

  # Normal case
  parse-docker --config=blah.json -D -v run -v /foo:/bar debian:9 bash
  assert_array_values docker_args --config=blah.json -D -v
  [ "${docker_command}" = "run" ]
  assert_array_values docker_command_args -v /foo:/bar debian:9 bash

  # Test all args that take an argument
  for arg in -H -l --config --context --host --log-level --tlscacert --tlscert --tlskey; do
    parse-docker "${arg}" foobar
    declare -p docker_args docker_command docker_command_args
    assert_array_values docker_args "${arg}" foobar
    [ "${docker_command-}" = "" ]
    assert_array_values docker_command_args

    # Test = notation
    parse-docker "${arg}=foobar"
    assert_array_values docker_args "${arg}=foobar"
    [ "${docker_command-}" = "" ]
    assert_array_values docker_command_args
  done

  # Test single letter combine notation too
  for arg in -H -l; do
    parse-docker "${arg}foobar"
    assert_array_values docker_args "${arg}foobar"
    [ "${docker_command-}" = "" ]
    assert_array_values docker_command_args
  done

  # Test all flags
  for arg in -v --version --tls -D --debug --tlsverify; do
    parse-docker "${arg}"
    assert_array_values docker_args "${arg}"
    [ "${docker_command-}" = "" ]
    assert_array_values docker_command_args
  done
)
end_test

begin_test "Docker command"
(
  setup_test
  export DRYRUN=print_command

  DOCKER_AUTOREMOVE=0
  a=("${DOCKER}" run -v '/test  this/:blah' 'debian:9')
  r="$(Docker run -v "/test  this/:blah" debian:9)"
  eval "r=($r)"
  cmp_elements_a a r
)
end_test

begin_test "DOCKER_AUTOREMOVE and DOCKER_EXTRA_*_ARGS"
(
  setup_test
  export DRYRUN=print_command

  a=("${DOCKER}" run --rm -v '/test  this/:blah' 'debian:9')
  r="$(Docker run -v "/test  this/:blah" debian:9)"
  eval "r=($r)"
  cmp_elements_a a r

  DOCKER_EXTRA_RUN_ARGS=('aaa' 'bbb')
  a=("${DOCKER}" run --rm aaa bbb -v '/test  this/:blah' 'debian:9')
  r="$(Docker run -v "/test  this/:blah" debian:9)"
  eval "r=($r)"
  cmp_elements_a a r
)
end_test

begin_test "DOCKER_EXTRA_ARGS"
(
  setup_test
  export DRYRUN=print_command

  DOCKER_EXTRA_BUILD_ARGS=('aaa' 'bbb')
  DOCKER_EXTRA_ARGS=(--config bl\ \ ah.json -l=debug -H 123)
  a=("${DOCKER}" --tls "${DOCKER_EXTRA_ARGS[@]}" build aaa bbb -v '/test  this/:blah' 'debian:9')
  r="$(Docker --tls build -v "/test  this/:blah" debian:9)"
  eval "r=($r)"
  cmp_elements_a a r
)
end_test

begin_test "Test DOCKER_COMPOSE var"
(
  setup_test
  DRYRUN=echo
  DOCKER_COMPOSE="DoCkEr-CoMpOsE"
  [ "$(JUSTFILE="${TESTDIR}/Justfile" Docker-compose run test)" = "DoCkEr-CoMpOsE run --rm test" ]
)
end_test

begin_test "docker compose parse volumes old"
(
  setup_test

  ans=(-v "/tmp:/mnt" -v "test:/opt")
  docker-compose-volumes-old nb <<< "${compose_file}"
  cmp_elements_a DOCKER_VOLUME_FLAGS ans

  ans=()
  docker-compose-volumes-old foo <<< "${compose_file}"
  cmp_elements_a DOCKER_VOLUME_FLAGS ans

  docker-compose-volumes-old bar <<< "${compose_file}"
  cmp_elements_a DOCKER_VOLUME_FLAGS ans

  docker-compose-volumes-old none <<< "${compose_file}"
  cmp_elements_a DOCKER_VOLUME_FLAGS ans
)
end_test

begin_test "parse docker compose volumes"
(
  setup_test

  ans=("S/tmp:/mnt"
       "Lsource: /home/user/src" "ltarget: /src" "ltype: bind"
       "Stest:/opt"
       "Lsource: internal" "ltarget: /src" "ltype: volume"
       "Ltarget: /tmp2" "ltype: tmpfs")
  parse-docker-compose-volumes nb <<< "${compose_file_long}"
  cmp_elements_a DOCKER_VOLUME_LINES ans

  ans=("S/tmp:/mnt"
       "Lsource: /home/user/src" "ltarget: /src" "ltype: bind"
       "Stest_prefix_test:/opt"
       "Lsource: test_prefix_internal" "ltarget: /src" "ltype: volume"
       "Ltarget: /tmp2" "ltype: tmpfs")
  parse-docker-compose-volumes nb test_prefix_ <<< "${compose_file_long}"
  cmp_elements_a DOCKER_VOLUME_LINES ans

  ans=()
  parse-docker-compose-volumes foo <<< "${compose_file_long}"
  cmp_elements_a DOCKER_VOLUME_LINES ans

  parse-docker-compose-volumes bar <<< "${compose_file_long}"
  cmp_elements_a DOCKER_VOLUME_LINES ans

  parse-docker-compose-volumes none <<< "${compose_file_long}"
  cmp_elements_a DOCKER_VOLUME_LINES ans
)
end_test

begin_test "docker compose volumes"
(
  setup_test

  DOCKER_VOLUME_LINES=("S/tmp:/mnt"
       "Lsource: /home/user/src" "ltarget: /src" "ltype: bind"
       "Stest:/opt"
       "Lsource: internal" "ltarget: /src" "ltype: volume"
       "Ltarget: /tmp2" "ltype: tmpfs")
  docker-compose-volumes
  sources=("/tmp" "/home/user/src" "test" "internal" "")
  targets=("/mnt" "/src" "/opt" "/src" "/tmp2")
  flags=("" "" "" "" "")
  formats=(short long short long long)
  assert_array_values DOCKER_VOLUME_SOURCES "${sources[@]}"
  assert_array_values DOCKER_VOLUME_TARGETS "${targets[@]}"
  assert_array_values DOCKER_VOLUME_FLAGS "${flags[@]}"
  assert_array_values DOCKER_VOLUME_FORMATS "${formats[@]}"

  DOCKER_VOLUME_LINES=("S/test1:/test2:ro"
                       "Stest3:/test4:Z"
                       "Lsource: internal"
                         "ltarget: /src"
                         "ltype: volume"
                         "lvolume:"
                         "l  nocopy: true")
  docker-compose-volumes
  sources=("/test1" "test3" "internal")
  targets=("/test2" "/test4" "/src")
  flags=(":ro" ":Z" $'volume:\n  nocopy: true')
  cmp_elements_a DOCKER_VOLUME_SOURCES sources
  cmp_elements_a DOCKER_VOLUME_TARGETS targets
  cmp_elements_a DOCKER_VOLUME_FLAGS flags

  DOCKER_VOLUME_LINES+=("S/test5:/test6:rw")
  docker-compose-volumes
  sources+=("/test5")
  targets+=("/test6")
  flags+=(":rw")
  cmp_elements_a DOCKER_VOLUME_SOURCES sources
  cmp_elements_a DOCKER_VOLUME_TARGETS targets
  cmp_elements_a DOCKER_VOLUME_FLAGS flags
)
end_test

begin_test "docker compose volumes with missing fields"
(
  setup_test
  sources=("/tmp" "/home/user/src" "test" "internal" "")
  targets=("/mnt" "/src" "/opt" "/src" "/tmp2")
  flags=(":ro" "" "" "" "")
  formats=(short long short long long)

  DOCKER_VOLUME_LINES_ORIG=("S/tmp:/mnt:ro"
       "Lsource: /home/user/src" "ltarget: /src" "ltype: bind"
       "Stest:/opt"
       "Lsource: internal" "ltarget: /src" "ltype: volume"
       "Ltarget: /tmp2" "ltype: tmpfs")

  DOCKER_VOLUME_LINES=("${DOCKER_VOLUME_LINES_ORIG[@]}")
  unset DOCKER_VOLUME_LINES[2]
  docker-compose-volumes

  assert_array_values DOCKER_VOLUME_SOURCES "${sources[@]}"
  assert_array_values DOCKER_VOLUME_TARGETS "/mnt" "" "/opt" "/src" "/tmp2"
  assert_array_values DOCKER_VOLUME_FLAGS "${flags[@]}"
  assert_array_values DOCKER_VOLUME_FORMATS "${formats[@]}"

  DOCKER_VOLUME_LINES[1]='Ltarget: /src'
  docker-compose-volumes

  assert_array_values DOCKER_VOLUME_SOURCES "/tmp" "" "test" "internal" ""
  assert_array_values DOCKER_VOLUME_TARGETS "${targets[@]}"
  assert_array_values DOCKER_VOLUME_FLAGS "${flags[@]}"
  assert_array_values DOCKER_VOLUME_FORMATS "${formats[@]}"

)
end_test

begin_test "Parse docker-compose args"
(
  setup_test

  export JUSTFILE="${TESTDIR}/Justfile"

  parse-docker-compose run test
  assert_array_values docker_compose_args
  [ "${docker_compose_command}" = "run" ]
  assert_array_values docker_compose_command_args test

  # Test all args that take an argument
  for arg in -f -p -H -c --file --project-name --host --context --log-level \
             --tlscacert --tlscert --tlskey --project-directory --env-file; do
    parse-docker-compose "${arg}" foobar
    assert_array_values docker_compose_args "${arg}" foobar
    [ "${docker_compose_command-}" = "" ]
    assert_array_values docker_compose_command_args

    # Test = notation
    parse-docker-compose "${arg}=foobar"
    assert_array_values docker_compose_args "${arg}=foobar"
    [ "${docker_compose_command-}" = "" ]
    assert_array_values docker_compose_command_args
  done

  # Test single letter combine notation too
  for arg in -f -p -H -c; do
    parse-docker-compose "${arg}foobar"
    assert_array_values docker_compose_args "${arg}foobar"
    [ "${docker_compose_command-}" = "" ]
    assert_array_values docker_compose_command_args
  done

  # Test all flags
  for arg in --no-ansi -v --verbose --tls --skip-hostname-check --tlsverify --compatibility; do
    parse-docker-compose "${arg}"
    assert_array_values docker_compose_args "${arg}"
    [ "${docker_compose_command-}" = "" ]
    assert_array_values docker_compose_command_args
  done

  parse-docker-compose --no-ansi -H=blah.json --verbose run -v /foo:/bar debian bash
  assert_array_values docker_compose_args --no-ansi -H=blah.json --verbose
  [ "${docker_compose_command}" = "run" ]
  assert_array_values docker_compose_command_args -v /foo:/bar debian bash
)
end_test

begin_test "Parse docker compose project name"
(
  setup_test

  parse-docker-compose --project-name foo
  [ "${docker_compose_project_name}" = "foo" ]

  parse-docker-compose --project-name foo run alpine
  [ "${docker_compose_project_name}" = "foo" ]
  parse-docker-compose -p bar run alpine
  [ "${docker_compose_project_name}" = "bar" ]
  parse-docker-compose -p foobar run alpine
  [ "${docker_compose_project_name}" = "foobar" ]

  # Make sure -p/--project-name wins
  COMPOSE_PROJECT_NAME=foo parse-docker-compose -p bar run alpine
  [ "${docker_compose_project_name}" = "bar" ]
)
end_test

begin_test "Parse docker compose file args"
(
  setup_test
  set -E

  touch docker-compose2.yml

  # parse-docker-compose uses the location of the Justfile as the starting
  # point for looking for docker-compose files to prevent "different results
  # when running just from a different CWD"
  export JUSTFILE="${TESTDIR}/Justfile"

  parse-docker-compose run alpine
  # No docker-compose
  [ "${docker_compose_project_name}" = "default" ]
  [ "${#docker_compose_files[@]}" -eq 0 ]

  # Make sure COMPOSE_FILE works
  COMPOSE_FILE=docker-compose2.yml parse-docker-compose run alpine
  [ "${docker_compose_project_name}" = "$(basename "$(pwd)")" ]
  [ "${#docker_compose_files[@]}" -eq 1 ]
  [ "${docker_compose_files[0]}" = "docker-compose2.yml" ]

  # Make sure COMPOSE_FILE overrides docker-compose.yml
  touch docker-compose.yml
  COMPOSE_FILE=docker-compose2.yml parse-docker-compose run alpine
  [ "${docker_compose_project_name}" = "$(basename "$(pwd)")" ]
  [ "${#docker_compose_files[@]}" -eq 1 ]
  [ "${docker_compose_files[0]}" = "docker-compose2.yml" ]

  # Make sure docker-compose.yml works
  parse-docker-compose run alpine
  [ "${docker_compose_project_name}" = "$(basename "$(pwd)")" ]
  [ "${#docker_compose_files[@]}" -eq 1 ]
  [ "${docker_compose_files[0]}" = "${TESTDIR}/docker-compose.yml" ]

  # Make sure override works
  touch docker-compose.override.yaml
  parse-docker-compose run alpine
  [ "${docker_compose_project_name}" = "$(basename "$(pwd)")" ]
  [ "${#docker_compose_files[@]}" -eq 2 ]
  [ "${docker_compose_files[0]}" = "${TESTDIR}/docker-compose.yml" ]
  [ "${docker_compose_files[1]}" = "${TESTDIR}/docker-compose.override.yaml" ]

  # Make sure -f/--file wins
  COMPOSE_FILE=docker-compose2.yml parse-docker-compose -f test3.yml run alpine
  [ "${docker_compose_project_name}" = "$(basename "$(pwd)")" ]
  [ "${#docker_compose_files[@]}" -eq 1 ]
  [ "${docker_compose_files[0]}" = "test3.yml" ]

  parse-docker-compose -f test1.yml -ftest2 --file test3 --file=test4 run debian:9 bash
  [ "${#docker_compose_files[@]}" -eq 4 ]
)
end_test

begin_test "Compose IFS non-Windows"
(
  setup_test
  unset OS
  [ "$(compose_path_separator)" = ":" ]
)
end_test

begin_test "Compose IFS Windows"
(
  setup_test
  OS="Windows_NT"
  [ "$(compose_path_separator)" = ";" ]
)
end_test

begin_test "Custom IFS"
(
  setup_test
  COMPOSE_PATH_SEPARATOR='|'
  OS="Windows_NT"
  [ "$(compose_path_separator)" = "|" ]
  unset OS
  [ "$(compose_path_separator)" = "|" ]
)
end_test

begin_test "Docker-compose command"
(
  setup_test
  export DRYRUN=print_command

  export JUSTFILE="${TESTDIR}/Justfile"

  DOCKER_COMPOSE_AUTOREMOVE=0
  a=("${DOCKER_COMPOSE}" run -v '/test  this/:blah' 'debian:9')
  r="$(Docker-compose run -v "/test  this/:blah" debian:9)"
  eval "r=($r)"
  cmp_elements_a a r
)
end_test

begin_test "DOCKER_COMPOSE_AUTOREMOVE and DOCKER_COMPOSE_EXTRA_*_ARGS"
(
  setup_test
  export DRYRUN=print_command
  export JUSTFILE="${TESTDIR}/Justfile"

  a=("${DOCKER_COMPOSE}" run --rm -v '/test  this/:blah' 'debian')
  r="$(Docker-compose run -v "/test  this/:blah" debian)"
  eval "r=($r)"
  cmp_elements_a a r

  DOCKER_COMPOSE_EXTRA_RUN_ARGS=('aaa' 'bbb')
  a=("${DOCKER_COMPOSE}" run --rm aaa bbb -v '/test  this/:blah' 'debian')
  r="$(Docker-compose run -v "/test  this/:blah" debian)"
  eval "r=($r)"
  cmp_elements_a a r
)
end_test

begin_test "DOCKER_COMPOSE_EXTRA_ARGS"
(
  setup_test
  export DRYRUN=print_command
  export JUSTFILE="${TESTDIR}/Justfile"

  DOCKER_COMPOSE_EXTRA_BUILD_ARGS=('aaa' 'bbb')
  DOCKER_COMPOSE_EXTRA_ARGS=(--config bl\ \ ah.json -l=debug -H 123)
  a=("${DOCKER_COMPOSE}" --tls "${DOCKER_COMPOSE_EXTRA_ARGS[@]}" build aaa bbb -v '/test  this/:blah' 'debian')
  r="$(Docker-compose --tls build -v "/test  this/:blah" debian)"
  eval "r=($r)"
  cmp_elements_a a r
)
end_test

begin_test "docker-compose service names"
(
  setup_test
  service_names="$(docker_compose_service_names <(echo "${compose_file}"))"

  ans="nb foo bar"
  cmp_elements service_names ans
)
end_test

begin_test "docker-compose service names2"
(
  setup_test
  service_names="$(docker_compose_service_names2 <(echo "${compose_file}"))"
  ans="nb foo bar"
  cmp_elements service_names ans

  service_names="$(docker_compose_service_names2 "$(yarp <<< "${compose_file}" )")"
  cmp_elements service_names ans
)
end_test

begin_test "Docker compose sanitize project names"
(
  setup_test

  [ "$(docker_compose_sanitize_project_name 'project/A@1.1_2')" = "a112" ]
  [ "$(docker_compose_sanitize_project_name 'project/A@1.1_2' 'auser:7')" = "auser7a112" ]
  [ "$(docker_compose_sanitize_project_name '' 'a-user:7')" = "auser7" ]
)
end_test

begin_test "Just docker compose override files"
(
  setup_test
  JUST_PROJECT_PREFIX=TEST

  ans="version: '3.2'
services:
  test_hay:"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="
    environment:
      - JUST_HOST_WINDOWS=1"
  fi

  echo "${compose_file_hay}" > "${TESTDIR}/dc.yml"
  DRYRUN=echo

  override_file="$(Just-docker-compose -f "${TESTDIR}/dc.yml" run test_hay|tail -n1)"
  override_file="${override_file#rm *}"
  ttouch "${override_file}"
  [ "$(cat "${override_file}")" = "${ans}" ]

  # Test when two docker-compose files reference the same service
  echo "${compose_file_hay}" > "${TESTDIR}/dc2.yml"
  override_file="$(Just-docker-compose -f "${TESTDIR}/dc.yml" -f "${TESTDIR}/dc2.yml" run test_hay|tail -n1)"
  override_file="${override_file#rm *}"
  ttouch "${override_file}"
  [ "$(cat "${override_file}")" = "${ans}" ]
)
end_test

begin_required_fail_test "Just docker compose required project prefix"
(
  setup_test
  set +eu
  unset JUST_PROJECT_PREFIX
  echo "${compose_file_hay}" > "${TESTDIR}/dc.yml"
  set -eu
  begin_fail_zone
  Just-docker-compose -f "${TESTDIR}/dc.yml" run test_hay > /dev/null
)
end_test

begin_test "is_readonly_docker_volume"
(
  setup_test

  is_readonly_docker_volume ":ro"
  is_readonly_docker_volume ":ro:"
  not is_readonly_docker_volume ":row"
  not is_readonly_docker_volume ":row:"
)
end_test

begin_test "is_readonly_docker_compose_long_volume"
(
  setup_test

  is_readonly_docker_compose_long_volume "read_only: true"
  not is_readonly_docker_compose_long_volume "read_only: false"
  not is_readonly_docker_compose_long_volume ""
  s=$'bind:\npropagation: private\nread_only: true'
  is_readonly_docker_compose_long_volume "${s}"
  s=$'bind:\npropagation: private\nread_only: true'
  is_readonly_docker_compose_long_volume "${s}"
  s=$'bind:\npropagation: private\nread_only: true\nvolume:\nnocopy: true'
  is_readonly_docker_compose_long_volume "${s}"
  s=$'read_only: true\nvolume:\nnocopy: true'
)
end_test

begin_test "docker cp image"
(
  setup_test

  function docker()
  {
    if [ "${1}" = "create" ]; then
      echo "mock_container_name_$2"
    else
      echo "mock_docker: ${@}"
    fi
  }

  [ "$(docker_cp_image my_image:foo /bar/test.txt ${TESTDIR}/dst.txt)" = \
    "mock_docker: cp mock_container_name_my_image:foo:/bar/test.txt ${TESTDIR}/dst.txt
mock_docker: rm mock_container_name_my_image:foo" ]

  [ "$(docker_cp_image -L -a my_image:foo /bar/test.txt ${TESTDIR}/dst.txt)" = \
    "mock_docker: cp -L -a mock_container_name_my_image:foo:/bar/test.txt ${TESTDIR}/dst.txt
mock_docker: rm mock_container_name_my_image:foo" ]
)
end_test

begin_test "docker-compose list internal volumes"
(
  setup_test
  docker-compose-list-internal-volumes <<< "${compose_file}"
  assert_array_values DOCKER_INTERNAL_VOLUMES test

  unset DOCKER_INTERNAL_VOLUMES
  docker-compose-list-internal-volumes <<< "${compose_file_long}"
  assert_array_values DOCKER_INTERNAL_VOLUMES test

  # None case
  unset DOCKER_INTERNAL_VOLUMES
  docker-compose-list-internal-volumes <<< ""
  assert_array_values DOCKER_INTERNAL_VOLUMES

  # Multiple case

  file_test="volumes:
  test1:
  test2:
    stuff:
  test3:"

  unset DOCKER_INTERNAL_VOLUMES
  docker-compose-list-internal-volumes <<< "${file_test}"
  declare -p DOCKER_INTERNAL_VOLUMES
  assert_array_values DOCKER_INTERNAL_VOLUMES test1 test2 test3

  file_test+="
notvolumes:
  test4:"
  unset DOCKER_INTERNAL_VOLUMES
  docker-compose-list-internal-volumes <<< "${file_test}"
  declare -p DOCKER_INTERNAL_VOLUMES
  assert_array_values DOCKER_INTERNAL_VOLUMES test1 test2 test3
)
end_test

begin_test "get docker-compose version"
(
  setup_test

  echo "version: '2.3'" > file1
  echo "noversion:" > file2
  echo "version: \"3.5\"" > file3

  [ "$(get_docker_compose_version file1)" = "2.3" ]
  [ "$(get_docker_compose_version file2)" = "" ]
  [ "$(get_docker_compose_version file3)" = "3.5" ]

  [ "$(get_docker_compose_version file2 file1)" = "2.3" ]
  [ "$(get_docker_compose_version file3 file1)" = "3.5" ]
)
end_test

begin_test "get docker stage names"
(
  setup_test

  cat - << EOF > Dockerfile
FROM foo
EOF
  stage_names=($(get_docker_stage_names Dockerfile))
  [ "${stage_names[*]-}" = "" ]

  cat - << EOF > Dockerfile
FROM image1 as foo
FROM foo
EOF
  stage_names=($(get_docker_stage_names Dockerfile))
  [ "${stage_names[*]}" = "foo" ]

  cat - << EOF > Dockerfile
FROM image1 as foo
FROM image2 as bar
FROM foo
EOF
  stage_names=($(get_docker_stage_names Dockerfile))
  [ "${stage_names[*]}" = "foo bar" ]

  # Comments and spaces
  cat - << EOF > Dockerfile
FROM image1 as foo
# FROM image2 as bar
 # FROM image3 as car
 FROM foo
EOF
  stage_names=($(get_docker_stage_names Dockerfile))
  [ "${stage_names[*]}" = "foo" ]
)
end_test

begin_test "Get dockerfile name from compose file"
(
  setup_test

    cat - << EOF > compose.yml
version: '2.2'
services:
  foo:
    build: boo
EOF
  [ "$(get_dockerfile_from_compose /some/dir/file.yml foo "$(yarp < compose.yml)")" = "/some/dir/boo/Dockerfile" ]

    cat - << EOF > compose.yml
version: '2.2'
services:
  foo:
    build:
      context: /bar
EOF
  [ "$(get_dockerfile_from_compose "${TESTDIR}/compose.yml" foo)" = "/bar/Dockerfile" ]

    cat - << EOF > compose.yml
version: '2.2'
services:
  foo:
    build:
      dockerfile: some.Dockerfile
      contest: .
EOF

  [ "$(get_dockerfile_from_compose compose.yml foo)" = "./some.Dockerfile" ]
  [ "$(get_dockerfile_from_compose "${TESTDIR}/compose.yml" foo)" = "${TESTDIR}/some.Dockerfile" ]
)
end_test