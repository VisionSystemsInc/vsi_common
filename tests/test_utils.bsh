#!/usr/bin/env false bash

#*# tests/test_utils

source "${VSI_COMMON_DIR}/linux/string_tools.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#**
# ==============
# Test Utilities
# ==============
#
# .. default-domain:: bash
#
# .. file:: test_utils.bsh
#
# Utilities to help in test verifications
#**

ERR_C=$'\x1b[1;31m'
NC=$'\x1b[0m'
INFO_C=$'\x1b[33m'
HIGHLIGHT_C=$'\x1b[41;30m'

#**
# .. function:: assert_array_values
#
# :Arguments: * ``$1`` - Array name
#             * [``$2``...] - Array values
# :Output: Return Value:
#
#             * ``0`` - Equal
#             * ``1`` - A value is not the same
#             * ``2`` - The array had less values than specified
#             * ``3`` - The array had more values than specified
#
# Check array values for unit tests
#
# .. seealso::
#   :func:`elements.bsh cmp_elements_a`
#**
function assert_array_values()
{
  set +xv

  local assert_array_values_name="${1}[@]"
  local assert_array_values_values=(${!assert_array_values_name+"${!assert_array_values_name}"})
  assert_array_values_name="${1}"
  local assert_array_values_index
  shift 1

  for assert_array_values_index in ${assert_array_values_values[@]+"${!assert_array_values_values[@]}"}; do
    if [ "${#}" -eq "0" ]; then
      echo "${ERR_C}ASSERT ERROR: Arrays differ${NC}" >&2
      echo "Expected: ${assert_array_values_name}=(${assert_array_values_values[@]+${assert_array_values_values[@]}})" >&2
      echo "Array had $((${#assert_array_values_values[@]} - assert_array_values_index)) too many values" >&2
      local Reference=("${assert_array_values_values[@]:0:assert_array_values_index}" ${@+"${@}"})
      declare -p Reference >&2
      echo -n "Actual: " >&2
      declare -p "${assert_array_values_name}" >&2
      set -xv
      return 3
    fi
    if [ "${assert_array_values_values[assert_array_values_index]}" != "${1}" ]; then
      local assert_array_values_indicies
      eval 'assert_array_values_indicies=("${!'${assert_array_values_name}'[@]}")'

      echo "${ERR_C}ASSERT ERROR: Arrays differ${NC}" >&2
      echo "Expected: Element ${assert_array_values_index} (${assert_array_values_name}[${assert_array_values_indicies[assert_array_values_index]}]) is different:" >&2
      echo "${assert_array_values_values[assert_array_values_index]} != ${1}" >&2
      local Reference=("${assert_array_values_values[@]:0:assert_array_values_index}" ${@+"${@}"})
      declare -p Reference >&2
      echo -n "Actual: " >&2
      declare -p "${assert_array_values_name}" >&2
      set -xv
      return 1
    fi
    shift 1
  done
  if [ "${#}" -eq "0" ]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR: Arrays differ${NC}" >&2
    echo "Expected: ${assert_array_values_name}=(${assert_array_values_values[@]+${assert_array_values_values[@]}})" >&2
    echo "Array had ${#} too few values" >&2
      local Reference=("${assert_array_values_values[@]:0:assert_array_values_index}" ${@+"${@}"})
      declare -p Reference >&2
    echo -n "Actual: " >&2
    declare -p "${assert_array_values_name}" >&2
    set -xv
    return 2
  fi
}

#**
# .. function:: assert_array_regex_values
#
# Regex version of :func:`assert_array_values`.
#
# Only the values (RHS) may contain a bash regex.
#**
function assert_array_regex_values()
{
  set +xv
  local assert_array_values_indicies
  local assert_array_values_name="${1}[@]"
  local assert_array_values_values=(${!assert_array_values_name+"${!assert_array_values_name}"})
  assert_array_values_name="${1}"
  eval 'assert_array_values_indicies=("${!'"${1}"'[@]}")'
  local assert_array_values_index
  shift 1

  for assert_array_values_index in ${assert_array_values_values[@]+"${!assert_array_values_values[@]}"}; do
    if [ "${#}" -eq "0" ]; then
      echo "${ERR_C}ASSERT ERROR: Arrays differ${NC}" >&2
      echo "Expected: ${assert_array_values_name}=(${assert_array_values_values[@]+${assert_array_values_values[@]}})" >&2
      echo "Array had $((${#assert_array_values_values[@]} - assert_array_values_index)) too many values" >&2
      local Reference=("${assert_array_values_values[@]:0:assert_array_values_index}" ${@+"${@}"})
      declare -p Reference >&2
      echo -n "Actual: " >&2
      declare -p "${assert_array_values_name}" >&2
      set -xv
      return 3
    fi
    # See bash_bug_regex_empty_string for why ${1:-^} instead of $1
    if [[ ! ${assert_array_values_values[assert_array_values_index]} =~ ${1:-^} ]]; then
      echo "${ERR_C}ASSERT ERROR: Arrays differ${NC}" >&2
      echo "Expected: Element ${assert_array_values_index} (${assert_array_values_name}[${assert_array_values_indicies[assert_array_values_index]}]) is different:" >&2
      echo "${assert_array_values_values[assert_array_values_index]} !=~ ${1}" >&2
      local Reference=("${assert_array_values_values[@]:0:assert_array_values_index}" ${@+"${@}"})
      declare -p Reference >&2
      echo -n "Actual: " >&2
      declare -p "${assert_array_values_name}" >&2
      set -xv
      return 1
    fi
    shift 1
  done
  if [ "${#}" -eq "0" ]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR: Arrays differ${NC}" >&2
    echo "Expected: ${assert_array_values_name}=(${assert_array_values_values[@]+${assert_array_values_values[@]}})" >&2
    echo "Array had ${#} too few values" >&2
    local Reference=("${assert_array_values_values[@]:0:assert_array_values_index}" ${@+"${@}"})
    declare -p Reference >&2
    echo -n "Actual: " >&2
    declare -p "${assert_array_values_name}" >&2
    set -xv
    return 2
  fi
}

#**
# .. function:: assert_array_contiguous
#
# Check array values are contiguous for unit tests
#
# :Arguments: ``$1`` - Array name to test
# :Output: Return Value:
#
#             * ``0`` - Array is contiguous
#             * ``1`` - Array is not contiguous
#
# .. note::
#   Uses eval
#**
function assert_array_contiguous()
{
  set +xv
  eval 'local assert_array_index_contiguous_indicies=("${!'"${1}"'[@]}")'
  # Returns the result of assert_array_values
  assert_array_values assert_array_index_contiguous_indicies $(seq 0 1 "$((${#assert_array_index_contiguous_indicies[@]}-1))") # noquotes
  # assert_array_values will set -xv
}

#**
# .. function:: assert_array_eq
#
# Checks if two arrays are identical, including their indicies. Also works on associative arrays.
#
# :Arguments: * ``$1`` - Array name
#             * ``$2`` - Second array name
# :Output: Return Value:
#
#             *  Same return values as :func:`assert_array_values`
#**
function assert_array_eq()
{
  set +xv
  eval 'local __assert_array_eq_1=("${!'"${1}"'[@]}")'
  eval 'local __assert_array_eq_2=("${!'"${2}"'[@]}")'

  assert_array_values __assert_array_eq_1 ${__assert_array_eq_2[@]+"${__assert_array_eq_2[@]}"} || return ${?}
  set +xv
  __assert_array_eq_2="${2}[@]"
  assert_array_values "${1}" ${!__assert_array_eq_2+"${!__assert_array_eq_2}"}
}

#**
# .. function:: assert_str_eq
#
# Checks if two strings are equal
#
# :Arguments: * ``$1`` - First string
#             * ``$2`` - Second string
#
# On failure, will print out the strings, coloring from the first diff to the last diff, to emphasize where the string is different.
#**
function assert_str_eq
{
  set +xv
  if [ "${1}" != "${2}" ]; then
    local -i start=0
    local -i i
    local -i j

    echo "${ERR_C}ASSERT ERROR: Strings differ${NC}" >&2
    echo         "============================" >&2

    for ((i=0; i<${#1}; ++i)); do
      if [ "${1:i:1}" != "${2:i:1}" ]; then
        break
      fi
    done
    start="${i}"

    # This for loop matches the same notation as the previous for loop, but is
    # numerically identical to the following for loop, that is just cleaner
    # for ((i=${#1}-1, j=${#2}-1; i>start-1 && j>start-1; --i, --j)); do
    #   if [ "${1:i:1}" != "${2:j:1}" ]; then
    #     break
    #   fi
    # done
    # i+=1
    # j+=1

    for ((i=${#1}, j=${#2}; i>start && j>start; --i, --j)); do
      if [ "${1:i-1:1}" != "${2:j-1:1}" ]; then
        break
      fi
    done

    echo "${1::start}${HIGHLIGHT_C}${1:start:i-start}${NC}${1:i}" >&2
    echo "---------------------" >&2
    echo "${2::start}${HIGHLIGHT_C}${2:start:j-start}${NC}${2:j}" >&2
    set -xv
    return 1
  fi
  set -xv
}

#**
# .. function:: assert_ansi_str_eq
#
# Version os :func:`assert_str_eq` where ANSI codes are stripped, and thus don't count against a string matching
#
# :Arguments:
#**
function assert_ansi_str_eq()
{
  set +xv
  local str1="$(strip_ansi "${1}")"
  local str2="$(strip_ansi "${2}")"

  assert_str_eq "${str1}" "${str2}"
  # assert_str_eq will set -xv
  return ${?}
}

#**
# .. function:: assert_test
#
# Asserts that a test is true. The only real advantage to using this is a formatted error output.
#
# :Arguments: ``$1``... - Arguments to ``test`` aka ``[ ]``
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   assert_test 4 = 4
#   not assert_test 4 = 5
#   assert_test -z "${EMPTY_STRING}"
#   assert_test -d "${some dir}"
#**
function assert_test()
{
  set +xv
  if test "${@}"; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR: test${NC}" >&2
    echo         "==================" >&2
    echo "${INFO_C}FAILED:${NC} [ ${*} ]" >&2
    set -xv
    return 1
  fi
}

#**
# .. function:: assert_sub_str
#
# Asserts that a string is contained in another string.
#
# :Arguments: * ``$1`` - The string
#             * ``$2`` - The substring being checked for
#
# Equivalently checking ``[[ ${str} = *"${substr}"* ]] || false``, with formatted error output
#**
function assert_sub_str()
{
  set +xv
  local str="${1}"
  local inner="${2}"

  if [[ ${str} = *"${inner}"* ]]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR:${NC}" >&2
    echo         "=============" >&2
    echo "${str}" >&2
    echo "${INFO_C}does not contain the substring:${NC}" >&2
    echo "${inner}" >&2
    set -xv
    return 1
  fi
}

#**
# .. function:: assert_starts_with
#
# Asserts that a string starts with the second string
#
# :Arguments: * ``$1`` - The string
#             * ``$2`` - The prefix being checked for
#
# Equivalently checking ``[[ ${str} = "${substr}"* ]] || false``, with formatted error output
#**
function assert_starts_with()
{
  set +xv
  local str="${1}"
  local start="${2}"

  if [[ ${str} = "${start}"* ]]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR:${NC}" >&2
    echo         "=============" >&2
    echo "${str}" >&2
    echo "${INFO_C}does not start with:${NC}" >&2
    echo "${start}" >&2
    set -xv
    return 1
  fi
}

#**
# .. function:: assert_ends_with
#
# Asserts that a string ends with the second string
#
# :Arguments: * ``$1`` - The string
#             * ``$2`` - The suffix being checked for
#
# Equivalently checking ``[[ ${str} = *"${substr}" ]] || false``, with formatted error output
#**
function assert_ends_with()
{
  set +xv
  local str="${1}"
  local end="${2}"

  if [[ ${str} = *"${end}" ]]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR:${NC}" >&2
    echo         "=============" >&2
    echo "${str}" >&2
    echo "${INFO_C}does not end with:${NC}" >&2
    echo "${end}" >&2
    set -xv
    return 1
  fi
}

#**
# .. function:: assert_regex_eq
#
# Asserts that a string matches a regex
#
# :Arguments: * ``$1`` - The string being checked
#             * ``$2`` - A regex string
#
# Equivalently checking ``[[ ${str} =~ ${substr} ]] || false``, with formatted error output
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   assert_regex_eq "foo" 'o'
#   not assert_regex_eq "foo" '^o'
#   assert_regex_eq "foo" 'o$'
#   assert_regex_eq "foo" '^foo$'
#   assert_regex_eq 'a[]' '^a\[\]$'
#**
function assert_regex_eq()
{
  set +xv
  if [[ ${1} =~ ${2} ]]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR: regex eq${NC}" >&2
    echo         "======================" >&2
    echo "${INFO_C}FAILED:${NC} [[ ${1} =~ ${2} ]]" >&2
    set -xv
    return 1
  fi
}

#**
# .. function:: assert_set
#
# Asserts that a variable is set
#
# :Arguments: * ``$1`` - The variable name being checked
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   assert_unset a
#   a=15
#   assert_set a
#   a =(11 22 33)
#   assert_set a[0]
#   assert_set a[@]
#   unset a[0]
#   assert_unset a[0]
#   assert_set a[@]
#
# .. note::
#   Checking ``assert_set a`` on an array is the same as ``a[0]``. So you should use ``a[@]`` instead
#**
function assert_set()
{
  set +xv
  if [ " ""${!1+set}" != " " ]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR: set${NC}" >&2
    echo         "=================" >&2
    echo "${INFO_C}FAILED:${NC} ${1} is not set" >&2
    set -xv
    return 1
  fi
}

#**
# .. function:: assert_unset
#
# Asserts that a variable is unset
#
# :Arguments: * ``$1`` - The variable name being checked
#
# .. note::
#   On bash 3.2, an empty variable is indistinguishable from a null variable, so ``assert_unset`` will return true when it is null.
#**
function assert_unset()
{
  set +xv
  # Handled [@] notation
  if [ " ""${!1+set}" = " " ]; then
    set -xv
    return 0
  # Even though this will allow for "assert_set" and "assert_unset" to be true
  # at the same time, it's for the sake of bash 3.2 compatibility, and will
  # only behave that way on bash 3.2
  elif [ "${bash_bug_unassigned_variable_set_to_null}" = "0" -a "${!1-}" = "" ]; then
    set -xv
    return 0
  else
    echo "${ERR_C}ASSERT ERROR: unset${NC}" >&2
    echo         "===================" >&2
    echo "${INFO_C}FAILED:${NC} ${1} is set" >&2
    set -xv
    return 1
  fi
}

#**
# .. function:: not
#
# :Arguments: ``$1``... - Command and arguments
# :Output: Return value
#
#     * ``0`` - On non-zero return code evaluation
#     * ``1`` - On zero return code
#
# Returns true only when the command fails
#
# Since ``!`` is ignored by "set -e", use :func:`not` instead. This is just a helper to make unittests look nice and not need extra ifs everywhere
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   # No good, always passes, even if ! true. If this is the last line of a
#   # function, you will be fooled into thinking it is working because
#   # functions return the return value of the last line, by default.
#   # The "!" does set a non-zero return value, but does not trigger set -e,
#   # similar to [[ ]] in older versions of bash.
#   ! false
#
#   # good
#   not false
#   # equivalent to
#   if ! false; then
#     true
#   else
#     false
#   fi
#
# .. rubric:: Bugs
#
# Complex statements do not work, e.g. [, [[ and ((, etc...
#   For example, you should use
#
# .. code-block:: bash
#
#     [ ! -e "/test" ]
#
# |  instead of
#
# .. code-block:: bash
#
#     not [ -e "/test" ]
#
# |  In cases where this is not easily worked around, you can use
#
# .. code-block:: bash
#
#     not_s '[ -e "/test" ]'
#
# .. seealso::
#   :func:`not_s`
#**
not()
{
  local cmd="${1}"
  shift 1
  if "${cmd}" ${@+"${@}"}; then
    return 1
  else
    return 0
  fi
}

#**
# .. function:: not_s
#
# :Arguments: ``$1`` - Command/statement in a single string
# :Output: Return Value:
#
#             * ``0`` - On non-zero return code evaluation
#             * ``1`` - On zero return code
#
# Returns true only when the string version of command fails
#
# Since ``!`` is ignored by "set -e", use :func:`not` instead. This is just a helper to make unittests look nice and not need extra ifs everywhere.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   x=test
#   y=t.st
#   not_s '[[ $x =~ $y ]]' # <-- notice single quotes.
#
#   # Note, in this simple case, it can be replaced with
#   not assert_regex_eq "${x}" "${y}"
#   # But not all cases can be easily simplified, and will require not_s
#
# While the single quotes aren't necessary, they handle the more complicated situations more easily.
#
# .. note::
#   Uses eval
#
# .. seealso::
#   :func:`not`
#**
not_s()
{
  eval "if ${1}; then
          return 1
        else
          return 0
        fi"
}