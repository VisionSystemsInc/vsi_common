#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/elements.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

begin_test "Dynamic set array"
(
  setup_test

  dynamic_set_a z
  assert_array_values z
  not assert_array_values z 111 2> /dev/null

  # Set up non-contiguous array
  y=(12 101 15 23 49)
  unset y[1] # Delete the 1

  # Run code
  dynamic_set_a __i "${y[@]}"
  assert_array_values __i 12 15 23 49
  not assert_array_values __i 2> /dev/null
  assert_array_contiguous __i
  not assert_array_contiguous y 2> /dev/null

  # Spaces
  x=(" one " " t w  o  ")
  y=()
  dynamic_set_a y "${x[@]}"
  [ "${y[0]}" = " one " ]
  [ "${y[1]}" = " t w  o  " ]

  # Verify the 33 is removed
  z=(11 22 33)
  dynamic_set_a z aa bb
  assert_array_values z aa bb
  assert_array_contiguous z

  # unset variable
  dynamic_set_a foo
  [ "${#foo[@]}" = "0" ]

  # set to empty string
  dynamic_set_a bar ''
  assert_array_values bar ""
  assert_array_contiguous bar
)
end_test

if [ "${bash_feature_declare_name_reffing}" != "0" ]; then
  skip_next_test
fi
begin_test "Dynamic set array with name ref"
(
  setup_test

  declare -n x=y
  y=(11 "2  2")
  dynamic_set_a z "${x[@]}"
  assert_array_eq z y

  empty=()
  unset y
  # This test became more pointless, not sure what I'm testing that an broken
  # name ref change trigger nounset? That test doesn't belong here. That an empty
  # array works? That's nothing to do with nameref. Oh well. The "${x[@]+" is only
  # need in bash 4.3
  dynamic_set_a z ${x[@]+"${x[@]}"}
  assert_array_eq z empty
)
end_test

begin_test "Dynamic set array with special characters"
(
  setup_test

  # Special characters
  dynamic_set_a foo " 1 " $' 3 \t 3 ' $'2 \n - \n 2 ' 'ok\3doe'
  assert_array_values foo " 1 " $' 3 \t 3 ' $'2 \n - \n 2 ' 'ok\3doe'
  assert_array_contiguous z
)
end_test

begin_test "Dynamic set variable"
(
  setup_test

  # Normal value
  unset z
  dynamic_set z
  [ -n "${z+set}" ]
  not compgen -e -X '!z' # not exported

  # Empty string value
  declare -p z
  unset z
  dynamic_set z ''
  declare -p z
  [ -n "${z+set}" ]
  not compgen -e -X '!z' # not exported

  # Set to a value
  unset z
  dynamic_set z $' f\\o\\\\o \n bar \t'
  [ "${z}" = $' f\\o\\\\o \n bar \t' ]
  not compgen -e -X '!z'

  # export but not set test
  export foobar1
  dynamic_set foobar1 "ok"
  [ "${foobar1}" = "ok" ]
  compgen -e -X '!foobar1' > /dev/null

  # normal exported variable
  export foobar2=1
  dynamic_set foobar2 "ok"
  [ "${foobar2}" = "ok" ]
  compgen -e -X '!foobar2' > /dev/null

  # Local tests
  function a()
  {
    local b
    dynamic_set b 4

    # shadow globa variables
    local y
    dynamic_set y 1
    [ "${y}" = "1" ]

    # A local exported variable
    local x
    export x
    dynamic_set x 2
    [ "${x}" = "2" ]
    compgen -e -X '!x' > /dev/null

    dynamic_set z 3
  }

  unset z b
  x=0
  y=0
  a
  [ "${x}" = "0" ]
  [ "${y}" = "0" ]
  [ "${z}" = "3" ]
  not declare -p b 2> /dev/null
)
end_test

begin_test "Clear Array"
(
  setup_test
  function foo()
  {
    local x=(12 101 15 23 49) # global being shadowed by local
    local y=(12 101 15 23 49) # local only
    z=(12 101 15 23 49)       # global set in function only

    clear_a x
    clear_a y
    clear_a z

    assert_array_values x
    assert_array_values y
    assert_array_values z
  }

  x=(11 22 33)

  foo
  not declare -p y 2> /dev/null
  declare -p z > /dev/null

  clear_a x
  assert_array_values x
)
end_test

begin_test "Remove from Local Array"
(
  setup_test
  function foo()
  {
    local __x=(12 101 15 23 49)

    remove_element_a __x 15
    assert_array_values __x 12 101 23 49
    assert_array_contiguous __x
  }

  foo

  not declare -p __x 2> /dev/null
)
end_test

begin_test "Remove from Array"
(
  setup_test

  # Do nothing case
  __i=(12 101 15 23 49)
  remove_element_a __i 1234567890
  assert_array_values __i 12 101 15 23 49
  assert_array_contiguous __i

  __x=(12a 101a 15a 23a 49a)
  remove_element_a __x 1
  assert_array_values __x 12a 101a 15a 23a 49a
  assert_array_contiguous __x

  x=(12b 101b 15b 23b 49b)
  remove_element_a x 1
  assert_array_values x 12b 101b 15b 23b 49b
  assert_array_contiguous x

  x=(12 101 15 23 49)
  remove_element_a x 15
  assert_array_values x 12 101 23 49
  assert_array_contiguous x

  remove_element_a x 12
  assert_array_values x 101 23 49
  assert_array_contiguous x

  remove_element_a x 49
  assert_array_values x 101 23
  assert_array_contiguous x

  # Size 1 case
  remove_element_a x 101
  assert_array_values x 23
  assert_array_contiguous x

  # Size 0 case
  remove_element_a x 23
  assert_array_values x
  remove_element_a x 2
  assert_array_values x

  __i=(12)
  remove_element_a __i 12
  assert_array_values __i
  remove_element_a __i 11
  assert_array_values __i

  __x=(12a)
  remove_element_a __x 12a
  assert_array_values __x
  remove_element_a __x 15
  assert_array_values __x

  # Remove from tails and middle cases
  y=(666 101 15 666 23 49)
  remove_element_a y 666
  assert_array_values y 101 15 23 49
  assert_array_contiguous y

  i=(101 15 666 23 49 666)
  remove_element_a i 666
  assert_array_values i 101 15 23 49
  assert_array_contiguous i

  # Everything at once!
  j=(666 666 101 666 15 666 666 23 666 49 666 666)
  unset j[0]
  remove_element_a j 666
  assert_array_values j 101 15 23 49
  assert_array_contiguous j
)
end_test

begin_test "Blind append"
(
  setup_test

  # Unset
  unset __x
  add_elements_a __x 11
  assert_array_values __x 11
  assert_array_contiguous __x

  unset y
  add_elements_a y 12
  assert_array_values y 12
  assert_array_contiguous y

  # Empty case
  __x=()
  add_elements_a __x 13
  assert_array_values __x 13
  assert_array_contiguous __x

  y=()
  add_elements_a y 14
  assert_array_values y 14
  assert_array_contiguous y

  # Normal case
  __x=(11 22 33)
  add_elements_a __x $' 55\n'
  assert_array_values __x 11 22 33 $' 55\n'
  assert_array_contiguous __x

  y=(12 23 34)
  add_elements_a y $' 54\n'
  assert_array_values y 12 23 34 $' 54\n'
  assert_array_contiguous y

  # Multiple case
  __x=(11 22 33)
  add_elements_a __x 44 55
  assert_array_values __x 11 22 33 44 55
  assert_array_contiguous __x

  y=(12 23 34)
  add_elements_a y 45 56
  assert_array_values y 12 23 34 45 56
  assert_array_contiguous y
)
end_test

begin_test "Append to beginning of array"
(
  setup_test

  # Empty case
  __x=()
  add_element_pre_a __x 11
  assert_array_values __x 11
  assert_array_contiguous __x

  y=()
  add_element_pre_a y 11
  assert_array_values y 11
  assert_array_contiguous y

  # Size 1
  add_element_pre_a __x 11
  assert_array_values __x 11
  assert_array_contiguous __x

  add_element_pre_a x 11a
  assert_array_values x 11a
  assert_array_contiguous x

  # Hole
  __x=(0 44 11 22 33 44)
  unset __x[0]
  add_element_pre_a __x 44
  assert_array_values __x 44 11 22 33
  assert_array_contiguous __x

  x=(0 44a 11a 22a 33a 44a)
  unset x[0]
  add_element_pre_a x 44a
  assert_array_values x 44a 11a 22a 33a
  assert_array_contiguous x

  # Already
  __x=(11 22 33 11 44 11)
  add_element_pre_a __x 11
  assert_array_values __x 11 22 33 44
  assert_array_contiguous __x

  x=(11a 22a 11a 33a 44a 11a)
  add_element_pre_a x 11a
  assert_array_values x 11a 22a 33a 44a
  assert_array_contiguous x

  # New
  add_element_pre_a __x 55
  assert_array_values __x 55 11 22 33 44
  assert_array_contiguous __x

  add_element_pre_a x 55a
  assert_array_values x 55a 11a 22a 33a 44a
  assert_array_contiguous x
)
end_test

begin_test "Append end of array"
(
  setup_test

  # Empty case
  __x=()
  add_element_post_a __x 11
  assert_array_values __x 11
  assert_array_contiguous __x

  y=()
  add_element_post_a y 11
  assert_array_values y 11
  assert_array_contiguous y

  # Size 1
  add_element_pre_a __x 11
  assert_array_values __x 11
  assert_array_contiguous __x

  add_element_post_a y 11
  assert_array_values y 11
  assert_array_contiguous y

  # Hole
  __x=(0 44 11 22 33 44)
  unset __x[0]
  add_element_post_a __x 44
  assert_array_values __x 11 22 33 44
  assert_array_contiguous __x

  x=(0 44a 11a 22a 33a 44a)
  unset x[0]
  add_element_post_a x 44a
  assert_array_values x 11a 22a 33a 44a
  assert_array_contiguous x

  # Already
  __x=(44 11 44 22 33 44)
  add_element_post_a __x 44
  assert_array_values __x 11 22 33 44
  assert_array_contiguous __x

  x=(11a 22a 11a 33a 44a 11a)
  add_element_post_a x 11a
  assert_array_values x 22a 33a 44a 11a
  assert_array_contiguous x

  # New
  add_element_post_a __x 55
  assert_array_values __x 11 22 33 44 55
  assert_array_contiguous __x

  add_element_post_a x 55a
  assert_array_values x 22a 33a 44a 11a 55a
  assert_array_contiguous x
)
end_test

begin_test "Remove from string"
(
  setup_test

  # Unset case
  unset __x
  remove_element __x 15
  [ "${__x}" = "" ]

  unset x
  remove_element x 1
  [ "${x}" = "" ]

  # Empty case
  __x=''
  remove_element __x 15
  [ "${__x}" = "" ]

  x=''
  remove_element x 5
  [ "${x}" = "" ]

  # "Just the one" case
  __x='15'
  remove_element __x 15
  [ "${__x}" = "" ]

  x='15'
  remove_element x 15
  [ "${x}" = "" ]

  # Middle
  __x='12 101 15 23 49'
  remove_element __x 15
  [ "${__x}" = "12 101 23 49" ]

  x='12a 101a 15a 23a 49a'
  remove_element x 15a
  [ "${x}" = "12a 101a 23a 49a" ]

  # Beginning
  remove_element __x 12
  [ "${__x}" = "101 23 49" ]

  remove_element x 12a
  [ "${x}" = "101a 23a 49a" ]

  # Ending
  remove_element __x 49
  [ "${__x}" = "101 23" ]

  remove_element x 49a
  [ "${x}" = "101a 23a" ]

  # Front and Middle
  __x="666 101 15 666 23 49"
  remove_element __x 666
  [ "${__x}" = "101 15 23 49" ]

  x="666a 101a 15a 666a 23a 49a"
  remove_element x 666a
  [ "${x}" = "101a 15a 23a 49a" ]

  # Back and Middle
  __x="101 15 666 23 49 666"
  remove_element __x 666
  [ "${__x}" = "101 15 23 49" ]

  x="101a 15a 666a 23a 49a 666a"
  remove_element x 666a
  [ "${x}" = "101a 15a 23a 49a" ]

  # Everywhere
  __x="666 666 101 666 15 666 666 23 666 49 666 666"
  remove_element __x 666
  [ "${__x}" = "101 15 23 49" ]

  x="666a 666a 101a 666a 15a 666a 666a 23a 666a 49a 666a 666a"
  remove_element x 666a
  [ "${x}" = "101a 15a 23a 49a" ]

  # IFS
  __x='12:101:15,23:49'
  IFS=':,' remove_element __x 15
  [ "${__x}" = "12:101:23:49" ]
  # Verify export status
  not compgen -e -X '!__x'

  x='12a:101a:15a,23a:49a'
  IFS=':,' remove_element x 15a
  [ "${x}" = "12a:101a:23a:49a" ]
  # Verify export status
  not compgen -e -X '!x'

  # Export
  export __x='12 101 15 23 49'
  remove_element __x 15
  [ "${__x}" = "12 101 23 49" ]
  compgen -e -X '!__x' > /dev/null

  export x='12a 101a 15a 23a 49a'
  remove_element x 15a
  [ "${x}" = "12a 101a 23a 49a" ]
  compgen -e -X '!x' > /dev/null
)
end_test

begin_test "Append to beginning of string"
(
  setup_test

  # Unset case
  unset __x
  add_element_pre __x 15
  [ "${__x}" = "15" ]

  unset x
  add_element_pre x 15a
  [ "${x}" = "15a" ]

  # Empty case
  __x=''
  add_element_pre __x 15
  [ "${__x}" = "15" ]

  x=''
  add_element_pre x 15a
  [ "${x}" = "15a" ]

  # Already
  __x="11 22 33 44 11"
  add_element_pre __x 11
  [ "${__x}" = "11 22 33 44" ]

  x="11a 22a 33a 44a 11a"
  add_element_pre x 11a
  [ "${x}" = "11a 22a 33a 44a" ]

  # New
  add_element_pre __x 55
  [ "${__x}" = "55 11 22 33 44" ]

  add_element_pre x 55a
  [ "${x}" = "55a 11a 22a 33a 44a" ]

  # IFS
  __x="11:22:33:44:11"
  IFS=: add_element_pre __x 11
  [ "${__x}" = "11:22:33:44" ]
  not compgen -e -X '!__x'

  x="11a:22a:33a:44a:11a"
  IFS=: add_element_pre x 11a
  [ "${x}" = "11a:22a:33a:44a" ]
  not compgen -e -X '!x'

  # Export
  export __x='12 101 15 23 49'
  add_element_pre __x 15
  [ "${__x}" = "15 12 101 23 49" ]
  compgen -e -X '!__x' > /dev/null

  export x='12a 101a 15a 23a 49a'
  add_element_pre x 15a
  [ "${x}" = "15a 12a 101a 23a 49a" ]
  compgen -e -X '!x' > /dev/null
)
end_test

begin_test "Append to end of string"
(
  setup_test

  # Unset case
  declare __x
  add_element_post __x 15
  [ "${__x}" = "15" ]

  declare x
  add_element_post x 15a
  [ "${x}" = "15a" ]

  # Empty case
  __x=''
  add_element_post __x 15
  [ "${__x}" = "15" ]

  x=''
  add_element_post x 15a
  [ "${x}" = "15a" ]

  # Already
  __x="44 11 22 33 44"
  add_element_post __x 44
  [ "${__x}" = "11 22 33 44" ]

  x="44a 11a 22a 33a 44a"
  add_element_post x 44a
  [ "${x}" = "11a 22a 33a 44a" ]

  # New
  add_element_post __x 55
  [ "${__x}" = "11 22 33 44 55" ]

  add_element_post x 55a
  [ "${x}" = "11a 22a 33a 44a 55a" ]

  # IFS
  __x="44:11:22,33:44"
  IFS=:, add_element_post __x 44
  [ "${__x}" = "11:22:33:44" ]
  not compgen -e -X '!__x'

  x="44a:11a:22a,33a:44a"
  IFS=:, add_element_post x 44a
  [ "${x}" = "11a:22a:33a:44a" ]
  not compgen -e -X '!x'

  # Export
  export __x='12 101 15 23 49'
  add_element_post __x 15
  [ "${__x}" = "12 101 23 49 15" ]
  compgen -e -X '!__x' > /dev/null

  export x='12a 101a 15a 23a 49a'
  add_element_post x 15a
  [ "${x}" = "12a 101a 23a 49a 15a" ]
  compgen -e -X '!x' > /dev/null
)
end_test

begin_test "Comparing arrays"
(
  setup_test
  __x=(11 22 33)
  __y=(11 22 33)
  i=(11 22 31)
  j=(11 22 33 44)
  k=()

  cmp_elements_a __x __y
  cmp_elements_a __y __x
  cmp_elements_a __x __x
  cmp_elements_a __y __y
  cmp_elements_a k k
  not cmp_elements_a __x i
  not cmp_elements_a __x j
  not cmp_elements_a j __x
  not cmp_elements_a k __x
  not cmp_elements_a __x k

  j=("${i[@]}")
  declare -p i > /dev/null
  declare -p j > /dev/null
  cmp_elements_a i j
  cmp_elements_a j i

  # Compare with a hole
  e=(11 22 33 44)
  f=(11 22 33 55)
  unset e[2]
  unset f[2]
  not cmp_elements_a e f

  e=(11 22 0  44)
  f=(11 0  22 44)
  unset e[2]
  unset f[1]
  cmp_elements_a e f

  __x=(0 11 22 33)
  __y=(11 22 0 33)
  unset __x[0]
  unset __y[2]
  cmp_elements_a __x __y
  cmp_elements_a __y __x

)
end_test

begin_test "Comparing strings"
(
  setup_test

  __x="11 22  33"
  __y="11 22 33"
  c="11 22 33 44"
  d="11 21 33"
  # declare z - I think this should fail. It's NOT set
  z=''

  cmp_elements __x __y
  cmp_elements __y __x
  cmp_elements __x __x
  cmp_elements __y __y
  cmp_elements z z
  not cmp_elements __x c
  not cmp_elements __x d
  not cmp_elements d __x
  not cmp_elements z __x
  not cmp_elements __x z

  a="1:2:3"
  b="1: 2:3"
  IFS=": " cmp_elements a b
  c="1: 3:3"
  IFS=": " not cmp_elements b c
)
end_test

begin_test "Splitting strings"
(
  setup_test

  # Unset
  unset __x
  split_s __x
  assert_array_values __x

  unset data
  split_s data
  assert_array_values data

  # Empty
  unset __i
  split_s __i ''
  assert_array_values __i ""

  unset data
  split_s data ''
  assert_array_values data ""

  # Just one
  unset __target
  split_s __target 'foo'
  assert_array_values __target foo

  unset data
  split_s data 'foo'
  assert_array_values data foo

  # Simple
  unset __x
  split_s __x 'foo//bar'
  assert_array_values __x foo bar

  unset x
  split_s x 'foo//bar'
  assert_array_values x foo bar

  # Path test
  unset __x
  split_s __x '/tmp/test.txt///opt/food///good'
  assert_array_values __x /tmp/test.txt /opt/food /good

  unset y
  split_s y '/tmp/test.txt///opt/food///good'
  assert_array_values y /tmp/test.txt /opt/food /good

  # Custom MIFS
  unset __i
  MIFS='//://' split_s __i '/tmp/test.txt///://opt/food//:///good'
  assert_array_values __i /tmp/test.txt/ opt/food /good

  unset x
  MIFS='//://' split_s x '/tmp/test.txt///://opt/food//:///good'
  assert_array_values x /tmp/test.txt/ opt/food /good

  # Single letter IFS
  unset __x
  MIFS='/' split_s __x '/tmp/test.txt///opt/food///good'
  assert_array_values __x "" tmp test.txt "" "" opt food "" "" good

  unset j
  MIFS='/' split_s j '/tmp/test.txt///opt/food///good'
  assert_array_values j "" tmp test.txt "" "" opt food "" "" good

  # Multiple strings
  unset __target
  split_s __target '/tmp/test.txt///opt/food' "good//bad" "" "hear//see//speak" ""
  assert_array_values __target /tmp/test.txt /opt/food good bad "" hear see speak ""

  unset x
  split_s x '/tmp/test.txt///opt/food' "good//bad" "" "hear//see//speak" ""
  assert_array_values x /tmp/test.txt /opt/food good bad "" hear see speak ""

  # Spaces
  unset __target
  split_s __target ' /tmp/test.txt // /opt/fo od '
  assert_array_values __target ' /tmp/test.txt ' ' /opt/fo od '

  unset target
  split_s target ' /tmp/test.txt // /opt/fo od '
  assert_array_values target ' /tmp/test.txt ' ' /opt/fo od '
)
end_test

begin_test "Joining arrays"
(
  setup_test

  # No args
  not join_a __target
  [ "${__target}" = "" ]

  not join_a x
  [ "${__target}" = "" ]

  # Check array is cleared
  __x="foo bar"
  not join_a __x
  [ "${__x}" = "" ]

  x="foo bar"
  not join_a x
  [ "${x}" = "" ]

  # One empty arg
  join_a __target ""
  [ "${__target}" = "" ]

  join_a x ""
  [ "${x}" = "" ]

  # Two empty args
  join_a __target "" ""
  [ "${__target}" = "//" ]

  join_a x "" ""
  [ "${x}" = "//" ]

  # Normal
  join_a __x 11 22 33
  [ "${__x}" = "11//22//33" ]

  join_a x 11 22 33
  [ "${x}" = "11//22//33" ]

  # Custom MIFS
  MIFS='//://' join_a __x foo bar code
  [ "${__x}" = "foo//://bar//://code" ]

  MIFS='//://' join_a y foo bar code
  [ "${y}" = "foo//://bar//://code" ]

  # Single char MIFS
  MIFS=":" join_a __x hear see speak
  [ "${__x}" = "hear:see:speak" ]

  MIFS=":" join_a y_s hear see speak
  [ "${y_s}" = "hear:see:speak" ]

  # Blank in middle
  join_a __target red "" yellow green blue ""
  [ "${__target}" = "red////yellow//green//blue//" ]

  join_a x red "" yellow green blue ""
  [ "${x}" = "red////yellow//green//blue//" ]
)
end_test

begin_test "Joining arrays to stdout"
(
  setup_test

  [ "$(join_a_out | xxd -p)" = "$(printf '' | xxd -p)" ]
  [ "$(join_a_out "" | xxd -p)" = "$(printf '' | xxd -p)" ]

  [ "$(join_a_out "" "" | xxd -p)" = "$(printf '//' | xxd -p)" ]

  [ "$(join_a_out 11 22 33 | xxd -p)" = "$(printf '11//22//33' | xxd -p)" ]

  [ "$(MIFS='//://' join_a_out foo bar code | xxd -p)" = \
    "$(printf 'foo//://bar//://code' | xxd -p)" ]

  [ "$(MIFS=":" join_a_out hear see speak | xxd -p)" = \
    "$(printf 'hear:see:speak' | xxd -p)" ]

  [ "$(join_a_out red "" yellow green blue "" | xxd -p)" = \
    "$(printf 'red////yellow//green//blue//' | xxd -p)" ]

  [ "$(MIFS='\\x00' join_a_out hear see speak | xxd -p)" = \
    "$(printf 'hear\0see\0speak' | xxd -p)" ]

)
end_test

begin_test "Is array"
(
  setup_test

  foo="ok"
  var_name=("ok")
  declare -ra bar2=("doe")
  declare bar3=()

  is_array var_name
  is_array bar2
  is_array bar3
  not is_array foo

  # Test declared but unassigned
  declare -a duck
  is_array duck

  declare -a A
  is_array A
)
end_test

if [ "${BASH_VERSINFO[0]}" -lt "4" ]; then
  skip_next_test
fi
begin_test "Is associative array"
(
  setup_test

  foo="ok"
  var_name=("ok")
  declare -ra bar2=("doe")
  declare bar3=()
  declare -A bar4
  declare -A bar5=()
  declare -A bar6
  bar6[foo]=stuff
  declare -rA bar7=([foo]=stuff)

  not is_associative_array var_name
  not is_associative_array bar2
  not is_associative_array bar3
  not is_associative_array foo

  not is_array bar4
  is_associative_array bar4
  not is_array bar5
  is_associative_array bar5
  not is_array bar6
  is_associative_array bar6
  not is_array bar7
  is_associative_array bar7
)
end_test

if [ "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -lt "43" ]; then
  skip_next_test
fi
begin_test "Is array with name reffing"
(
  setup_test

  declare bar3=()
  declare -n bar4=bar3
  declare -n bar5=bar4
  declare -rau bar6=("doe")

  declare -a bar2
  declare -n bar1=bar2

  is_array bar1
  is_array bar4
  is_array bar5
  is_array bar6

  declare -A foo3=()
  declare -n foo4=foo3
  declare -n foo5=foo4
  declare -rAu foo6=([ok]="doe")

  declare -A foo2
  declare -n foo1=foo2

  not is_array foo1
  is_associative_array foo1
  not is_array foo4
  is_associative_array foo4
  not is_array foo5
  is_associative_array foo5
  not is_array foo6
  is_associative_array foo6

)
end_test


begin_test "To array"
(
  setup_test

  # Simple test
  x="this is a test"
  to_array x
  assert_array_values x this is a test

  # Extra spaces
  unset x
  x="  yet another : test "
  to_array x
  assert_array_values x yet another : test

  # Extra spaces in middle
  unset x
  x="  yet another :   : test "
  to_array x
  assert_array_values x yet another : : test

  # Quotes strings
  unset x
  x="11 '2 2' '3  3' ' 4  4  '"
  to_array x
  assert_array_values x 11 "2 2" "3  3" " 4  4  "

  unset x
  x="11 \"2' 2\" '3  3' ' 4  4  '"
  to_array x
  assert_array_values x 11 "2' 2" "3  3" " 4  4  "

  # Already an array, do nothing
  unset x
  x=(11 22 "3 3")
  ans=(11 22 "3 3")
  to_array x
  assert_array_values x "${ans[@]}"
)
end_test

begin_expected_fail_test "Special characters to array"
(
  setup_test

  # Special character strings
  unset x
  x=$'11 "2\n2" "3 \t 3 "'
  # x="$(printf '%q' "${x}")"
  to_array x

  begin_fail_zone
  assert_array_values x 11 $'2\n 2' $'3 \t 3 '
)
end_test

begin_test "Subtract array"
(
  setup_test

  a=(11 22 33 00)
  b=(44 33 22)
  c=(55 66 77 88 99 1010 1111)
  subtract_array a b c
  assert_array_values c 11 00

  c=()
  subtract_array b a c
  assert_array_values c 44

  # Only a empty
  a=()
  c=()
  subtract_array a b c
  assert_array_values c

  # Only b empty
  a=(11 22 33)
  b=()
  c=()
  subtract_array a b c
  assert_array_values c 11 22 33

  # Both empty
  a=()
  c=()
  subtract_array a b c
  assert_array_values c

  a=(0 11 22 33 00)
  b=(0 44 33 22)
  c=(0 55 66 77 88 99 1010 1111)
  unset a[0]
  unset b[0]
  unset c[0]
  unset c[1]
  unset c[2]
  unset c[3]
  unset c[4]
  subtract_array a b c
  assert_array_values c 11 00

  subtract_array a b a
  assert_array_values a 11 00
)
end_test

begin_test "Subtract array name collisions"
(
  setup_test

  # Same name
  x=(11 22 33)
  subtract_array x x x
  assert_array_values x # x-x = 0

  # Check collisions
  names1=(__i __j __output normal)
  names2=(a b c)
  for n1 in "${names1[@]}"; do
    for n2 in "${names2[@]}"; do
      for n3 in "${names2[@]}"; do
        declare -a "${n1}=(11 22 33 00)"
        declare -a "${n2}=(44 33 22)"
        subtract_array "${n1}" "${n2}" "${n3}"
        assert_array_values "${n3}" 11 00
      done
    done
  done

  names2=(d e f)
  for n1 in "${names2[@]}"; do
    for n2 in "${names1[@]}"; do
      for n3 in "${names2[@]}"; do
        declare -a "${n1}=(11 22 33 00)"
        declare -a "${n2}=(44 33 22)"
        subtract_array "${n1}" "${n2}" "${n3}"
        assert_array_values "${n3}" 11 00
      done
    done
  done

  names2=(g h i)
  for n1 in "${names2[@]}"; do
    for n2 in "${names2[@]}"; do
      for n3 in "${names1[@]}"; do
        declare -a "${n1}=(11 22 33 00)"
        declare -a "${n2}=(44 33 22)"
        subtract_array "${n1}" "${n2}" "${n3}"
        if [ "${n1}" = "${n2}" ]; then
          assert_array_values "${n3}"
        else
          assert_array_values "${n3}" 11 00
        fi
      done
    done
  done
)
end_test

begin_test "Array length"
(
  setup_test

  unset x
  rv=0
  [ "$(array_length x)" = "-1" ]

  x=()
  [ "$(array_length x)" = "0" ]

  x=(11)
  [ "$(array_length x)" = "1" ]

  y=("" 11 22 "3 3")
  [ "$(array_length y)" = "4" ]

  unset y[0]
  [ "$(array_length y)" = "3" ]

  z="ok doe"
  [ "$(array_length z)" = "1" ]
)
end_test

begin_test "Array to variables"
(
  setup_test

  # Empty
  stuff=()
  array_to_variables stuff thing
  [ -z "${thing_1+set}" ]

  # Holes
  BAR=(aa bb cc dd ee)
  unset BAR[0]
  unset BAR[2]
  unset BAR[4]
  array_to_variables BAR BAR
  [ "${BAR_1}" = "bb" ]
  [ "${BAR_2}" = "dd" ]
  [ -z "${BAR_3+set}" ]

  # Normal
  FOOS=(11 "2 2" "3  3")
  array_to_variables FOOS FOO
  [ "${FOO_1}" = "11" ]
  [ "${FOO_2}" = "2 2" ]
  [ "${FOO_3}" = "3  3" ]

  # Name collision
  i=(a1 b2)
  array_to_variables i i
  [ "${i_1}" = "a1" ]
  [ "${i_2}" = "b2" ]

  indirect=(abc "d e f " $'  g \n h  ')
  array_to_variables indirect counter
  [ "${counter_1}" = "abc" ]
  [ "${counter_2}" = "d e f " ]
  [ "${counter_3}" = $'  g \n h  ' ]

)
end_test

begin_test "Variables to array"
(
  setup_test

  # Empty
  variables_to_array thing things
  assert_array_values things

  # Normal
  FOO_1="11"
  FOO_2="2 2"
  FOO_3="3  3"
  FOO_5="not used"
  variables_to_array FOO FOOS
  assert_array_values FOOS 11 "2 2" "3  3"

  # Name collision
  counts_1=a1
  counts_2=b2
  variables_to_array counts counter
  counter=(a1 b2)
)
end_test

begin_test "All variables to array"
(
  setup_test

  # Empty
  thing_one=123
  all_variables_to_array thing things
  assert_array_values things

  # Normal
  FOO_1="11"
  FOO_2="2 2"
  FOO_3="3  3"
  FOO_5="is used"
  FOO_BAR="not used"
  all_variables_to_array FOO FOOS
  assert_array_values FOOS 11 "2 2" "3  3" "is used"

  # Name collision
  counts_1=a1
  counts_2=b2
  all_variables_to_array counts indirect
  indirect=(a1 b2)
)
end_test

begin_test "Serialize array"
(
  setup_test

  declare -i i
  declare -i j=5
  k=stuff
  not serialize_array i
  not serialize_array j
  not serialize_array k

  declare -a w
  ans='a'
  assert_str_eq "$(serialize_array w)" "${ans}"

  x=()
  ans='a'
  assert_str_eq "$(serialize_array x)" "${ans}"

  x=(aa bbb cccc)
  ans='a0 2 aa1 3 bbb2 4 cccc'
  assert_str_eq "$(serialize_array x)" "${ans}"

  y=(11 222 3333)
  ans='a0 2 111 3 2222 4 3333'
  assert_str_eq "$(serialize_array y)" "${ans}"

  z=("foo bar" delme $'\t' '"' "")
  unset z[1]
  ans=$'a0 7 foo bar2 1 \t3 1 "4 0 '
)
end_test

if [ "${BASH_VERSINFO[0]}" -le "3" ]; then
  skip_next_test
fi
begin_test "Serialize associative array"
(
  setup_test
  declare -A x
  assert_str_eq "$(serialize_array x)" "A"

  declare -A y=()
  assert_str_eq "$(serialize_array y)" "A"

  x[foo]=bar
  x[$'foo\tbar']=$'oh\nno'
  x[car]=

  ans="$(serialize_array x)"

  # Order varies from bash to bash, so just make sure the contents are there,
  # and nothing else
  [ "${ans::1}" = "A" ]

  ans1="3 foo3 bar"
  ans2="3 car0 "
  ans3=$'7 foo\tbar5 oh\nno'

  assert_sub_str "${ans:1}" "${ans1}"
  assert_sub_str "${ans:1}" "${ans2}"
  assert_sub_str "${ans:1}" "${ans3}"

  [ "${#ans}" = "$((1+${#ans1}+${#ans2}+${#ans3}))" ]
)
end_test

begin_test "Deserialize array"
(
  setup_test
  ans=(aa bbb cccc)
  deserialize_array x 'a0 2 aa1 3 bbb2 4 cccc'

  declare -p x
  declare -p ans
  assert_array_eq x ans

  ans=(11 222 3333)
  deserialize_array y 'a0 2 111 3 2222 4 3333'
  assert_array_eq y ans

  ans=("foo bar" delme $'\n\\t\t' '"')
  unset ans[1]
  deserialize_array z $'a0 7 foo bar2 4 \n\\t\t3 1 "'
  assert_array_eq z ans

  # Scope
  x1=15
  z1=12

  function foo()
  {
    local x1=()
    local y1=(11 22)
    deserialize_array x1 'a0 2 111 2 22'
    assert_array_eq x1 y1

    deserialize_array z1 'a0 2 111 2 22'

    deserialize_array q1 'a0 2 111 2 22'
  }

  foo
  w1=(11 22)
  assert_array_eq w1 z1
  assert_array_eq q1 z1
  [ "${x1}" = "15" ]
)
end_test

if [ "${BASH_VERSINFO[0]}" -le 3 ]; then
  skip_next_test
fi
begin_test "Deserialize associative array"
(
  setup_test
  declare -A x
  deserialize_array x $'A3 foo3 bar3 car0 7 foo\tbar5 oh\nno'

  [ "${x[foo]}" = "bar" ]
  [ "${x[car]}" = "" ]
  [ "${x[$'foo\tbar']}" = $'oh\nno' ]
  y=("${!x[@]}")
  [ "${#y[@]}" = 3 ]

  # scope
  x1=15
  z1=(16 17)

  function foo()
  {
    local -A x1
    local y1=foo
    deserialize_array x1 "A3 foo3 bar"
    if [ "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -ge 42 ]; then
      deserialize_array y1 "A3 foo3 bar"
      deserialize_array z1 "A3 foo3 bar"
    else
      not deserialize_array y1 "A3 foo3 bar"
      not deserialize_array z1 "A3 foo3 bar"
    fi
    [ "${x1[foo]}" == "bar" ]

    local -A x2=()
    deserialize_array x2 'a0 2 111 2 22'
  }

  foo
  # y1 was local, but got unset. This is known behavior
  if [ "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -ge 42 ]; then
    [ "${y1[foo]}" == "bar" ]
    [ "${z1[foo]}" == "bar" ]
  fi
  # x2 was local, but due to being set as an associative array, is now global
  ans2=(11 22)
  assert_array_eq ans2 x2
)
end_test
