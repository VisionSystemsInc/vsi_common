#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${VSI_COMMON_DIR}/tests/test_utils.bsh"

check_ans()
{
  assert_str_eq "$(yarp <<< "${doc}")" "${ans}"
  echo "===========">&2
}

common_yarp_test()
{
  doc="a:"
  ans="a ="
  check_ans

  doc="
a:"
  check_ans

  doc="
a:
"
  check_ans

  doc="\
a:
  - 1
  - 2"
  ans="\
a =
a[0] = 1
a[1] = 2"
  check_ans

# This is a would be nice feature, but docker compose parses this out, so it's
# not an immediate concern
#   doc="\
# a:
# - 1
# - 2"
#   check_ans # This actually fails, and needs to be fixed
#
#   doc="\
# a:
#   b:
#   - 1
#   - 2"
#   ans="\
# a =
# a.b =
# a.b[0] = 1
# a.b[1] = 2"
#   check_ans # This actually fails, and needs to be fixed

  doc="\
a:
  - kit
  - kat
b:
  c: car
d:
  - food: true
    cool: cat
  - fruit: loop"
  ans="\
a =
a[0] = kit
a[1] = kat
b =
b.c = car
d =
d[0].food = true
d[0].cool = cat
d[1].fruit = loop"
  check_ans

  doc="\
a:
  b:
    c:
      - d
      - e
f:"
  ans="\
a =
a.b =
a.b.c =
a.b.c[0] = d
a.b.c[1] = e
f ="
  check_ans

  doc="\
a:
  - kit
  - kat
b:
  c:
    - car
    - bar
d:
  - food: true
    cool: cat
  - fruit: loop"
  ans="\
a =
a[0] = kit
a[1] = kat
b =
b.c =
b.c[0] = car
b.c[1] = bar
d =
d[0].food = true
d[0].cool = cat
d[1].fruit = loop"
  check_ans

  doc="\
a:
 - kit
 - kat
b:
 c:
   - car
   - bar
d:
 - food: true
   cool: cat
 - fruit: loop"
  check_ans

doc="\
a:
- kit
- kat
b:
  c:
  - car
  - bar
d:
- food: true
  cool: cat
- fruit: loop"
  check_ans

doc="\
a:
- kit
- kat
b:
 c:
 - car
 - bar
d:
- food: true
  cool: cat
- fruit: loop"
  check_ans
}

begin_test "yarp function"
(
  setup_test
  . "${VSI_COMMON_DIR}/linux/yarp"

  [ "$(type -t yarp)" = "function" ]

  common_yarp_test
)
end_test

begin_test "yarp CLI"
(
  setup_test

  [ "$(type -t yarp)" = "file" ]

  common_yarp_test
)
end_test