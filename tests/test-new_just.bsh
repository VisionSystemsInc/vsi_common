#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/new_just"

begin_test "new_just docker_add_quote_escape"
(
  setup_test

  [ 'foo bar' = "$(docker_add_quote_escape 'foo bar')" ]
  [ "foo \\\\'bar" = "$(docker_add_quote_escape "foo 'bar")" ]
  [ 'foo\\bar' = "$(docker_add_quote_escape 'foo\bar')" ]
  [ 'foo\\[bar]' = "$(docker_add_quote_escape 'foo[bar]')" ]
  [ 'foo\\\"bar\\\"' = "$(docker_add_quote_escape 'foo"bar"')" ]
  [ 'foo \\\\\"\\[bar]\\'"'" = "$(docker_add_quote_escape 'foo \"[bar]'"'")" ]
)
end_test

begin_test "new_just docker_env_quote_escape"
(
  setup_test

  [ "foo bar" = "$(docker_env_quote_escape "foo bar")" ]
  [ "foo 'bar" = "$(docker_env_quote_escape "foo 'bar")" ]
  [ 'foo\\bar' = "$(docker_env_quote_escape 'foo\bar')" ]
  [ 'foo \"bar' = "$(docker_env_quote_escape 'foo "bar')" ]
  [ 'foo \\\"bar' = "$(docker_env_quote_escape 'foo \"bar')" ]
)
end_test

begin_test "new_just set_default"
(
  setup_test

  unset foo
  USE_DEFAULTS=1 not set_default foo n "Enter x"
  [ "${foo}" = "n" ]

  unset foo
  not set_default foo n "Enter x" <<< ""
  [ "${foo}" = "n" ]

  unset foo
  set_default foo n "Enter x" <<< "y"
  [ "${foo}" = "y" ]

  foo=z
  set_default foo n "Enter x" <<< "y"
  [ "${foo}" = "z" ]

  foo=z
  USE_DEFAULTS=1 set_default foo n "Enter x" <<< "y"
  [ "${foo}" = "z" ]

  foo=""
  USE_DEFAULTS=1 not set_default foo n "Enter x" <<< "y"
  [ "${foo}" = "n" ]
)
end_test

begin_test "new_just exists"
(
  setup_test

  touch foo
  exists foo
  if [ "${OS-}" != "Windows_NT" ]; then
    [ ! -x "foo" ]
  fi

  exists foo 755
  if [ "${OS-}" != "Windows_NT" ]; then
    [ -x "foo" ]
  fi

  not exists bar
  if [ "${OS-}" != "Windows_NT" ]; then
    [ ! -x "bar" ]
  fi

  not exists bar2 755
  if [ "${OS-}" != "Windows_NT" ]; then
    [ -x "bar2" ]
  fi
)
end_test

begin_test "new_just write no_docker_version"
(
  setup_test

  JUST_VERSION=just_version new_just --continue --no-git --defaults --no-docker --no-pipenv
  mkdir -p "${TESTDIR}/external/vsi_common"
  echo "echo foobar" > "${TESTDIR}/external/vsi_common/env.bsh"

  # setup.env
  [ "$(. setup.env; echo "${JUST_SETUP_SCRIPT}")" = $'foobar\nsetup.env' ]
  # project.env
  project_name="$(basename "${TESTDIR}")"
  project_prefix="$(tr [a-z] [A-Z] <<< "${project_name}")"
  var="${project_prefix}_CWD"
  (
    . "${project_name}.env"
    [ "${JUST_VERSION}" = "just_version" ]
    [ "${JUST_PROJECT_PREFIX}" = "${project_prefix}" ]
    [ "${!var}" = "${TESTDIR}" ]
  )
  # readme
  [ "$(sed -n '/^## Getting started/p;q' README.md)" ]
  # hi.cpp
  [ "$(sed -n '/^#include/p;q' hi.cpp)" ]
  #Justfile
  (
    . Justfile
    uwecho '#!/usr/bin/env bash
            echo foo "${@}"' > g++
    chmod 755 g++
    [ "$(PATH="${TESTDIR}:${PATH}" caseify compile)" = "foo hi.cpp -o hi" ]
    uwecho '#!/usr/bin/env bash
            echo bar "${@}"' > hi
    chmod 755 hi
    [ "$(PATH="${TESTDIR}:${PATH}" caseify run 1 "2 2" "3  3")" = "bar 1 2 2 3  3" ]
  )
  # .gitignore
  grep -q '^local.env$' .gitignore
  grep -q '^local_post.env$' .gitignore

  # .gitattributes
  grep -q '\*\.sh eol=lf' .gitattributes
  grep -q '\*\.bsh eol=lf' .gitattributes
  grep -q '\*\.py eol=lf' .gitattributes
  grep -q '\*\.env eol=lf' .gitattributes
  grep -q '\.justplugins eol=lf' .gitattributes
  grep -q 'Justfile eol=lf' .gitattributes
)
end_test

begin_test "new_just write docker_pipenv_version"
(
  setup_test

  JUST_VERSION=just_version new_just --continue --no-git --defaults --docker --pipenv
  mkdir -p "${TESTDIR}/external/vsi_common"
  echo "echo foobar" > "${TESTDIR}/external/vsi_common/env.bsh"

  # setup.env
  [ "$(. setup.env; echo "${JUST_SETUP_SCRIPT}")" = $'foobar\nsetup.env' ]
  # project.env
  project_name="$(basename "${TESTDIR}")"
  project_prefix="$(tr [a-z] [A-Z] <<< "${project_name}")"
  (
    . "${project_name}.env"
    [ "${JUST_VERSION}" = "just_version" ]
    [ "${JUST_PROJECT_PREFIX}" = "${project_prefix}" ]
    var="${project_prefix}_CWD"
    [ "${!var}" = "${TESTDIR}" ]
    var="${project_prefix}_UID"
    [ "${!var}" = "$(id -u)" ]
    var="${project_prefix}_SOURCE_DIR_DOCKER"
    [ "${!var}" = "/src" ]
    var="${project_prefix}_SOURCE_DIR"
    [ "${!var}" = "${TESTDIR}" ]
    var="${project_prefix}_SOURCE_DIR_TYPE"
    [ "${!var}" = "bind" ]
  )
  # readme
  [ "$(sed -n '/^## Getting started/p;q' README.md)" ]
  #Justfile
  (
    function docker()
    { # Mock docker volume exists check to say true
      return 0
    }

    function id()
    { # Make id so the username has a character that would be sanitized out.
      echo "user-name"
    }

    . Justfile
    ans="docker buildx bake gosu pipenv tini vsi
docker-compose -f ${TESTDIR}/docker-compose.yml build
docker volume rm username${project_name}_venv"

    [ "$(DRYRUN=echo caseify build)" = "${ans}" ]
    ans="docker-compose -f ${TESTDIR}/docker-compose.yml build example
docker volume rm username${project_name}_venv"
    [ "$(DRYRUN=echo caseify build example)" = "${ans}" ]

    ans="docker-compose -f ${TESTDIR}/docker-compose.yml build example2"
    [ "$(DRYRUN=echo caseify build example2)" = "${ans}" ]

    function Just-docker-compose()
    {
      echo "jdc ${@}"
    }
    [ "$(DRYRUN=echo caseify run_example)" = "jdc run --service-ports example" ]
    [ "$(DRYRUN=echo caseify pipenv foo)" = "jdc run example_pipenv pipenv foo" ]

    function justify()
    {
      echo "Justify ${@}"
    }
    ans="docker-compose -f ${TESTDIR}/docker-compose.yml down
Justify git_submodule-update
Justify build"
    [ ! -e ".just_synced" ]
    [ "$(DRYRUN=echo caseify sync)" = "${ans}" ]
    [ -e ".just_synced" ]
  )
  # example.Justfile
  (
    . docker/example.Justfile

    ans="Run example here: example-cmd foo bar"
    [ "$(caseify example-cmd foo bar)" = "${ans}" ]
    function exec()
    {
      echo "e ${@}"
    }
    [ "$(caseify nopipenv foobar)" = "e foobar" ]
    [ "$(caseify pipenv FooBar)" = "e pipenv FooBar" ]

  )
  # Pipfile
  grep -q '\[dev-packages]' Pipfile
  grep -q '"default": {}' Pipfile.lock
  grep -q '"develop": {}' Pipfile.lock
  # Dockerfile
  grep -q 'COPY --from=vsi /vsi /vsi' docker/example.Dockerfile
  grep -q "ADD \[\"${project_name}.env\", \"Pipfile\", \"Pipfile.lock\", \"/src/\"]" docker/example.Dockerfile
  grep -q "ADD \[\"docker/example.Justfile\", \"/src/docker/\"]" docker/example.Dockerfile
  grep -q "ENV JUSTFILE=\"/src/docker/example.Justfile\"" docker/example.Dockerfile
  grep -q "JUST_SETTINGS=\"/src/${project_name}.env\"" docker/example.Dockerfile
  # docker-compose.yml
  grep -q -e "- DOCKER_UID=\${${project_prefix}_UID}" docker-compose.yml
  # .gitignore
  grep -q '^local.env$' .gitignore
  grep -q '^local_post.env$' .gitignore
  # .gitattributes
  grep -q '*.sh eol=lf' .gitattributes
  grep -q '*.bsh eol=lf' .gitattributes
  grep -q '*.py eol=lf' .gitattributes
  grep -q '*.env eol=lf' .gitattributes
  grep -q '.justplugins eol=lf' .gitattributes
  grep -q 'Justfile eol=lf' .gitattributes
  grep -q '*.Justfile eol=lf' .gitattributes
)
end_test

# if [ "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -le "42" ]; then
#   skip_next_test
# fi
# begin_test "new_just non-DRY functions"
# (
#   setup_test

#   declare -A function_prototypes

#   functions=(uwecho ask_question quote_escape
#              relative_path normpath
#              _save_oflag set_oflag reset_oflag)

#   # Store copies of functions loaded from VSI_COMMON_DIR
#   for function_name in "${functions[@]}"; do
#     function_prototypes[${function_name}]="$(declare -pf "${function_name}")"
#   done

#   VSI_COMMON_DIR=/dev/null source "${VSI_COMMON_DIR}/linux/just_files/new_just"

#   for function_name in "${functions[@]}"; do
#     [ "$(declare -pf "${function_name}")" = "${function_prototypes[${function_name}]}" ]
#   done
# )
# end_test