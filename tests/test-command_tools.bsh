#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/command_tools.bsh"

begin_test "Get array from environment"
(
  setup_test

  # PREFIX_NAMES
  A_BS=(11 22 33)
  get_array_from_environment foo A B
  assert_array_values foo 11 22 33

  A_BS=(1 2 3)
  get_array_from_environment foo A B BAR
  assert_array_values foo 1 2 3

  # Test hole
  unset A_BS[0]
  get_array_from_environment foo A B BAR
  assert_array_values foo 2 3

  unset A_BS
  # PREFIX_NAME_1...
  A_B_1="11 22"
  get_array_from_environment foo A B
  assert_array_values foo "11 22"

  A_B_1="111 222"
  get_array_from_environment foo A B BLAH
  assert_array_values foo "111 222"

  A_B_1="aa"
  A_B_2="b b"
  A_B_3="c  c"
  get_array_from_environment foo A B BLAH
  assert_array_values foo aa "b b" "c  c"

  # PREFIX_INSTANCE_NAMES
  B_C_DS=(abc "d e  f")
  get_array_from_environment foo B D C
  assert_array_values foo abc "d e  f"

  # PREFIX_INSTANCE_NAME_1...
  PRE_INS_NAME_1="111 222"
  get_array_from_environment foo PRE NAME INS
  assert_array_values foo "111 222"

  PRE_INS_NAME_1="aa"
  PRE_INS_NAME_2="b b"
  PRE_INS_NAME_3="c  c"
  get_array_from_environment foo PRE NAME INS
  assert_array_values foo aa "b b" "c  c"

  # Test it all at once
  FOO_STUFFS=(aa bb)
  FOO_STUFF_1=cc
  FOO_STUFF_2="c  c"
  FOO_BAR_STUFFS=(dd ee)
  FOO_BAR_STUFF_1=ff
  FOO_BAR_STUFF_2="f f"

  foo=()
  get_array_from_environment foo FOO STUFF BAR
  assert_array_values foo aa bb cc "c  c" dd ee ff "f f"

  # Special names
  FOO_BARS=(a1)
  FOO_BAR_1=b2
  FOO_BAR_2=c
  FOO_INSTANCE_BARS=(3)
  FOO_INSTANCE_BAR_1=p
  FOO_INSTANCE_BAR_2=O

  get_array_from_environment list FOO BAR INSTANCE
  get_array_from_environment var FOO BAR INSTANCE
  get_array_from_environment i FOO BAR INSTANCE
  assert_array_values list a1 b2 c 3 p O
  assert_array_values var a1 b2 c 3 p O
  assert_array_values i a1 b2 c 3 p O
)
end_test

begin_test "Generic command argument parse"
(
  setup_test

  # Null case
  parse-generic
  assert_array_values command_args
  assert_array_values subcommand_args
  [ -z "${subcommand+set}" ]
  unset command_args subcommand_args subcommand

  # Just a command
  parse-generic foobar
  assert_array_values command_args
  assert_array_values subcommand_args
  [ "${subcommand}" = "foobar" ]
  unset command_args subcommand_args subcommand

  # Just command_args
  parse-generic --foo
  assert_array_values command_args --foo
  assert_array_values subcommand_args
  [ -z "${subcommand+set}" ]
  unset command_args subcommand_args subcommand

  parse-generic --foo -b
  assert_array_values command_args --foo -b
  assert_array_values subcommand_args
  [ -z "${subcommand+set}" ]
  unset command_args subcommand_args subcommand

  arguments_with_value=(-a --append)

  # Command and command_args
  parse-generic do -something else
  assert_array_values command_args
  assert_array_values subcommand_args -something else
  [ "${subcommand}" = "do" ]
  unset command_args subcommand_args subcommand

  # A little of everything
  parse-generic -try --to do -something else
  assert_array_values command_args -try --to
  assert_array_values subcommand_args -something else
  [ "${subcommand}" = "do" ]
  unset command_args subcommand_args subcommand

  # Add args with a value into the mix
  parse-generic -a ok do -a "not ok"
  assert_array_values command_args -a ok
  assert_array_values subcommand_args -a "not ok"
  [ "${subcommand}" = "do" ]
  unset command_args subcommand_args subcommand

  parse-generic -try --to -a do -something else
  assert_array_values command_args -try --to -a do -something
  assert_array_values subcommand_args
  [ "${subcommand}" = "else" ]
  unset command_args subcommand_args subcommand

  parse-generic -try --to -a= do -something else
  assert_array_values command_args -try --to -a=
  assert_array_values subcommand_args -something else
  [ "${subcommand}" = "do" ]
  unset command_args subcommand_args subcommand

  parse-generic -try --to --append stuff do -something else
  assert_array_values command_args -try --to --append stuff
  assert_array_values subcommand_args -something else
  [ "${subcommand}" = "do" ]
  unset command_args subcommand_args subcommand

)
end_test

begin_test "Compose command arguments"
(
  setup_test

  # Null case
  compose_arguments
  declare -p cmd > /dev/null # check that cmd exists now
  assert_array_values cmd

  # Just command as string
  cmd=foobar
  compose_arguments
  assert_array_values cmd foobar

  # No cmd with args
  unset cmd
  subcommand=magic
  compose_arguments
  assert_array_values cmd magic

  # Command and subcommand
  cmd=(foobar)
  compose_arguments
  assert_array_values cmd foobar magic

  # Just one arg
  cmd=(foobar)
  A=(-a -b)
  compose_arguments A
  assert_array_values cmd foobar -a -b magic

  cmd=(foobar)
  command_args=(-1 -2)
  compose_arguments A
  assert_array_values cmd foobar -1 -2 -a -b magic

  # Everything
  cmd=(echo foobar)
  CMD_ARGS=(--quiet --config "/tmp/foo bar.xml")
  MAGIC_ARGS=(-it --rm)
  subcommand=magic
  command_args=(--gpu)
  subcommand_args=(--do=something)

  compose_arguments CMD_ARGS MAGIC_ARGS
  assert_array_values cmd echo "foobar" "--gpu" "--quiet" "--config" "/tmp/foo bar.xml" "magic" "-it" "--rm" "--do=something"

  # Extra args specified but not used
  unset CMD_ARGS MAGIC_ARGS
  cmd=(foobar)
  compose_arguments CMD_ARGS MAGIC_ARGS
  assert_array_values cmd "foobar" "--gpu" "magic" "--do=something"

  # All strings
  unset cmd CMD_ARGS MAGIC_ARGS command_args subcommand_args
  cmd="echo foobar"
  CMD_ARGS="--quiet --config /tmp/foo bar.xml"
  MAGIC_ARGS="-it --rm"
  subcommand=magic
  command_args="--gpu --tpu"
  subcommand_args="--do=s ome  thing"

  compose_arguments CMD_ARGS MAGIC_ARGS
  assert_array_values cmd "echo foobar" "--gpu --tpu" "--quiet --config /tmp/foo bar.xml" magic "-it --rm" "--do=s ome  thing"

  # Special names
  command_args=()
  subcommand_args=()
  subcommand=bar
  indirect=(ok doe)
  indirect2=(deer bear)
  indirect3=(car tar)

  cmd=()
  compose_arguments indirect indirect2
  assert_array_values cmd ok doe bar deer bear

  cmd=()
  compose_arguments indirect3 indirect2
  assert_array_values cmd car tar bar deer bear
)
end_test

begin_test "Parse arguments"
(
  setup_test

  # Nothing
  parse_args args --
  [ "${args}" = "0" ]

  # No options
  parse_args args -- stuff
  [ "${args}" = "0" ]

  # An option without being called
  parse_args args -f foo --
  [ "${args}" = "0" ]
  [ "${foo}" = "0" ]
  unset foo

  # An option called once
  parse_args args -f foo -- -f
  [ "${args}" = "1" ]
  [ "${foo}" = "1" ]
  unset foo

  # An option called multiple times
  parse_args args -f foo -- -f -f -f
  [ "${args}" = "3" ]
  [ "${foo}" = "3" ]
  unset foo

  # An inverted option called once
  parse_args args --no-foo foo! -- --no-foo
  [ "${args}" = "1" ]
  [ "${foo}" = "-1" ]
  unset foo

  # An inverted option called multiple times
  parse_args args --no-foo foo! -- --no-foo
  [ "${args}" = "1" ]
  [ "${foo}" = "-1" ]
  unset foo

  # An option and an inverted option called multiple times (this is a somewhat
  # pathological case)
  parse_args args --foo foo --no-foo foo! -- --no-foo --foo --foo
  [ "${args}" = "3" ]
  [ "${foo}" = "1" ]
  unset foo

  # An option with an argument, but without being called
  parse_args args -f foo: --
  [ "${args}" = "0" ]
  [ -z "${foo:+set}" ]
  unset foo

  # An option with an argument
  parse_args args -f foo: -- -f bar
  [ "${args}" = "2" ]
  [ "${foo}" = "bar" ]
  unset foo

  # An array argument
  parse_args args -f +foo: -- -f blah
  [ "${args}" = "2" ]
  assert_array_values foo blah
  unset foo

  # An array argument used muliple times
  parse_args args -f +foo: -- -f blah -f bar -f car
  [ "${args}" = "6" ]
  assert_array_values foo blah bar car
  unset foo

  # An array w/o arguments
  parse_args args -f +foo -- -f blah
  [ "${args}" = "1" ]
  assert_array_values foo 1
  unset foo

  # An array w/o arguments multiple times
  parse_args args -f +foo -- -f -f -f blah
  [ "${args}" = "3" ]
  assert_array_values foo 1 1 1
  unset foo

  # Two different array arguments with same storage
  parse_args args -f +foo: --file +foo: -- -f foo --file bar -f boo --file far stuff
  [ "${args}" = "8" ]
  assert_array_values foo foo bar boo far
  unset foo
)
end_test
