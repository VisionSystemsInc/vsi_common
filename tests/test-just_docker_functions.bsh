#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/colors.bsh"

if [ ! -e "${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml" ]; then
  skip_next_test
fi
begin_test "build recipes"
(
  setup_test

  touch blah.env

  echo "source_environment_files blah.env" > Justfile
  echo 'caseify(){ defaultify ${@+"${@}"}; }' >> Justfile

  echo "${VSI_COMMON_DIR}/linux/just_files/just_docker_functions.bsh" > .justplugins

  path="${VSI_COMMON_DIR}/docker/recipes"
  [ "$(just -n build recipes)" = "(cd ${path}; just --wrap docker buildx bake)" ] || \
  [ "$(just -n build recipes)" = "(cd $(quote_escape "${path}"); just --wrap docker buildx bake)" ]
)
end_test

source "${VSI_COMMON_DIR}/linux/just_files/just_docker_functions.bsh"

# DEPRECATED
begin_test "docker-compose restore from cache"
(
  setup_test
  function Docker()
  {
    echo D "${@}"
  }

  # only use for "docker compose config"
  function docker()
  {
    echo "${config}"
  }

  function rm()
  {
    :
  }

  echo 1 > "${TESTDIR}/tmpcount"
  function mktemp()
  {
    declare -i tmp_count="$(cat "${TESTDIR}/tmpcount")"
    echo "${TESTDIR}/tmp${tmp_count}"
    echo $((tmp_count+1)) > "${TESTDIR}/tmpcount"
  }

  # This should be in alphabetical order, like docker-compose config does
  config="services:
  bars:
    build:
      context: .
      dockerfile: foo.Dockerfile
  foos:
    build:
      context: .
      dockerfile: foo.Dockerfile
version: '2.5'"

  echo "FROM vsiri/recipe:foo AS bar
from vsiri/recipe:boo AS far
FROM alpine:3 AS stuff
RUN something
FROM stuff
RUN more things
" > foo.Dockerfile
  recipes=(foo boo)
  stages=(bar far stuff)

  # Normal test
  ans="D compose -f ${TESTDIR}/tmp3 pull
D compose -f ${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml -f ${TESTDIR}/tmp2 build boo foo
D tag vsiri/recipe:boo vsiri/ci_cache:recipe_foos_boo
D tag vsiri/recipe:foo vsiri/ci_cache:recipe_foos_foo
D compose -f ${TESTDIR}/tmp1 -f ${TESTDIR}/tmp2 --project-directory . build foos_auto_gen_bar foos_auto_gen_far foos_auto_gen_stuff foos
D compose -f ${TESTDIR}/tmp3 push"
  cmd="$(docker-compose_restore_from_cache compose.yml foos)"
  [ "${cmd}" = "${ans}" ]
  # [ "$(xxd <<< "${cmd}")" = "$(xxd <<< "${ans}")" ]

  # Test JUST_DOCKER_COMPOSE_CACHE_REPO
  echo 1 > "${TESTDIR}/tmpcount"
  cmd="$(JUST_DOCKER_COMPOSE_CACHE_REPO=foo/bar docker-compose_restore_from_cache compose.yml foos)"
  ans="${ans//vsiri\/ci_cache/foo/bar}"
  [ "${cmd}" = "${ans}" ]

  # No recipes
  echo "FROM alpine:3 AS stuff
RUN something
FROM stuff
RUN more things
" > foo.Dockerfile
  ans="D compose -f ${TESTDIR}/tmp3 pull
D compose -f ${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml -f ${TESTDIR}/tmp2 build
D compose -f ${TESTDIR}/tmp1 -f ${TESTDIR}/tmp2 --project-directory . build foos_auto_gen_stuff foos
D compose -f ${TESTDIR}/tmp3 push"
  echo 1 > "${TESTDIR}/tmpcount"
  cmd="$(docker-compose_restore_from_cache compose.yml foos)"
  [ "${cmd}" = "${ans}" ]

  # No extra stages
  echo "FROM stuff
RUN more things
" > foo.Dockerfile
  ans="D compose -f ${TESTDIR}/tmp3 pull
D compose -f ${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml -f ${TESTDIR}/tmp2 build
D compose -f ${TESTDIR}/tmp1 -f ${TESTDIR}/tmp2 --project-directory . build foos
D compose -f ${TESTDIR}/tmp3 push"
  echo 1 > "${TESTDIR}/tmpcount"
  cmd="$(docker-compose_restore_from_cache compose.yml foos)"
  [ "${cmd}" = "${ans}" ]

  # Test with dockerfile in different context directory

  config="services:
  bars:
    build:
      context: bar
      dockerfile: bar.Dockerfile
version: '2.5'"

  mkdir bar
  echo "FROM alpine:3 AS stuff
RUN something
FROM stuff
RUN more things
" > bar/bar.Dockerfile

  ans="D compose -f ${TESTDIR}/tmp3 pull
D compose -f ${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml -f ${TESTDIR}/tmp2 build
D compose -f ${TESTDIR}/tmp1 -f ${TESTDIR}/tmp2 --project-directory . build bars_auto_gen_stuff bars
D compose -f ${TESTDIR}/tmp3 push"
  echo 1 > "${TESTDIR}/tmpcount"
  cmd="$(docker-compose_restore_from_cache compose.yml bars)"
  [ "${cmd}" = "${ans}" ]
)
end_test

# DEPRECATED
begin_test "auto gen push pull file"
(
  setup_test
  stages=()
  recipes=()

  JUST_DOCKER_COMPOSE_CACHE_REPO=a/cache
  pushpull="$(_dynamic_docker-compose_push_pull foobar)"
  [ "$(grep -c "^  [^ ]" <<< "${pushpull}")" = "1" ]
  grep -q "^    image: a/cache:final_foobar$" <<< "${pushpull}"

  stage_names=(foo bar)
  pushpull="$(_dynamic_docker-compose_push_pull foobar)"
  [ "$(grep -c "^  [^ ]" <<< "${pushpull}")" = "3" ]
  grep -q "^  stage_foo:$" <<< "${pushpull}"
  grep -q "^    image: a/cache:foobar_foo$" <<< "${pushpull}"

  recipes=(boo far)
  pushpull="$(_dynamic_docker-compose_push_pull foobar)"
  [ "$(grep -c "^  [^ ]" <<< "${pushpull}")" = "5" ]
  grep -q "^  recipe_boo:$" <<< "${pushpull}"
  grep -q "^    image: a/cache:recipe_foobar_boo$" <<< "${pushpull}"
)
end_test

# DEPRECATED
begin_test "auto gen recipe from cache file"
(
  setup_test
  recipes=()
  recipe_compose_version=2.2

  JUST_DOCKER_COMPOSE_CACHE_REPO=some/ci_cache
  [ "$(_dynamic_docker-compose_restore_recipes foobar)" = "version: '2.2'
services:" ]

  recipes=(boo far)
  pushpull="$(_dynamic_docker-compose_restore_recipes foobar)"
  [ "$(grep -c "^      cache_from:" <<< "${pushpull}")" = "2" ]
  grep -q "^  boo:$" <<< "${pushpull}"
  grep -q "^        - some/ci_cache:recipe_foobar_boo$" <<< "${pushpull}"
)
end_test

# DEPRECATED
begin_test "auto gen add cache from"
(
  setup_test

  function mktmp2()
  {
    local args1=()
    while (( ${#} )); do
      if [ "${1}" = "- -" ]; then
        shift 1
        break
      fi
      args1+=("${1}")
      shift 1
    done
    local args2=(${@+"${@}"})

    local i j
    echo     "version: '2.5'"
    echo     "services:"
    for i in ${args1[@]+"${args1[@]}"}; do
      echo   "  ${i}:"
      # if [ "${i#*auto_gen_}" = "${i}" ]; then
      #   echo "    image: ${args2[0]}"
      # fi
      echo   "    build:"
      if [ "${i#*auto_gen_}" != "${i}" ]; then
        echo "      target: ${i#*auto_gen_}"
      fi
      echo   "      cache_from:"
      echo   "        - ${main_image_name}"
      for j in ${args2[@]+"${args2[@]}"}; do
        echo "        - ${j}"
      done
    done
  }

  config0="services:
  bars:
    build:
      context: .
      dockerfile: foo.Dockerfile
  foos:
    build:
      context: .
      dockerfile: foo.Dockerfile"
  configv="version: '2.5'"
  config="${config0}
${configv}"

  docker_compose_version=2.5
  stage_names=()
  recipes=()
  JUST_DOCKER_COMPOSE_CACHE_REPO="the/cache"
  main_image_name=some/image:time

  _dynamic_docker-compose_add_cache_from foobar <<< "${config}" > "${TESTDIR}/tmp1" 3>"${TESTDIR}/tmp2"
  [ "$(cat tmp1)" = "${config}" ]
  ans2="$(mktmp2 foobar "- -" the/cache:final_foobar)"
  [ "$(cat tmp2)" = "${ans2}" ]

  # Test override_fd
  override_fd=4 _dynamic_docker-compose_add_cache_from foobar <<< "${config}" > "${TESTDIR}/tmp1" 4>"${TESTDIR}/tmp3"
  [ "$(cat tmp3)" = "${ans2}" ]

  stage_names=(foo bar)
    _dynamic_docker-compose_add_cache_from foobar <<< "${config}" > "${TESTDIR}/tmp1" 3>"${TESTDIR}/tmp2"
ans1="${config0}
  foobar_auto_gen_foo:
    <<: *main_stage
    image: the/cache:foobar_foo
  foobar_auto_gen_bar:
    <<: *main_stage
    image: the/cache:foobar_bar
${configv}"
  [ "$(cat tmp1)" = "${ans1}" ]
  ans2="$(mktmp2 foobar_auto_gen_foo foobar_auto_gen_bar foobar "- -" the/cache:final_foobar the/cache:foobar_foo the/cache:foobar_bar)"
  [ "$(cat tmp2)" = "${ans2}" ]

  recipes=(boo far)
  _dynamic_docker-compose_add_cache_from foobar <<< "${config}" > "${TESTDIR}/tmp1" 3>"${TESTDIR}/tmp2"
  [ "$(cat tmp1)" = "${ans1}" ]
  ans2="$(mktmp2 foobar_auto_gen_foo foobar_auto_gen_bar foobar "- -" the/cache:final_foobar the/cache:foobar_foo the/cache:foobar_bar the/cache:recipe_foobar_boo the/cache:recipe_foobar_far)"
  [ "$(cat tmp2)" = "${ans2}" ]
)
end_test

begin_test "get docker recipes"
(
  setup_test
    cat - << EOF > Something.Dockerfile
FROM vsiri/recipe:gosu AS foo
# FROM vsiri/recipe:commented AS out
RUN stuff
from vsiri/recipe:tini as bar
FROM alpine
EOF

  [ "$(get_docker_recipes Something.Dockerfile)" = $'gosu\ntini' ]

    cat - << EOF > Something.Dockerfile
FROM not_recipe:gosu AS foo
RUN stuff
from not_recipe:tini as bar
FROM alpine
EOF

  [ "$(get_docker_recipes Something.Dockerfile)" = "" ]

  [ "$(JUST_RECIPE_REPO=not_recipe get_docker_recipes Something.Dockerfile)" = $'gosu\ntini' ]


)
end_test