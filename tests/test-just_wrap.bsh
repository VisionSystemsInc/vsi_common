#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"

# Helper function
function setup_just_test()
{
  echo 'TEST_LOCAL=2' > local.env
  echo 'JUST_PROJECT_PREFIX=TEST
        JUST_VERSION='"$(source "${VSI_COMMON_DIR}/linux/just_files/just_version.bsh"; echo "${JUST_VERSION}")"'
        : ${TEST_VAR1=1}
        : ${TEST_LOCAL=0}
        : ${TEST_LOCAL2=0}
        : ${TEST_LOCAL3=0}
        TEST_VAR2=(11 22 33)' > project1.env
  echo 'TEST_LOCAL2="${TEST_LOCAL}:3"' > local_post.env
  touch mywrap
  chmod 755 mywrap

  echo 'source "${VSI_COMMON_DIR}/linux/just_files/just_env" "$(dirname "${BASH_SOURCE[0]}")"/project1.env' > Justfile

  mkdir -p other_dir
}

# Helper function
function check_values()
{
  # Test the values are correct
  [ "${TEST_VAR1}" == "1" ]
  assert_array_values TEST_VAR2 11 22 33
  [ "${TEST_LOCAL}" == "2" ]
  [ "${TEST_LOCAL2}" == "2:3" ]
  [ "${TEST_LOCAL3}" == "0" ]
}

# Helper function
function test_wrap_call()
(
  echo "#!/usr/bin/env bash
        . '${VSI_COMMON_DIR}/linux/just_files/Just_wrap'"' ${@+"${@}"}' > "${1}"

  # Call and copy the variables
  eval "$("${1}" declare -p TEST_VAR1 TEST_VAR2 TEST_LOCAL TEST_LOCAL2 TEST_LOCAL3)"
  # Test values
  check_values
)

# Helper function
function test_unwrap_call()
(
  # Call and copy the variables
  eval "$("${VSI_COMMON_DIR}/linux/just_files/Just_wrap" declare -p TEST_VAR1 TEST_VAR2 TEST_LOCAL TEST_LOCAL2 TEST_LOCAL3)"
  # Test values
  check_values
)

# Test two of the mode that Just_wrap supports
begin_test "Test call and new shell modes"
(
  setup_test

  setup_just_test

  # Test both relative and absolute name
  for project_file in "./project1.env" "${TESTDIR}/project1.env"; do
    # Test relative mywrap call
    test_wrap_call ./mywrap
    # Test absolute mywrap call
    test_wrap_call "${TESTDIR}/mywrap"
    # Test the same call, unwrapped mode
    test_unwrap_call

    # Test a specific command being called because the above only tests declare,
    # which is a built in command and operates differently. Making sure it has
    # mywrap in it is one way to know ls worked. Tests one arg, GREAT!
    ./mywrap ls | grep mywrap > /dev/null
    # Same, but absolute path
    "${TESTDIR}/mywrap" ls | grep mywrap > /dev/null
    # Same test, via new shell on stdin
    ./mywrap <<< ls | grep mywrap > /dev/null
    "${TESTDIR}/mywrap" <<< ls | grep mywrap > /dev/null
    # Same two tests, unwrapped version
    "${VSI_COMMON_DIR}/linux/just_files/Just_wrap" ls | grep mywrap > /dev/null
    "${VSI_COMMON_DIR}/linux/just_files/Just_wrap" <<< ls | grep mywrap > /dev/null
  done

  # Test all in path
  PATH="${PATH}:$(pwd)" test_wrap_call mywrap
  # Same test but using a new shell on stdin
  PATH="${PATH}:$(pwd)" mywrap <<< ls | grep mywrap > /dev/null

  # Same test, unwrapped
  PATH="${PATH}:${VSI_COMMON_DIR}/linux/:${VSI_COMMON_DIR}/linux/just_files" Just_wrap <<< ls | grep mywrap > /dev/null

  # Same group of tests, in another directory
  cd other_dir

  test_wrap_call ../mywrap
  test_wrap_call "${TESTDIR}/mywrap"

  ../mywrap ls .. | grep mywrap > /dev/null
  "${TESTDIR}/mywrap" ls "${TESTDIR}"| grep mywrap > /dev/null
  ../mywrap <<< 'ls ..' | grep mywrap > /dev/null
  "${TESTDIR}/mywrap" <<< 'ls ..' | grep mywrap > /dev/null

  "${VSI_COMMON_DIR}/linux/just_files/Just_wrap" ls .. | grep mywrap > /dev/null
  "${VSI_COMMON_DIR}/linux/just_files/Just_wrap" <<< "ls .." | grep mywrap > /dev/null

  PATH="${PATH}:$(cd ..; pwd)" test_wrap_call mywrap
  PATH="${PATH}:$(cd ..; pwd)" mywrap <<< 'ls ..' | grep mywrap > /dev/null
)
end_test

# Test that the exec mode really has no extra children
begin_test "Wrap test exec mode"
(
  setup_test

  # Setup
  echo "#!/usr/bin/env bash
        . '${VSI_COMMON_DIR}/linux/just_files/Just_wrap' "'${@+"${@}"}' > mywrap
  chmod 755 mywrap

  # Run both echo and wrap in the same subshell, and store in array
  #x=($(echo $BASHPID; ./mywrap bash -c 'echo $PPID')) # Not macOS compatible
  x=("$(bash -c 'echo "${PPID}"')" "$(./mywrap bash -c 'echo "${PPID}"')")

  # Verify the parent and the subshell are the same pid
  [ "${x[0]}" == "${x[1]}" ]

)
end_test

# Same test, unwrapped
begin_test "Unwrapped test exec mode"
(
  setup_test

  #y=($(echo $BASHPID; "${VSI_COMMON_DIR}/linux/just_files/Just_wrap" /dev/null bash -c 'echo $PPID'))
  y=("$(bash -c 'echo "${PPID}"')" "$("${VSI_COMMON_DIR}/linux/just_files/Just_wrap" bash -c 'echo "${PPID}"')")
  [ "${y[0]}" == "${y[1]}" ]
)
end_test

# Test that the source mode works as expected
begin_test "Wrap test source"
(
  setup_test

  # Setup
  setup_just_test
  echo "#!/usr/bin/env bash
        . '${VSI_COMMON_DIR}/linux/just_files/Just_wrap' "'${@+"${@}"}' > mywrap

  # Normal source
  (
    . mywrap
    check_values
  )

  # Other dir source
  (
    cd other_dir
    . ../mywrap
    check_values
  )
)
end_test

# Same test, unwrapped
begin_test "Unwrapped test source"
(
  setup_test

  setup_just_test

  # Need to export some functions so that the bash full shell can finish
  export -f check_values assert_array_values
  # Since this is an "unwrapped" test, I need to make sure that Just_wrap
  # doesn't think THIS file is the second layer wrapper! To do this, call a new
  # bash shell. Copy PS4 for nice error messages

  # Uncomment these if there is a need to debug here.
  # set +xv
  # echo ------------------------------------ >&2
  # if [ -z "${TESTLIB_PS4+set}" ]; then
  #   export PS4="$'+${0##*/}:${LINENO})\t'"
  # fi
  # and add x to euc

  bash -euc ". '${VSI_COMMON_DIR}/linux/just_files/Just_wrap'
             check_values"

  (
    cd other_dir
    bash -euc ". '${VSI_COMMON_DIR}/linux/just_files/Just_wrap'
               check_values"
  )
)
end_test

begin_test "Unwrapped test run"
(
  setup_test

  setup_just_test

  # Need to export some functions so that the bash full shell can finish
  export -f check_values assert_array_values
  bash -eu "${VSI_COMMON_DIR}/linux/just_files/Just_wrap" check_values
)
end_test

if ! command -v screen >& /dev/null; then
  skip_next_test
elif [[ ${OSTYPE-} = darwin* ]] && [ "$(sw_vers -buildVersion)" = "Darling" ]; then
  # Screen doesn't work in darling
  skip_next_test
fi

begin_test "Interactive just_wrap"
(
  setup_test

  setup_just_test

  echo "#!/usr/bin/env bash
        . '${VSI_COMMON_DIR}/linux/just_files/Just_wrap' "'${@+"${@}"}' > mywrap
  chmod 755 mywrap

  session="${TRASHDIR////}"
  export VSI_COMMON_DIR TESTDIR
  screen -c /dev/null -dmS "${session}"

  # Macos compatibility, needs a literal newline
  nl=$'\n'
  cmd='"\${VSI_COMMON_DIR}/linux/just_files/Just_wrap"'"${nl}"
  cmd+='declare -p TEST_LOCAL2 TEST_VAR2 > "\${TESTDIR}/output"'"${nl}"
  cmd+='touch "\${TESTDIR}/sync"'"${nl}"
  screen -S "${session}" -p 0 -X stuff "${cmd}"

  # Wait for five second for file to be created, on windows, the overhead for a
  # a loop like this is 23 seconds, good enough
  for ((i=0; i < 500; i++ )); do
    if [ -e "${TESTDIR}/sync" ]; then
      break
    fi
    sleep 0.01
  done
  screen -S "${session}" -X quit

  source "${TESTDIR}/output"
  if [ "${BASH_VERSINFO[0]}" -ge "4" ]; then
    # Unexported functions and arrays don't work in bash 3.2
    assert_array_values TEST_VAR2 11 22 33
  fi
  [ "${TEST_LOCAL2}" = "2:3" ]
)
end_test

function teardown()
{
  # cleanup in case test fails
  command -v screen >& /dev/null && screen -S "${TRASHDIR////}" -X quit >& /dev/null || :
}