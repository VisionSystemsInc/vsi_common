#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/docker_compose_override"

function head()
{
  echo "version: '${1-3.2}'"$'\nservices:'
}

function service()
{
  echo $'\n'"  ${1}:"
  echo "    x-bugfix:"
}

function volumes()
{
  echo $'\n'"    volumes:"
}

function vol()
{
  if [ "${1:0:1}" = "/" ] && [ "${OS-}" = "Windows_NT" ]; then
    echo $'\n'"      - $(cygpath -w "${1}"):${2}"
  else
    echo $'\n'"      - ${1}:${2}"
  fi
}

function environment()
{
  echo $'\n'"    environment:"
}

function envi()
{
  echo $'\n'"      - ${1}"
}

function nvidia()
{
  echo $'\n'"    deploy:"
  echo "      resources:"
  echo "        reservations:"
  echo "          devices:"
  echo "            - driver: nvidia"
  echo "              capabilities: [${2// /,}]"
  echo "              device_ids: [\"${1// /,}\"]"
}

begin_test "Docker compose override variable substitution"
(
  setup_test
  [ "$(_docker_compose_override_var_sub 'x')" = "" ]
  [ "$(_docker_compose_override_var_sub '$foo_bar')" = "foo_bar" ] # nobraces
  [ "$(_docker_compose_override_var_sub '${FOO_BAR}')" = "FOO_BAR" ]
)
end_test

begin_test "Environment echo"
(
  setup_test
  ans="    environment:"
  ans+=$'\n      - test=15'
  [ "$(_env_echo test 15)" = "${ans}" ]
  ans+=$'\n      - foo=bar'
  [ "$(_env_echo test 15;
       _env_echo foo bar)" = "${ans}" ]
)
end_test

begin_test "No services"
(
  setup_test
  [ "$(generate_docker_compose_override PROJECT)" = "$(head)" ]
)
end_test

begin_test "CLI"
(
  setup_test
  ans="$(head)$(service test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(environment)$(envi "JUST_HOST_WINDOWS=1")"
  fi
  # TEST_VOLUMES="/tmp:/temp:ro"
  # ans+="$(vol /tmp /temp:ro)"
  # don't redirect this, could hide errors
  "${VSI_COMMON_DIR}/linux/just_files/docker_compose_override" PROJECT test1
  [ "$("${VSI_COMMON_DIR}/linux/just_files/docker_compose_override" PROJECT test1)" = "${ans}" ]
)
end_test

begin_test "COMPOSE_VERSION 2.3"
(
  setup_test
  ans="$(head 2.3)$(service test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(environment)$(envi "JUST_HOST_WINDOWS=1")"
  fi
  ans+="$(service test2)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(environment)$(envi "JUST_HOST_WINDOWS=1")"
  fi
  COMPOSE_VERSION=2.3
  [ "$(generate_docker_compose_override PROJECT test1 test2)" = "${ans}" ]
)
end_test

begin_test "Just docker compose dynamic volumes"
(
  setup_test
  ans="$(head)$(service test1)$(volumes)"

  ans1="${ans}$(vol "$(real_path "${TESTDIR}")" /trash:z)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans1+="$(environment)$(envi "JUST_HOST_WINDOWS=1")"
  fi
  TEST_VOLUMES=(".:/trash:z")
  override="$(generate_docker_compose_override TEST test1)"
  [ "${override}" = "${ans1}" ]

  TEST_VOLUMES=("/tmp:/temp:ro")
  ans+="$(vol "$(real_path "/tmp")" /temp:ro)"
  override="$(generate_docker_compose_override TEST test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    [ "${override}" = "${ans}$(environment)$(envi "JUST_HOST_WINDOWS=1")" ]
  else
    assert_str_eq "${override}" "${ans}"
  fi

  TEST_TEST1_VOLUMES=("${TESTDIR}/src:/source:rw")

  ans+="$(vol "$(real_path "${TESTDIR}/src")" /source:rw)"
  override="$(generate_docker_compose_override TEST test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    [ "${override}" = "${ans}$(environment)$(envi "JUST_HOST_WINDOWS=1")" ]
  else
    assert_str_eq "${override}" "${ans}"
  fi

  TEST_VOLUME_1="${TESTDIR}/foo:/bar"
  ans+="$(vol "$(real_path "${TESTDIR}/foo")" /bar)"
  override="$(generate_docker_compose_override TEST test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    [ "${override}" = "${ans}$(environment)$(envi "JUST_HOST_WINDOWS=1")" ]
  else
    assert_str_eq "${override}" "${ans}"
  fi

  TEST_VOLUME_2="${TESTDIR}/foo2:/bar3"
  ans+="$(vol "$(real_path "${TESTDIR}/foo2")" /bar3)"
  override="$(generate_docker_compose_override TEST test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    [ "${override}" = "${ans}$(environment)$(envi "JUST_HOST_WINDOWS=1")" ]
  else
    assert_str_eq "${override}" "${ans}"
  fi

  TEST_TEST1_VOLUME_1="${TESTDIR}/bar:/foo"
  ans+="$(vol "$(real_path "${TESTDIR}/bar")" /foo)"
  override="$(generate_docker_compose_override TEST test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    [ "${override}" = "${ans}$(environment)$(envi "JUST_HOST_WINDOWS=1")" ]
  else
    assert_str_eq "${override}" "${ans}"
  fi

  TEST_TEST1_VOLUME_2="${TESTDIR}/bar2:/foo5"
  ans+="$(vol "$(real_path "${TESTDIR}/bar2")" /foo5)"
  override="$(generate_docker_compose_override TEST test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    [ "${override}" = "${ans}$(environment)$(envi "JUST_HOST_WINDOWS=1")" ]
  else
    assert_str_eq "${override}" "${ans}"
  fi
)
end_test

begin_test "Just docker compose dynamic environment"
(
  setup_test

  # Basic test
  ans="$(head)$(service test1)$(environment)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi
  ans+="$(envi TEST_ONE=2)$(envi TEST_ONE_HOST=1)"
  override="$(TEST_ONE_HOST=1 TEST_ONE_DOCKER=2 \
              generate_docker_compose_override TEST test1)"
  assert_str_eq "${override}" "${ans}"

  # Test with JUST_DISABLE_ENVIRONMENT_SWAP
  ans="$(head)$(service test1)$(environment)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi
  ans+="$(envi TEST_ONE_DOCKER=2)$(envi TEST_ONE_HOST=1)"
  override="$(TEST_ONE_HOST=1 TEST_ONE_DOCKER=2 JUST_DISABLE_ENVIRONMENT_SWAP=1 \
              generate_docker_compose_override TEST test1)"
  assert_str_eq "${override}" "${ans}"

  # Ignores non-project variables
  ans="$(head)$(service test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(environment)$(envi "JUST_HOST_WINDOWS=1")"
  fi
  override="$(TEST_ONE_HOST=1 TEST_ONE_DOCKER=2 \
              generate_docker_compose_override TEST2 test1)"
  assert_str_eq "${override}" "${ans}"
)
end_test

begin_test "Just docker compose dynamic nvidia"
(
  setup_test

  # Basic test
  ans="$(head)$(service test1)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(environment)$(envi "JUST_HOST_WINDOWS=1")"
  fi
  override="$(generate_docker_compose_override TEST test1)"
  assert_str_eq "${override}" "${ans}"

  # *_NVIDIA_VISIBLE_DEVICES & *_NVIDIA_DRIVER_CAPABILITIES
  indices="0 1 2 3"
  capabilities="compute utility"
  ans+=$(nvidia "${indices}" "${capabilities}")
  override="$(TEST_NVIDIA_VISIBLE_DEVICES="${indices}" \
              TEST_NVIDIA_DRIVER_CAPABILITIES="${capabilities}" \
              generate_docker_compose_override TEST test1)"
  assert_str_eq "${override}" "${ans}"

  # Ignores non-project variables
  override="$(TEST_NVIDIA_VISIBLE_DEVICES="${indices}" \
              TEST_NVIDIA_DRIVER_CAPABILITIES="${capabilities}" \
              TEST2_NVIDIA_VISIBLE_DEVICES="0 1" \
              TEST2_NVIDIA_DRIVER_CAPABILITIES="gpu" \
              generate_docker_compose_override TEST test1)"
  assert_str_eq "${override}" "${ans}"
)
end_test

linux_nfs="\
Filesystem                       1K-blocks        Used   Available Use% Mounted on
filetodata-2:/volume1/projects 23320723712 22239875584  1080729344  96%"

setup_mock()
{
  TESTDIR="$(real_path "${TESTDIR}")"
  function df()
  {
    return 1
  }
}

begin_test "Generate docker compose override"
(
  setup_test
  setup_mock

  TEST_VOLUMES=("${TESTDIR}/a/a:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/a:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/a/b:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/a/c:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/b/a:/foo/bar")
  TEST_VOLUMES+=("vol1:/test1")
  TEST_VOLUMES+=("vol2:/test2")
  TEST_VOLUMES+=("vol3:/test3:ro")
  TEST_NVIDIA_VISIBLE_DEVICES="0 1 2 3"
  TEST_NVIDIA_DRIVER_CAPABILITIES="compute utility"

  override="$(generate_docker_compose_override TEST test1)"

  ans="$(head)$(service test1)$(volumes)"
  ans+="$(vol "${TESTDIR}/a/a" "/this is  a   test")"
  ans+="$(vol "${TESTDIR}/a" "/this is  a   test")"
  ans+="$(vol "${TESTDIR}/a/b" "/this is  a   test")"
  ans+="$(vol "${TESTDIR}/a/c" "/this is  a   test")"
  ans+="$(vol "${TESTDIR}/b/a" "/foo/bar")"
  ans+="$(vol "vol1" "/test1")"
  ans+="$(vol "vol2" "/test2")"
  ans+="$(vol "vol3" "/test3:ro")"
  ans+="$(environment)"
  ans+="$(envi JUST_DOCKER_ENTRYPOINT_INTERNAL_VOLUMES=/test1///test2)"
  ans+="$(envi JUST_DOCKER_ENTRYPOINT_INTERNAL_RO_VOLUMES=/test3)"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi
  ans+="$(nvidia "${TEST_NVIDIA_VISIBLE_DEVICES}" \
                 "${TEST_NVIDIA_DRIVER_CAPABILITIES}")"
  ans+=$'\nvolumes:'
  ans+=$'\n  vol1:'
  ans+=$'\n  vol2:'
  ans+=$'\n  vol3:'

  assert_str_eq "${override}" "${ans}"
)
end_test

setup_mock()
{
  # Modify both df and the unit test to use the real_path of TESTDIR
  # This fixes macOS where the tmp dir is really in private
  TESTDIR="$(real_path "${TESTDIR}")"

  function df()
  {
    local last_arg="${!#}"

    if [[ ${last_arg} = ${TESTDIR}* ]]; then
      echo "${linux_nfs} ${TESTDIR}/${last_arg:${#TESTDIR}+1:1}"
      return 0
    fi
    return 1
  }
}

begin_test "Generate docker compose override on nfs"
(
  setup_test
  setup_mock

  TEST_VOLUMES=("${TESTDIR}/a/a:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/a:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/a/b:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/a/c:/this is  a   test")
  TEST_VOLUMES+=("${TESTDIR}/a/d:/this is  a   test/subdir")
  TEST_VOLUMES+=("${TESTDIR}/b/a:/foo/bar")
  TEST_NVIDIA_VISIBLE_DEVICES="0 1 2 3"
  TEST_NVIDIA_DRIVER_CAPABILITIES="compute utility"

  override="$(generate_docker_compose_override TEST test1)"

  ans="$(head)$(service test1)$(volumes)"
  ans+="$(vol "${TESTDIR}/a" "/host_mnt${TESTDIR}/a")"
  ans+="$(vol "${TESTDIR}/a" "/this is  a   test")"
  ans+="$(vol "${TESTDIR}/b" "/host_mnt${TESTDIR}/b")"
  ans+="$(environment)"
  ans_el="/host_mnt${TESTDIR}/a/a:"
  ans_el+="/this is  a   test:"
  ans_el+="/host_mnt${TESTDIR}/a/b:"
  ans_el+="/this is  a   test:"
  ans_el+="/host_mnt${TESTDIR}/a/c:"
  ans_el+="/this is  a   test:"
  ans_el+="/host_mnt${TESTDIR}/a/d:"
  ans_el+="/this is  a   test/subdir:"
  ans_el+="/host_mnt${TESTDIR}/b/a:"
  ans_el+="/foo/bar"
  ans+="$(envi "JUST_DOCKER_ENTRYPOINT_LINKS=${ans_el}")"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi
  ans+="$(nvidia "${TEST_NVIDIA_VISIBLE_DEVICES}" \
                 "${TEST_NVIDIA_DRIVER_CAPABILITIES}")"

  assert_str_eq "${override}" "${ans}"
)
end_test

setup_mock()
{
  TESTDIR="$(real_path "${TESTDIR}")"
  function df()
  {
    local last_arg="${!#}"

    if [[ ${last_arg}/ = ${TESTDIR}/* ]]; then
      echo "${linux_nfs} ${TESTDIR}"
      return 0
    fi
    return 1
  }
}

begin_expected_fail_test "Issue #7 Scenario 1"
(
  setup_test
  setup_mock

  TEST_VOLUMES=("home_mount:/home/andy" # This one should be in the docker-compose.yml file
                "${TESTDIR}/a/a:/home/andy")

  override="$(generate_docker_compose_override TEST test1)"

  ans="$(head)$(service test1)$(volumes)"
  # This should not be here, that's the point of Scenario #1
  # ans+="$(vol "home_mount:/home/andy")"
  ans+="$(vol "${TESTDIR}" "/host_mnt${TESTDIR}")"
  ans+="$(environment)"
  ans_el="/host_mnt${TESTDIR}/a/a:"
  ans_el+="/home/andy"
  ans+="$(envi "JUST_DOCKER_ENTRYPOINT_LINKS=${ans_el}")"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi

  begin_fail_zone
  assert_str_eq "${override}" "${ans}"
)
end_test

begin_test "Issue #7 Scenario 2"
(
  setup_test
  setup_mock

  TEST_VOLUMES=("${TESTDIR}/a/a:/this"
                "${TESTDIR}:/this")

  override="$(generate_docker_compose_override TEST test1)"

  ans="$(head)$(service test1)$(volumes)"
  ans+="$(vol "${TESTDIR}" "/host_mnt${TESTDIR}")"
  ans+="$(vol "${TESTDIR}" "/this")"
  ans+="$(environment)"
  ans_el="/host_mnt${TESTDIR}/a/a:"
  ans_el+="/this"
  ans+="$(envi "JUST_DOCKER_ENTRYPOINT_LINKS=${ans_el}")"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi

  assert_str_eq "${override}" "${ans}"
)
end_test

begin_expected_fail_test "Issue #7 Scenario 3"
(
  setup_test
  setup_mock

  TEST_VOLUMES=("${TESTDIR}:/this"
                "${TESTDIR}/a/a:/this")

  override="$(generate_docker_compose_override TEST test1)"

  ans="$(head)$(service test1)$(volumes)"
  # This should not be here, that's the point of Scenario #3
  # ans+="$(vol "${TESTDIR}:/this")"
  ans+="$(vol "${TESTDIR}" "/host_mnt${TESTDIR}")"
  ans+="$(environment)"
  ans_el="/host_mnt${TESTDIR}/a/a:"
  ans_el+="/this"
  ans+="$(envi "JUST_DOCKER_ENTRYPOINT_LINKS=${ans_el}")"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi

  begin_fail_zone
  assert_str_eq "${override}" "${ans}"
)
end_test

begin_test "Issue #7 Scenario 4"
(
  setup_test
  setup_mock

  TEST_VOLUMES=("home_mount:/home" # This one should be in the docker-compose.yml file
                "${TESTDIR}/a/a:/home/andy")

  override="$(generate_docker_compose_override TEST test1)"

  ans="$(head)$(service test1)$(volumes)"
  # This should not be here, that's the point of Scenario #4
  ans+="$(vol "home_mount" "/home")"
  ans+="$(vol "${TESTDIR}" "/host_mnt${TESTDIR}")"
  ans+="$(environment)"
  ans_el="/host_mnt${TESTDIR}/a/a:"
  ans_el+="/home/andy"
  ans+="$(envi "JUST_DOCKER_ENTRYPOINT_LINKS=${ans_el}")"
  if [ "${OS-}" = "Windows_NT" ]; then
    ans+="$(envi "JUST_HOST_WINDOWS=1")"
  fi
)
end_test
