#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/just_functions.bsh"

setup()
{
  help_head=$'\nList of possible test-just_functions.bsh commands:\n'
  help_head+=$'-----------------------------------\n'
  help_subc=$'\nSubcommands\n'
  help_subc+=$'-----------\n'

  # Keep the results consistent, plus on darling, TERM isn't set by default
  # (xterm-256color). The only tput call expected is "tput cols"
  tput()
  {
    echo 80
  }

  # This prevents powershell being being called in wine
  export JUST_IS_TTY=1
}

begin_test "JUST_VERSION check"
(
  setup_test
  . ${VSI_COMMON_DIR}/linux/just_files/just_version.bsh
  JUST_SETTINGS=/dev/null

  message="$(set +xv; JUST_VERSION="${JUST_VERSION}" check_just_version 2>&1 1>/dev/null)"
  [ "${message}" = "" ]

  message="$(set +xv; JUST_VERSION="${JUST_VERSION}.1" check_just_version 2>&1 1>/dev/null)"
  assert_starts_with "${message}" WARNING:
)
end_test

begin_test "source_environment_files"
(
  setup_test

  echo "justtest=15" > test.env
  [ ! -e local.env ]
  source_environment_files test.env
  [ -e local.env ] # Verify local.env is auto generated
  [ "${justtest}" = "15" ]
  unset justtest

  echo 'plug=in' > plugin1
  echo 'plugin1' > .justplugins
  echo ': ${a=15}' > test2.env
  echo ': ${b=${a}1}' >> test2.env
  echo 'a=17' > local.env
  echo 'c=${b}2' > custom.env
  JUST_LOCAL_SETTINGS_POST=custom.env source_environment_files test2.env
  [ "${a}" = "17" ]
  [ "${b}" = "171" ]
  [ "${c}" = "1712" ]
  [ -z "${justtest+set}" ]
  [ "${plug}" = "in" ]
)
end_test

begin_test "Windows path escape"
(
  setup_test

  JUST_PROJECT_PREFIX=TESTTHIS

  auto_path_escape # No error when undefined

  TESTTHIS_AUTO_ESCAPE='TESTTHAT_.*_LOCKER'

  # Non-matches
  export TESTTHAT=/a
  export TESTTHAT_LOCKER=/b
  export TESTTHIS_BAR_LOCKER=/foo
  # Matches
  export TESTTHAT_FOO_LOCKER=/bar
  export TESTTHAT_FOO2_LOCKER=/
  export TESTTHAT_FOO3_LOCKER=bar/car
  export TESTTHAT_FOO4_LOCKER=./bar
  export TESTTHAT_FOO5_LOCKER=nothing
  export TESTTHAT_FOO6_LOCKER=//foo/bar/

  auto_path_escape

  [ "${TESTTHAT}" = "/a" ]
  [ "${TESTTHAT_LOCKER}" = "/b" ]
  [ "${TESTTHIS_BAR_LOCKER}" == "/foo" ]
  [ "${TESTTHAT_FOO_LOCKER}" = "//bar" ]
  [ "${TESTTHAT_FOO2_LOCKER}" = "//" ]
  [ "${TESTTHAT_FOO3_LOCKER}" = "bar/car" ]
  [ "${TESTTHAT_FOO4_LOCKER}" = "./bar" ]
  [ "${TESTTHAT_FOO5_LOCKER}" = "nothing" ]
  [ "${TESTTHAT_FOO6_LOCKER}" = "//foo/bar/" ]
)
end_test

begin_test "local.env in read-only (#84)"
(
  setup_test

  # I don't want to chmod this current directory, out and err write there!
  mkdir just
  cd just

  echo "justtest=15" > test.env
  chmod 555 .
  [ ! -e local.env ]
  source_environment_files test.env
  # This will be created if windows or root...
  # [ ! -e local.env ] # Verify local.env is not auto generated

  # Fix permissions, or else testlib gets a little upset/verbose.
  chmod 755 .
)
end_test

begin_test "set_temp_array"
(
  setup_test
  not declare -p JUST_TEMP_ARRAY 2> /dev/null
  not declare -p MY_ARRAY 2> /dev/null
  set_temp_array MY_ARRAY
  [ "${#JUST_TEMP_ARRAY[@]}" = "0" ]
  unset JUST_TEMP_ARRAY

  not declare -p MY_ARRAY 2> /dev/null
  not declare -p JUST_TEMP_ARRAY 2> /dev/null
  set_temp_array MY_ARRAY default1 default\ 2 "default  3"
  assert_array_values JUST_TEMP_ARRAY default1 "default 2" "default  3"

  unset JUST_TEMP_ARRAY
  MY_ARRAY=(11 22)
  set_temp_array MY_ARRAY default1 default\ 2 "default  3"
  assert_array_values JUST_TEMP_ARRAY 11 22
)
end_test

begin_test "set_array_default"
(
  setup_test
  not declare -p MY_ARRAY 2>/dev/null
  set_array_default MY_ARRAY
  [ "${#MY_ARRAY[@]}" = "0" ]
  unset MY_ARRAY

  not declare -p MY_ARRAY 2>/dev/null
  set_array_default MY_ARRAY default1 default\ 2 "default  3"
  assert_array_values MY_ARRAY default1 "default 2" "default  3"

  MY_ARRAY=(11 22)
  unset MY_ARRAY[0]
  set_array_default MY_ARRAY default1 default\ 2 "default  3"
  [ "${#MY_ARRAY[@]}" = "1" ]
  assert_array_values MY_ARRAY 22

  set_array_default default foo bar
  assert_array_values default foo bar
)
end_test

begin_test "pretty print help wrapping"
(
  setup_test

  # For this test, use tput cols of 20
  tput()
  {
    echo 20
  }

  indent=10

  input="test1 ${JUST_HELP_SEPARATOR} 123456789abcdefghijk l mnopq"
  input+=$'\n'"test2 ${JUST_HELP_SEPARATOR} x 123456789abcdefghij l mnopq"
  input+=$'\n'"test3 ${JUST_HELP_SEPARATOR} x 123456789abcdefghi l mnopq"
  input+=$'\n'"test4 ${JUST_HELP_SEPARATOR} x 123456789abcdefghi lm nopq"
  input+=$'\n'"TEST5 ${JUST_HELP_SEPARATOR} 01 3 5 7 9 0"
  input+=$'\n'"test6 ${JUST_HELP_SEPARATOR} 1 3 3647e89"

  help="$(pretty_print_help <<< "${input}")"
  ans=$'test1     123456789a\n'
  ans+=$'          bcdefghijk\n'
  ans+=$'          l mnopq\n'
  ans+=$'test2     x\n'
  ans+=$'          123456789a\n'
  ans+=$'          bcdefghij\n'
  ans+=$'          l mnopq\n'
  ans+=$'test3     x\n'
  ans+=$'          123456789a\n'
  ans+=$'          bcdefghi l\n'
  ans+=$'          mnopq\n'
  ans+=$'test4     x\n'
  ans+=$'          123456789a\n'
  ans+=$'          bcdefghi\n'
  ans+=$'          lm nopq\n'
  ans+=$'TEST5     01 3 5 7 9\n'
  ans+=$'test6     1 3\n'
  ans+=$'          3647e89'
  [ "${help}" = "${ans}" ]
)
end_test

begin_test "print help basic"
(
  setup_test

  JUST_HELP_FILES=(file1)

  echo ' a) # Test 1' > file1
  echo ' b) #' >> file1
  ans="${help_head}"
  ans+=$'a   Test 1\n'
  ans+=$'b  \n'
  anss="${help_subc}    "
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help comment multiple line continuation"
(
  setup_test

  JUST_HELP_FILES=(file1)

  # Test with comment continuation
  echo ' b) # Cat \' > file1
  echo '    # and dog' >> file1
  echo '    # Not included' >> file1
  echo ' c) # Run C++' >> file1
  ans="${help_head}"
  ans+=$'b   Cat and dog\n'
  ans+=$'c   Run C++\n'
  anss="${help_subc}    "
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help multiple files"
(
  setup_test

  JUST_HELP_FILES=(file1)

  # Test 1 out of 2 files
  echo ' c) # Run C++' > file1
  ans="${help_head}"
  ans+=$'c   Run C++\n'
  anss="${help_subc}    "
  [ "$(print_help)" = "${ans}${anss}" ]

  JUST_HELP_FILES+=(file2)

  # Test 2 out of 2 files
  echo ' d) #Test this' > file2
  ans+=$'d   Test this\n'
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help automatic indent adjustment"
(
  setup_test

  JUST_HELP_FILES=(file1 file2)

  # Test indent width
  echo ' a) # Test 1' > file1
  echo ' superjust) # Just with super powers' > file2
  ans="${help_head}"
  ans+=$'a          Test 1\n'
  ans+=$'superjust  Just with super powers\n'
  anss="${help_subc}"
  anss+="    "
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help sub commands"
(
  setup_test

  JUST_HELP_FILES=(file2)

  # Test help_subcommands
  echo "sub_this) # foo" > file2
  ans="${help_head}"
  anss="${help_subc}"
  anss+=$'sub      \n'
  anss+=$'    this  foo'
  [ "$(print_help)" = "${ans}${anss}" ]

  JUST_HELP_FILES=(file1 file2)

  # Should be alphabetized
  echo "sub_that) # bat" > file1

  anss="${help_subc}"
  anss+=$'sub      \n'
  anss+=$'    that  bat\n'
  anss+=$'    this  foo'
  [ "$(print_help)" = "${ans}${anss}" ]

  echo "sub_*) # rest" > file2
  anss="${help_subc}"
  anss+=$'sub      \n'
  anss+=$'    *     rest\n'
  anss+=$'    that  bat'
  [ "$(print_help)" = "${ans}${anss}" ]

)
end_test

begin_test "print help flags"
(
  setup_test

  JUST_HELP_FILES=(file1)

  echo "-flag) # Flag 1" > file1
  echo "-a) # Archive" >> file1
  echo "foo) #Bar" >> file1
  echo "apple) # Tree" >> file1
  ans="${help_head}"
  ans+=$'apple  Tree\n'
  ans+=$'foo    Bar\n'
  ans+=$'-a     Archive\n'
  ans+=$'-flag  Flag 1\n'
  anss="${help_subc}"
  anss+="    "
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help multiple commands"
(
  setup_test

  JUST_HELP_FILES=(file1)

  echo '-jump|\' > file1
  echo '-rope) # Two line' >> file1
  ans="${help_head}"
  ans+=$'-jump  Two line\n'
  ans+=$'-rope  Two line\n'
  anss="${help_subc}    "
  [ "$(print_help)" = "${ans}${anss}" ]

  echo "-beach) # Normal line" > file1
  echo "-sea|-water|-ocean) # Long line" >> file1
  ans="${help_head}"
  ans+=$'-beach  Normal line\n'
  ans+=$'-ocean  Long line\n'
  ans+=$'-sea    Long line\n'
  ans+=$'-water  Long line\n'
  anss="${help_subc}    "
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help Mixed subcommand and commands"
(
  setup_test

  JUST_HELP_FILES=(file1)

  echo 'shortcut|short_sub|sc) # Mixed mode' > file1
  echo 'best_sub|bsc) # Mixed mode' >> file1
  echo 'testcut|test_sub) # Mixed mode' >> file1
  ans="${help_head}"
  ans+=$'bsc       Mixed mode\n'
  ans+=$'sc        Mixed mode\n'
  ans+=$'shortcut  Mixed mode\n'
  ans+=$'testcut   Mixed mode\n'
  anss="${help_subc}"
  anss+=$'best      \n'
  anss+=$'    sub    Mixed mode\n'
  anss+=$'short     \n'
  anss+=$'    sub    Mixed mode\n'
  anss+=$'test      \n'
  anss+=$'    sub    Mixed mode'
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help expansion"
(
  setup_test

  JUST_HELP_FILES=(file2)

  # Target expansion feature
  echo '#start_{SERVICE_NAMES}) # Start service' > file2
  echo " start_*)" >> file2 # The real start line
  SERVICE_NAMES=(a bb c)
  ans="${help_head}"
  anss="${help_subc}"
  anss+=$'start    \n'
  anss+=$'    a     Start service a\n'
  anss+=$'    bb    Start service bb\n'
  anss+=$'    c     Start service c'
  [ "$(print_help)" = "${ans}${anss}" ]

  # Uncommented
  echo 'stop_{SERVICE_NAMES})' >> file2
  echo 'clear)' >> file2
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "print help test it all"
(
  setup_test

  JUST_HELP_FILES=(file1 file2 file3 file4)

  echo ' b) # Cat \' > file1
  echo '    # and dog' >> file1
  echo '    # Not included' >> file1
  echo ' c) # Run C++' >> file1


  SERVICE_NAMES=(a notb c)
  echo '#start_{SERVICE_NAMES}) # Start service' > file2
  echo " start_*)" >> file2 # The real start line
  echo " stop_*) # Stop service" >> file2 # Using commented wildcard subcommand

  echo "-flag) # Flag 1" > file3
  echo "-a) # Archive" >> file3
  echo "foo) #Bar" >> file3
  echo "apple) # Tree" >> file3

  echo '-jump|\' > file4
  echo '-rope) # Two line' >> file4
  echo "-sea|-water|-ocean) # Long line" >> file4

  ans="${help_head}"

  ans="${help_head}"
  ans+=$'apple   Tree\n'
  ans+=$'b       Cat and dog\n'
  ans+=$'c       Run C++\n'
  ans+=$'foo     Bar\n'
  ans+=$'-a      Archive\n'
  ans+=$'-flag   Flag 1\n'
  ans+=$'-jump   Two line\n'
  ans+=$'-ocean  Long line\n'
  ans+=$'-rope   Two line\n'
  ans+=$'-sea    Long line\n'
  ans+=$'-water  Long line\n'

  anss="${help_subc}"
  anss+=$'start      \n'
  anss+=$'    a       Start service a\n'
  anss+=$'    c       Start service c\n'
  anss+=$'    notb    Start service notb\n'
  anss+=$'stop       \n'
  anss+=$'    *       Stop service'

  # [ "$(print_help | xxd)" = "$(xxd <<< "${ans}${anss}")" ]
  [ "$(print_help)" = "${ans}${anss}" ]
)
end_test

begin_test "defaultify DRYRUN trigger"
(
  setup_test

  [ "${DRYRUN}" = "" ]
  defaultify --dryrun
  [ "${DRYRUN}" = "print_command_env just --wrap" ]

  DRYRUN=""
  defaultify -n
  [ "${DRYRUN}" = "print_command_env just --wrap" ]
)
end_test

begin_test "defaultify separator"
(
  setup_test

  [ "${JUST_SEPARATOR}" = "--" ]
  defaultify --separator ':)'
  [ "${JUST_SEPARATOR}" = ":)" ]
)
end_test

begin_test "defaultify calling unknowify"
(
  setup_test

  x=1

  function unknownify()
  {
    x="QQ${1}qq"
  }

  defaultify testthis

  [ "${x}" = "QQtestthisqq" ]
)
end_test

begin_test "justify calls"
(
  setup_test

  function add()
  {
    echo "${1}) # Blah" >> file1
    echo '  echo ":'"${1}"':" ${@+"${@}"}' >> file1
    echo "  extra=${2-0}" >> file1
    echo '  extra_args=$(( extra > $# ? $# : extra))' >> file1
    echo '  ;;' >> file1
  }

  JUST_HELP_FILES=(file1)

  echo 'function caseify()' > file1
  echo '{' >> file1
  echo '  local just_arg=${1}' >> file1
  echo '  shift 1' >> file1
  echo '  case ${just_arg} in' >> file1


  add foo
  add apple 1
  add bar 2
  echo '#start_{SERVICE_NAMES}) # Start service' >> file1
  add 'start_*'

  add stop_a
  add stop_c
  add '-flag'
  add '-a'

  echo '-jump|\' >> file1
  add rope '$#'
  add '-sea|-water|-ocean'
  echo '*)' >> file1
  echo '  echo "!${just_arg}!" ${@+"${@}"}' >> file1
  echo '  ;;' >> file1
  echo 'esac' >> file1
  echo '}' >> file1

  # Set up service names
  SERVICE_NAMES=(a qwertyuiop c)
  . file1

  # Normal call
  [ "$(justify foo)" = $':foo:' ]

  # Two normal calls
  [ "$(justify foo foo)" = $':foo: foo\n:foo:' ]

  # Call with one argument
  [ "$(justify apple)" = ":apple:" ] # Missing arg
  [ "$(justify apple tree)" = ":apple: tree" ] # With arg
  [ "$(justify apple tree park)" = $':apple: tree park\n!park!' ] # 2nd arg should be a new call

  # Two args
  [ "$(justify bar)" = ":bar:" ] # Missing arg
  [ "$(justify bar tree)" = ":bar: tree" ] # One arg
  [ "$(justify bar tree park)" = $':bar: tree park' ] # Two args
  [ "$(justify bar tree park zoo)" = $':bar: tree park zoo\n!zoo!' ] # 3rd arg should be a new call
  [ "$(justify bar tree -- apple)" = $':bar: tree\n:apple:' ] # 2 args plus new call
  [ "$(justify bar tree park --)" = $':bar: tree park' ] # 2 args
  [ "$(justify bar tree --)" = $':bar: tree' ] # 1 args

  [ "$(justify bar tree -- bar tree -- apple)" = $':bar: tree\n:bar: tree\n:apple:' ] # 2 args * 2 plus new call
  [ "$(justify bar tree -- bar tree -- apple --)" = $':bar: tree\n:bar: tree\n:apple:' ] # with trailing --
  [ "$(justify bar tree -- -- bar tree -- --)" = $':bar: tree\n:bar: tree' ] # with multiple --
  [ "$(justify bar tree -- bar tree -- --)" = $':bar: tree\n:bar: tree' ] # with two trailing --

  # All args
  [ "$(justify rope)" = ":rope:" ] # 0 args
  [ "$(justify rope twine)" = ":rope: twine" ] # 1 arg
  [ "$(justify rope twine cord)" = ":rope: twine cord" ] # 2 args
  [ "$(justify rope twine sisal string thread yarn lace)" = \
    ":rope: twine sisal string thread yarn lace" ] # 6 args

  [ "$(justify rope twine -- apple)" = $':rope: twine\n:apple:' ] # 2 args plus new call

  # Multiple of same target
  [ "$(justify -sea -ocean -water)" = \
    $':-sea|-water|-ocean: -ocean -water\n:-sea|-water|-ocean: -water\n:-sea|-water|-ocean:' ]

  # Misc - Using other target value
  [ "$(justify -jump rope)" = $':rope: rope' ] # This one is weird because of the
  # way I made the test. The echo only echos rope, no matter what just_arg is.
  # It has no implication on how justify works at all, so don't think too hard
  # about it

  # Valid subcommands
  [ "$(justify start a)" = ':start_*:' ]
  [ "$(justify stop a)" = ':stop_a:' ]

  # Multiple subcommands
  [ "$(justify start a c)" = $':start_*: c\n:start_*:' ]
  [ "$(justify stop a c)" = $':stop_a: c\n:stop_c:' ]
  [ "$(justify start a start c)" = $':start_*: start c\n:start_*:' ]
  [ "$(justify stop a stop c)" = $':stop_a: stop c\n:stop_c:' ]
  # Mix it up
  [ "$(justify start a stop c)" = $':start_*: stop c\n:stop_c:' ]
  [ "$(justify stop a start c)" = $':stop_a: start c\n:start_*:' ]

  # Invalid subcommand
  [ "$(justify start b)" = $'!start! b\n!b!' ]
  [ "$(justify stop b)" = $'!stop! b\n!b!' ]
)
end_test

begin_test "recursive justify calls #81"
(
  setup_test

  JUST_HELP_FILES=(file1)

  function caseify()
  {
    local just_arg="${1}"
    shift 1
    case ${just_arg} in
      a) # A
        echo ":a: ${1}"
        justify b "${1}"
        extra_args=1
        ;;
      b) # B
        echo ":b: ${1}"
        extra_args=1
        ;;
    esac
  }

  declare -pf > file1

  [ "$(justify a apple a tree)" = $':a: apple\n:b: apple\n:a: tree\n:b: tree' ]
)
end_test

begin_test "justify with .justplugins"
(
  setup_test

  # Create min plugin
  echo 'JUST_DEFAULTIFY_FUNCTIONS+=(my_defaultify)' > my_plugin
  echo 'JUST_HELP_FILES+=("${BASH_SOURCE[0]}")' >> my_plugin
  echo 'my_defaultify(){ if [ "${1}" = "apple" ]; then echo tree; else plugin_not_found=1; fi; }' >> my_plugin

  # Set plugin
  echo 'my_plugin' > .justplugins

  # Create dummy project file
  touch blah.env

  # Create min Justfile
  echo 'source_environment_files blah.env' > Justfile # This is needed, or else plugins don't work
  echo 'caseify(){ defaultify ${@+"${@}"}; }' >> Justfile

  # Silence version check
  source "${VSI_COMMON_DIR}/linux/just_files/just_version.bsh"
  export JUST_VERSION

  [ "$(just apple 2>&1)" = "tree" ]
  [ "$(just notapple 2>&1 || :)" = "$(set +xv; unknownify notapple 2>&1 || :)" ]
)
end_test

begin_test "callify"
(
  setup_test

  test1()
  {
    # echo $# >&2
    for x in $(seq 1 1 $#); do
      # echo $x >&2
      printf "${x}:${@:$x:1} "
    done
  }

  # No args
  [ "$(callify test1)" == "" ]
  [ "$(callify test1 -- 11)" == "" ]
  [ "$(callify test1 -- 11 --)" == "" ]

  # One arg
  [ "$(callify test1 11)" == "1:11 " ]
  [ "$(callify test1 11 --)" == "1:11 " ]
  [ "$(callify test1 11 -- 22)" == "1:11 " ]

  # Many args
  [ "$(callify test1 11 12 13)" == "1:11 2:12 3:13 " ]
  [ "$(callify test1 11 12 13 14 --)" == "1:11 2:12 3:13 4:14 " ]
  [ "$(callify test1 11 12 -- 22)" == "1:11 2:12 " ]

  # Custom Separator
  JUST_SEPARATOR='$@$'
  [ "$(callify test1 11 -- 22 '$@$' 33)" == "1:11 2:-- 3:22 " ]
)
end_test

begin_test "get_args"
(
  setup_test

  # No args
  get_args
  assert_array_values args
  [ "${get_args_args_used}" -eq 0 ]
  get_args -- 11
  assert_array_values args
  [ "${get_args_args_used}" -eq 1 ]
  get_args -- 11 --
  assert_array_values args
  [ "${get_args_args_used}" -eq 1 ]

  # One arg
  get_args 11
  assert_array_values args 11
  [ "${get_args_args_used}" -eq 1 ]
  get_args 11 --
  assert_array_values args 11
  [ "${get_args_args_used}" -eq 2 ]
  get_args 11 -- 22
  assert_array_values args 11
  [ "${get_args_args_used}" -eq 2 ]

  # Multiple args
  get_args 11 12 13
  assert_array_values args 11 12 13
  [ "${get_args_args_used}" -eq 3 ]
  get_args 11 12 13 14 --
  assert_array_values args 11 12 13 14
  [ "${get_args_args_used}" -eq 5 ]
  get_args 11 12 -- 22
  assert_array_values args 11 12
  [ "${get_args_args_used}" -eq 3 ]

  # Custom Separator
  JUST_SEPARATOR='$@$'
  get_args 11 -- 22 '$@$' 33
  assert_array_values args 11 -- 22
  [ "${get_args_args_used}" -eq 4 ]
)
end_test

begin_test "get_additional_args"
(
  setup_test

  my_args=(11 -- 22 23 -- 33 -- -- 55)

  get_args "${my_args[@]}"
  assert_array_values args 11

  get_additional_args "${my_args[@]}"
  assert_array_values args 22 23

  get_additional_args "${my_args[@]}"
  assert_array_values args 33

  get_additional_args "${my_args[@]}"
  assert_array_values args

  get_additional_args "${my_args[@]}"
  assert_array_values args 55
)
end_test

# Bash 3.2 handles unset declared variables different from modern bash
[ "${BASH_VERSINFO[0]}" -lt 4 ] && skip_next_test
begin_required_fail_test "get_additional_args called without get_args"
(
  setup_test
  begin_fail_zone
  get_additional_args 11 -- 22 -- 33
)
end_test

begin_test "safe_load"
(
  setup_test
  echo 'a=12' > file1
  echo 'b=sixteen' >> file1
  echo 'c=eval $((1+15));`touch file2`' >> file1

  safe_load file1

  [ "${a}" = "12" ]
  [ "${b}" = "sixteen" ]
  [ "${c}" = 'eval $((1+15));`touch file2`' ]

  [ ! -f file2 ]

  # Custom delimiter
  JUST_SAFE_LOAD_DELIMITER=:
  echo 'd:21' > file2
  safe_load file2
  [ "${d}" = "21" ]

)
end_test

begin_test "Need tty"
(
  setup_test

  function powershell()
  {
    echo "${result}"
  }

  unset SSH_TTY
  unset JUST_IS_TTY

  OS=not_windows not need_tty
  OS=Windows_NT JUST_IS_TTY=1 not need_tty
  JUST_IS_TTY=0 OS=Windows_NT need_tty

  SSH_TTY= result="None" OS=Windows_NT not need_tty
  result="\msys-1888ae32e00d56aa-pty0-from-master" OS=Windows_NT need_tty
  SSH_TTY=windows-pty result="None" OS=Windows_NT need_tty
)
end_test

begin_test "Translate Just Settings"
(
  setup_test

  # Windows style escaped
  JUST_SETTINGS=//c/foo/bar/////c/foo/car/////c/foo/external/stuff
  translate_just_settings /c/foo /src
  assert_array_values JUST_SETTINGSS /src/bar /src/car /src/external/stuff

  # Different combos of windows style escaped
  JUST_SETTINGS=/c/foo/bar
  translate_just_settings /c/foo //src
  assert_array_values JUST_SETTINGSS //src/bar

  JUST_SETTINGS=//c/foo/bar
  translate_just_settings /c/foo //src
  assert_array_values JUST_SETTINGSS //src/bar

  JUST_SETTINGS=/c/foo/bar
  translate_just_settings //c/foo //src
  assert_array_values JUST_SETTINGSS //src/bar

  # Empty test
  unset JUST_SETTINGS
  translate_just_settings /test
  # Make sure empty
  assert_array_values JUST_SETTINGSS

  # Normal
  JUST_SETTINGS=/foo/bar
  translate_just_settings /foo /src
  assert_array_values JUST_SETTINGSS /src/bar

  # Multiple
  JUST_SETTINGS=/foo/bar////foo/car
  translate_just_settings /foo /src
  assert_array_values JUST_SETTINGSS /src/bar /src/car
)
end_test