#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/bash_utils.bsh"
source "${VSI_COMMON_DIR}/linux/string_tools.bsh"
source "${VSI_COMMON_DIR}/linux/quotemire"

function clean_trace()
{
  if [ "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -lt "41" ]; then
    set +xv
  fi
}

begin_test "Print stack trace"
(
  setup_test

  function foo()
  {
    bar
  }
  function bar()
  {
    print_bash_stack
  }

  nl=$'\n'

  tb="$(clean_trace; bar 2>&1)"
  assert_starts_with "${tb}" "Call stack"
  assert_regex_eq "${tb}" "${nl}"'1\. bar\(\) *:[0-9]* *'"$(regex_escape "${BASH_SOURCE[0]}")"

  tb="$(clean_trace; set +xv; foo 2>&1)"
  assert_starts_with "${tb}" "Call stack"
  assert_regex_eq "${tb}" "${nl}"'1\. bar\(\) *:[0-9]* *'"$(regex_escape "${BASH_SOURCE[0]}")"
  assert_regex_eq "${tb}" "${nl}"'2\. foo\(\) *:[0-9]* *'"$(regex_escape "${BASH_SOURCE[0]}")"
)
end_test

if ! command -v screen >& /dev/null; then
  skip_next_test
elif [[ ${OSTYPE-} = darwin* ]] && [ "$(sw_vers -buildVersion)" = "Darling" ]; then
  # Screen doesn't work in darling
  skip_next_test
fi


function sanitize_session_name()
{
  local session="${1////}"
  session="${session//[^a-zA-Z0-9-]/_}"
  echo -n "${session}"
}

begin_test "RC File insertion"
(
  setup_test

  session="$(sanitize_session_name "${TRASHDIR}")"

  # Setup functions to be used by screen
  # This doesn't work as desired because the \ escaping is interpreted differently
  # by different versions of screen (looking at you, mac)
  # stdin='set -xv; touch "\${TESTDIR}/bar"'"${nl}"
  # cmd="$(quotemire "source '${VSI_COMMON_DIR}/linux/bash_utils.bsh'; run_bash_with_rc_file" \
  #                    'set -xv; touch "\${TESTDIR}/foo"')${nl}"
  function sync_file()
  {
    set -xv
    if [ "${FOO}" = "bar16" ]; then
      touch "${TESTDIR}/sync"
    fi
  }
  function run_test()
  {
    source "${VSI_COMMON_DIR}/linux/bash_utils.bsh"
    run_bash_with_rc_file "set -xv; export FOO=bar16; touch \"${TESTDIR}/foo\""
  }
  # export so they are inherited by a new screen
  export TESTDIR VSI_COMMON_DIR
  export -f sync_file run_test
  screen -c /dev/null -dmS "${session}" bash

  # macOS compatibility, needs a literal newline
  # Start new bash session
  screen -S "${session}" -p 0 -X stuff $'run_test\n'
  # Sync from within new bash session
  screen -S "${session}" -p 0 -X stuff $'sync_file\n'

  for ((i=0; i < 500; i++ )); do
    if [ -e "${TESTDIR}/sync" ]; then
      break
    fi
    sleep 0.01
  done

  if [ "${TESTLIB_KEEP_TEMP_DIRS-}" != "1" ]; then
    screen -S "${session}" -X quit
  fi

  [ -f "${TESTDIR}/foo" ]
  [ -f "${TESTDIR}/sync" ]
)
end_test

function teardown()
{
  if [ "${TESTLIB_KEEP_TEMP_DIRS-}" != "1" ]; then
    # cleanup in case test fails
    command -v screen >& /dev/null && screen -S "$(sanitize_session_name "${TRASHDIR}")" -X quit >& /dev/null || :
  fi
}
