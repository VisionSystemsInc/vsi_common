#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"
source "${TESTLIB_DIR}/test_utils.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/just_entrypoint_functions"

# Dummy function that shouldn't be needed, hence being false
gosu()
{
  false
}

# Mock out linux_account and other functions
setup_mock()
{
  mocked_passwd=()
  mocked_group=()

  init_group=("root:x:0:"
              "daemon:x:1:root")
  init_passwd=("root:x:0:0:root:/root:/bin/bash"
               "daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin")

  LINUX_ACCOUNTS_PASSWD_FILE=passwd
  LINUX_ACCOUNTS_SHADOW_FILE=shadow
  LINUX_ACCOUNTS_GROUP_FILE=group
  LINUX_ACCOUNTS_GSHADOW_FILE=gshadow

  write_file passwd "${init_passwd[@]}"
  write_file group "${init_group[@]}"

  mkdir()
  {
    echo "mkdir ${@}" >> mockout
  }

  chown()
  {
    echo "chown ${@}" >> mockout
  }
}

begin_test "default setup user"
(
  setup_test

  setup_mock

  docker_setup_user

  read_file passwd mocked_passwd
  read_file group mocked_group
  assert_array_values mocked_passwd "user:x:1000:1000::/home/user:$(command -v bash)" "${init_passwd[@]}"
  assert_array_values mocked_group "user:x:1000:" "${init_group[@]}"
  [ "$(cat mockout)" = $'mkdir -p /home/user\nchown 1000:1000 /home/user' ]
)
end_test

begin_test "custom setup user"
(
  setup_test

  setup_mock

  DOCKER_USERNAME=foo \
  DOCKER_UID=100 \
  DOCKER_GROUP_NAMES="root daemon open bar" \
  DOCKER_GIDS="0 1 101 102" \
  DOCKER_HOME=/nothome/foobar \
  docker_setup_user

  read_file passwd mocked_passwd
  read_file group mocked_group
  assert_array_values mocked_passwd "foo:x:100:0::/nothome/foobar:$(command -v bash)" "${init_passwd[@]}"
  assert_array_values mocked_group "bar:x:102:foo" "open:x:101:foo" "${init_group[0]}" "daemon:x:1:root,foo"
  [ "$(cat mockout)" = $'mkdir -p /nothome/foobar\nchown 100:0 /nothome/foobar' ]
)
end_test

begin_test "setup user only"
(
  setup_test

  setup_mock

  DOCKER_ACCOUNTS_CREATE_GROUPS=0 \
  docker_setup_user

  read_file passwd mocked_passwd
  read_file group mocked_group
  assert_array_values mocked_passwd "user:x:1000:1000::/home/user:$(command -v bash)" "${init_passwd[@]}"
  assert_array_values mocked_group "${init_group[@]}"
  [ "$(cat mockout)" = $'mkdir -p /home/user\nchown 1000:1000 /home/user' ]
)
end_test

begin_test "setup group only"
(
  setup_test

  setup_mock

  DOCKER_ACCOUNTS_CREATE_USER=0 \
  docker_setup_user

  read_file passwd mocked_passwd
  read_file group mocked_group
  assert_array_values mocked_passwd "${init_passwd[@]}"
  assert_array_values mocked_group "user:x:1000:" "${init_group[@]}"
  [ ! -f mockout ]
)
end_test

begin_test "posix groups"
(
  setup_test

  setup_mock

  # These all work in Ubuntu, but not fedora, even Ubuntu doesn't allow spaces
  DOCKER_UID='1000' \
  DOCKER_GROUP_NAMES='group1 ad\group2 okdoe ok@#$%^&*doe @#$%^&* @#$%^&' \
  DOCKER_GIDS='1000 1001 1002 1003 1004 1005' \
  DOCKER_ACCOUNTS_POSIX_GROUPS=1 \
  docker_setup_user

  read_file group mocked_group
  assert_array_values mocked_group \
          "group2:x:1005:user" \
          "group:x:1004:user" \
          "okdoe1:x:1003:user" \
          "okdoe:x:1002:user" \
          "adgroup2:x:1001:user" \
          "group1:x:1000:" \
          "${init_group[@]}"
  [ "$(cat mockout)" = $'mkdir -p /home/user\nchown 1000:1000 /home/user' ]
)
end_test

begin_test "nonposix groups"
(
  setup_test

  setup_mock

  # These all work in Ubuntu, but not fedora, even Ubuntu doesn't allow spaces
  DOCKER_UID='1000' \
  DOCKER_GROUP_NAMES='group1 ad\group2 okdoe ok@#$%^&*doe @#$%^&* @#$%^&' \
  DOCKER_GIDS='1000 1001 1002 1003 1004 1005' \
  DOCKER_ACCOUNTS_POSIX_GROUPS=0 \
  docker_setup_user

  read_file group mocked_group
  assert_array_values mocked_group \
          "@#$%^&:x:1005:user" \
          "@#$%^&*:x:1004:user" \
          "ok@#$%^&*doe:x:1003:user" \
          "okdoe:x:1002:user" \
          "ad\group2:x:1001:user" \
          "group1:x:1000:" \
          "${init_group[@]}"
  [ "$(cat mockout)" = $'mkdir -p /home/user\nchown 1000:1000 /home/user' ]
)
end_test

setup_mock()
{
  ln()
  {
    echo "ln ${@-}" >> mockout
  }

  mkdir()
  {
    echo "mkdir ${@-}" >> mockout
  }
}

begin_test "no link mounts"
(
  setup_test
  setup_mock

  TESTDIR="$(real_path "${TESTDIR}")"

  OSTYPE= \
  docker_link_mounts

  [ ! -e mockout ]
)
end_test

begin_test "simple link mounts"
(
  setup_test
  setup_mock

  TESTDIR="$(real_path "${TESTDIR}")"

  JUST_DOCKER_ENTRYPOINT_LINKS="${TESTDIR}/test:${TESTDIR}/mnt" \
  OSTYPE= \
  docker_link_mounts

  ans="mkdir -p ${TESTDIR}"$'\n'
  ans+="ln -s -T ${TESTDIR}/test ${TESTDIR}/mnt"

  [ "$(cat mockout)" = "${ans}" ]
)
end_test

if [ "${OS-}" = "Windows_NT" ]; then
  skip_next_test
fi
begin_test "competing link mounts"
(
  setup_test

  TESTDIR="$(real_path "${TESTDIR}")"

  mkdir mnt1
  mkdir mnt2

  JUST_DOCKER_ENTRYPOINT_LINKS="${TESTDIR}/mnt1:${TESTDIR}/test/foo:${TESTDIR}/mnt2:${TESTDIR}/test" \
  docker_link_mounts

  [ "$(readlink test)" = "${TESTDIR}/mnt2" ]
  [ "$(readlink test/foo)" = "${TESTDIR}/mnt1" ]

  JUST_DOCKER_ENTRYPOINT_LINKS="${TESTDIR}/mnt2:${TESTDIR}/test2:${TESTDIR}/mnt1:${TESTDIR}/test2/bar" \
  docker_link_mounts

  [ "$(readlink test2)" = "${TESTDIR}/mnt2" ]
  [ "$(readlink test2/bar)" = "${TESTDIR}/mnt1" ]
)
end_test

if [ "${OS-}" = "Windows_NT" ]; then
  skip_next_test
fi
begin_test "competing link mounts with DOCKER_LINK_MOUNTS_NOT_IN_MOUNTS"
(
  setup_test

  TESTDIR="$(real_path "${TESTDIR}")"

  mkdir mnt1
  mkdir mnt2

  JUST_DOCKER_ENTRYPOINT_LINKS="${TESTDIR}/mnt1:${TESTDIR}/test/foo:${TESTDIR}/mnt2:${TESTDIR}/test" \
  DOCKER_LINK_MOUNTS_NOT_IN_MOUNTS=1 \
  docker_link_mounts

  [ "$(readlink test)" = "${TESTDIR}/mnt2" ]
  [ ! -e "${TESTDIR}/test/foo" ]

  JUST_DOCKER_ENTRYPOINT_LINKS="${TESTDIR}/mnt2:${TESTDIR}/test2:${TESTDIR}/mnt1:${TESTDIR}/test2/bar" \
  DOCKER_LINK_MOUNTS_NOT_IN_MOUNTS=1 \
  docker_link_mounts

  [ "$(readlink test2)" = "${TESTDIR}/mnt2" ]
  [ ! -e "${TESTDIR}/test/bar" ]
)
end_test

begin_test "docker setup data volumes"
(
  setup_test

  chmod()
  {
    echo "chmod ${@}" >> mockout
  }

  chown()
  {
    echo "chown ${@}" >> mockout
  }

  DOCKER_USERNAME=user1
  JUST_DOCKER_ENTRYPOINT_CHMOD_DIRS='/tmp/test1///tmp/tes1///dev/shm/test 1:  2 '
  JUST_DOCKER_ENTRYPOINT_CHOWN_DIRS='/tmp/test2///tmp/tes3///dev/shm/test 4:  5 '
  docker_setup_data_volumes

  ans=$'chmod 777 /tmp/test1 /tmp/tes1 /dev/shm/test 1:  2 \n'
  ans+='chown -R user1: /tmp/test2 /tmp/tes3 /dev/shm/test 4:  5 '
  [ "$(cat mockout)" = "${ans}" ]
)
end_test
