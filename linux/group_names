#!/usr/bin/env bash

set -eu

#*# linux/group_names

#**
# ===========
# Group Names
# ===========
#
# .. default-domain:: bash
#
# .. file:: group_names
#
# :Arguments: [``$1``...] - Arguments to the id command
# :Output: *stdout* - Space delimited list of group names. Spaces in group names have been replaced with _
# :Uses: id
#
# Determine all the group names associated with a user
#
# On Linux, there is a relatively simple way to get all the group names, unambiguously, even if the names contain spaces and parentheses. However, on macOS, these same features do not exist without the GNU version of id, which is not available without brew, etc... So this script will get that information for you, one way or another.
#**

if [[ ${OSTYPE-} == darwin* ]]; then
  groups="$(id ${@+"${@}"} 2>/dev/null)"
  # macOS and windows do not allow groupnames with =
  groups="${groups#*groups=}"

  # macOS and windows do not allow groupnames with commas, so commas are a
  # safe separator
  OLD_IFS="${IFS}"
  IFS=,
  groups=(${groups}) # noquotes
  IFS="${OLD_IFS}"

  # Replace spaces with _
  groups=(${groups[@]// /_})
  # Remove trailing )
  groups=(${groups[@]/%)/})

  for x in ${!groups[@]}; do
    # Remove #(
    groups[x]="$(echo "${groups[x]}" | sed 's|^[0-9]*(||')"
  done

  # Echo out result
  echo "${groups[*]}"
else # Linux/windows
  # Linux allows anything except : and space really, but windows allows spaces
  id -Gnz ${@+"${@}"} 2>/dev/null | sed 's| |_|g; s|\x00| |g; s| $||'
fi
