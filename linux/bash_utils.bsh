#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/bash_utils.bsh

#**
# .. default-domain:: bash
#
# ==========
# Bash Utils
# ==========
#
# .. file:: bash_utils.bsh
#
# A few utilities to help scripts in bash.
#**

#**
# .. function:: print_bash_stack
#
# Prints the current call stack
#
# :Arguments: * ``$1`` - Number of stack levels to skip (not including :func:`print_bash_stack` itself. It will automatically add one to this number for itself). You typically set this to ``1`` in a function that gets called to print the stack. Default: ``0``
#             * [``$2``] - Optional function to customize the printing of the stack. Variables you can expect to be set are (actual) ``stack_depth``, ``stack_depth_pad``, ``BASH_LINENO``, ``lineno_pad``, ``FUNCNAME``, ``funcname_pad``, and ``BASH_SOURCE``
#**
function print_bash_stack()
{
  if [ -f "/.dockerenv" ]; then
    source "${VSI_COMMON_DIR}/linux/colors.bsh"
    echo "Call stack ${YELLOW-}(in docker container)${NC-}" >&2
    echo '--------------------------------' >&2
  elif [ -d "/.singularity.d" ]; then
    source "${VSI_COMMON_DIR}/linux/colors.bsh"
    echo "Call stack ${YELLOW-}(in singularity container)${NC-}" >&2
    echo '-------------------------------------' >&2
  elif [ "${container-}" = "podman" ]; then
    source "${VSI_COMMON_DIR}/linux/colors.bsh"
    echo "Call stack ${YELLOW-}(in podman container)${NC-}" >&2
    echo '--------------------------------' >&2
  else
    echo 'Call stack' >&2
    echo '----------' >&2
  fi
  local -i i=0
  local -i stack_depth_pad="$(awk '{print int(log($1)/log(10)+1e-10)+1}' <<< "${#BASH_SOURCE[@]}")"
  local -i lineno_pad=0
  local -i funcname_pad=0
  for (( i=1+${1-0}; i<${#BASH_SOURCE[@]}; ++i)); do
    if [ "${lineno_pad}" -lt "${#BASH_LINENO[i-1]}" ]; then
      lineno_pad="${#BASH_LINENO[i-1]}"
    fi
    # FUNCNAME isn't properly populated in global scope (unset), only within a
    # function's scope (like here, so this works correctly). In global scope,
    # the "caller" command must be utilized for introspection. BASH_SOURCE and
    # BASH_LINENO do not suffer from these same deficiencies.
    if [ "${funcname_pad}" -lt "${#FUNCNAME[i]}" ]; then
      funcname_pad="${#FUNCNAME[i]}"
    fi
  done

  if [ -n "${2+set}" ]; then
    local stack_depth
    for (( stack_depth=1+${1-0}; stack_depth<${#BASH_SOURCE[@]}; ++stack_depth)); do
      "${2}"
    done
  else
    funcname_pad+=3
    for (( i=1+${1-0}; i<${#BASH_SOURCE[@]}; ++i)); do
      printf "%${stack_depth_pad}s. %-${funcname_pad}s:%-${lineno_pad}s %s\n" "$((i-${1-0}))" "${FUNCNAME[i]:+${FUNCNAME[i]}()}" "${BASH_LINENO[i-1]}" "${BASH_SOURCE[i]}" >&2
    done
  fi
}

#**
# .. function:: run_bash_with_rc_file
#
# Depending on how bash is compiled (``-DSYS_BASHRC``), spawning bash with a custom RC file is not always straight forward. This function will normalize this behavior so that no matter what version/configuration of ``bash`` you are running, your RC files will be loaded before running the desired bash command.
#
# ..note::
#
#   This is intended for interactive shells only. Any arguments added that make the shell non-interactive effective nullify the purpose of this function
#
# :Arguments: * ``$1`` - A string containing the run commands (RC)
#             * [``$2...``] - Args to be passed bash
#
# :Parameters: [``BASH_EXEC``] - Set to "exec" to exec ``bash`` instead of calling ``bash``
#**
# TODO: replace/consolidate similar call in Just_wrap
function run_bash_with_rc_file()
{
  local rc_file_line="${1}"
  shift 1

  if bash_feature_rcfile; then
    # Thanks bash for making this hard! https://unix.stackexchange.com/q/187369
    if bash_bug_rcfile_process_substitution; then
      local temp_file="$(mktemp)"
      echo "${rc_file_line}" >> "${temp_file}"
      echo "rm \"${temp_file}\"" >> "${temp_file}"
      ${BASH_EXEC-} bash --rcfile "${temp_file}" ${@+"${@}"} # nq
    else
      ${BASH_EXEC-} bash --rcfile <(echo "${rc_file_line}") ${@+"${@}"} # nq
    fi
  else
    ENV=<(echo "set +o posix; ${rc_file_line}") ${BASH_EXEC-} bash --posix ${@+"${@}"} # nq
  fi
}
