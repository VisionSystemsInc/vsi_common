#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/real_path"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/circular_source

#**
# .. default-domain:: bash
#
# ===============
# Circular source
# ===============
#
# .. file:: circular_source.bsh
#
# .. function:: circular_source
#
# Similar to :func:`source_once.bsh source_once`, gives an easy way to have two scripts source each other without an infinite loop.
#
# :Arguments: ``$1`` - The file to be sourced if this is the first time.
# :Output: Returns ``0`` if this is the first time, else ``1`` for already sourced
# :Internal Use: * ``_VSI_CIRCULAR_SOURCE`` - State array used on ``bash`` 4 or newer
#                * ``_VSI_CIRCULAR_SOURCE_*`` - State variables used for ``bash`` 3.2
#
# In the file that you want to break the infinite loop in, simply:
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#    #!/usr/bin/env bash
#    source "${VSI_COMMON_DIR}/linux/circular_source.bsh"
#    circular_source "some_file.bsh" || return 0
#
# In interactive mode, :func:`circular_source` will still re-source the file, but nominally only once. The ``return 0`` is important so that the rest of the file is not sourced multiple times (usually 2 or 3 times otherwise).
#
# Checks to see if the calling file is used multiple times to perform the current source command. If it is, returns 1 to break the chain.
#
# .. note::
#
#    This doesn't prevent a script from being sourced more than once ever, only being sourced more than once from within a particular source command.
#
# .. warning::
#
#    :func:`circular_source` should not be over used because it does execute ``realpath``. While on linux this is a trivial fork, in windows it is a ``CreateProcess`` operation which may only takes 33ms, but it only takes 30 calls to equal a second.
#**

if [ "${bash_feature_associative_array}" = "0" ]; then
  # :nocov_lt_bash_4.0:

  if [ " ""${_VSI_CIRCULAR_SOURCE[@]+set}" = " " ]; then
    declare -A _VSI_CIRCULAR_SOURCE=()
  fi

  function circular_source()
  {
    # This style of declaring as global is needed for bash 4.0/4.1 compliance

    local file_var="$(real_path "${BASH_SOURCE[1]}" )"
    file_var="_${file_var//[^a-zA-Z0-9_]/_}"
    # If there is no entry, it's never been sourced
    if [ "${_VSI_CIRCULAR_SOURCE[${file_var}]-0}" = "0" ]; then
      _VSI_CIRCULAR_SOURCE[${file_var}]=1
      source "${1}"
      unset _VSI_CIRCULAR_SOURCE[${file_var}]
      return 0
    fi
    # We want only the first one to success
    return 1
    # :nocov_lt_bash_4.0:
  }
else
  function circular_source()
  {
    # :nocov_bash_4.0:
    # Create an indirect variable using the calling file's name
    local file_var="$(real_path "${BASH_SOURCE[1]}")"
    file_var="_${file_var//[^a-zA-Z0-9_]/_}"
    file_var="_VSI_CIRCULAR_SOURCE_${file_var//[^a-zA-Z0-9_]/_}"
    if [ "${!file_var-0}" = "0" ]; then
      # Declare global, but make sure it's not exported. This works as intended
      # in case set -a is turned on. No need for an if statement, as this just
      # sets it exactly how we want it and is faster than anything else.
      export -n "${file_var}=1"
      source "${1}"
      unset "${file_var}"
      return 0
    fi
    # We want only the first one to success
    return 1
    # :nocov_bash_4.0:
  }
fi
