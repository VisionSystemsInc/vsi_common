#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/ask_question"
source "${VSI_COMMON_DIR}/linux/git_mirror"
source "${VSI_COMMON_DIR}/linux/uwecho.bsh"
source "${VSI_COMMON_DIR}/linux/dir_tools.bsh"
source "${VSI_COMMON_DIR}/linux/findin"
source "${VSI_COMMON_DIR}/linux/command_tools.bsh"
source "${VSI_COMMON_DIR}/linux/string_tools.bsh"
source "${VSI_COMMON_DIR}/linux/aliases.bsh"
source "${VSI_COMMON_DIR}/linux/git_functions.bsh"

#*# just/plugins/just_git_airgap_repo

JUST_DEFAULTIFY_FUNCTIONS+=(relocate_git_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

#**
# .. default-domain:: bash
#
# ===========================================
# J.U.S.T. Mirror to an Air-gapped Repository
# ===========================================
#
# .. file:: just_git_airgap_repo.bsh
#
# While creating a git mirror is as simple as ``git clone --mirror``, unfortunately this command does not support git submodules or git lfs. This plugin helps create and subsequently clone a mirror of a project with submodules and/or git lfs.
#
# .. rubric:: Example
#
# Assume we have a ``just`` project called project_A hosted at ``https://git-server.com/projectA/project_A.git`` and vsi_common is a submodule of it.
#
# This repository is recursively cloned to /src; it looks like
#
# .. code-block:: bash
#
#      project_A/
#        .gitmodules
#        Justfile
#        setup.env
#        external/vsi_common/               # submodule
#        external/vsi_common/docker/recipes # sub-submodule
#
# Before this repository can be mirrored (which is not the same thing as a clone) and pushed to a new air-gapped git server, first, a little setup is necessary.
#
# The need for this setup is due to a chicken-and-egg problem. *chicken*) If a developer tried to simply clone the mirrored repository in the air-gapped environment, the submodules would fail to update because their URLs cannot be reached in that environment. Instead, the submodules must first be re-configured; then, they can be updated (recursively). This is handled by the ``just git airgap-submodule-update`` target. *egg*) However, this obviously cannot be called until the vsi_common submodule is itself initialized and updated.
#
# To accomplish this, a small function, :func:`git_airgap_submodule_helper.bsh git_airgap_submodule_update`, is (orphan) committed to the air-gapped repository so that it is available for this task. As no ``just`` functions can be called yet, this function should be called in the file specified by :envvar:`JUST_SETUP_SCRIPT` (typically called setup.env). For example, the setup.env script, which typically looks like:
#
# .. code-block:: bash
#
#    export JUST_SETUP_SCRIPT="$(basename "${BASH_SOURCE[0]}")"
#    source "$(dirname "${BASH_SOURCE[0]}")/external/vsi_common/env.bsh"
#
# would become:
#
# .. code-block:: bash
#
#    export JUST_SETUP_SCRIPT="$(basename "${BASH_SOURCE[0]}")"
#    if [ ! -f "$(dirname "${BASH_SOURCE[0]}")/external/vsi_common/env.bsh" ]; then
#      echo "'just' could not be loaded. Trying to setup the repository as an"
#      echo "air-gapped repository"
#      # source the contents of repo_map.env (in a bash 3.2 compatible way)
#      source /dev/stdin <<< \
#          "$(git show origin/__just_git_mirror_info_file:repo_map.env 2>/dev/null || :)"
#      if ! declare -Fx git_airgap_submodule_update; then
#        echo "ERROR the vsi_common submodule could not be found!"
#        return 1
#      fi
#      git_airgap_submodule_update external/vsi_common
#    fi
#    source "$(dirname "${BASH_SOURCE[0]}")/external/vsi_common/env.bsh"
#
# Also, as mentioned, the ``git airgap-submodule-update`` ``just`` target handles reconfiguring the submodules for the air-gapped environment. As such, it should be called in place of the ``git submodule-update`` ``just`` target. For instance, if ``just sync`` calls ``git submodule-update``, then in an air-gapped environment it should call ``git airgap-submodule-update`` instead.
#
# .. note::
#   Currently ``git airgap-submodule-update`` does not update the submodules with the additional safety provided by ``git submodule-update`` (although it is no less safe than the corresponding git calls).
#
# This repository is now setup and can be mirrored and pushed to a new air-gapped git server:
#
# #. ``just git export-repo-guided`` - This target asks a series of questions and then mirrors the repository and its submodules (recursively). For this example, when prompted, we will, "Create a new mirror from a remote's URL", and save the the mirrored repositories to the output directory, ``{output_dir}``. In this case, because there is only a single remote, ``origin``, and a single branch, ``main``, they are chosen automatically.
#
# .. note::
#   The mirror is created from (the URL of) the remote---not directly from this clone itself.
#
# 2. Transfer the archive at ``{output_dir}/transfer_{date}.tgz`` to your destination.
# #. On the destination, create a directory, e.g., ``{transfer_dir}``, and move the archive into it
# #. Extract the archive (the archive will extract directly into this directory)
#
#   a) In ``{transfer_dir}``, edit ``repo_map.env`` and set the :var:`just_git_airgap_repo.bsh create_repo_map JUST_GIT_AIRGAP_MIRROR_URL` environment variable. For example,
#
#     - ``JUST_GIT_AIRGAP_MIRROR_URL=https://git-airgap.com/projectA``
#
# 5. Initialize bare repositories on the air-gapped git server for project_A and its submodules. The list of all submodules can be found in the ``repo_map.env`` file, which maps between the submodule's path and its new URL. In this example, these should be located at
#
#   - ``https://git-airgap.com/projectA/project_A.git``
#   - ``https://git-airgap.com/projectA/vsi_common.git``
#   - ``https://git-airgap.com/projectA/recipes.git``
#
# .. note::
#   Depending on your permission level and the git client on the air-gapped server, you may be allowed to create these repositories on demand when pushing them. This is, for example, possible with GitLab.
#
# 6. ``source setup.env``
# #. ``just git import-repo`` - Push the mirrored repository and all its submodules to the new git server as defined by repo_map.env
#
# .. note::
#   You must have permissions on the server to (force) push to any branch; for example, in GitLab, no branches can be protected against the user doing the transfer.
#
# .. note::
#   A tag is left on all branches when they are transferred so if a branch is force pushed, the old branch can be recovered if necessary.
#
# Subsequent updates can be pushed to the repositories using much the same process, although with a few variations:
#
# 1. In step 1, when prompted, choose "Base the archive off an existing airgap mirror"; in this example, ``{output_dir}``.
#
#     - In addition to another full archive, an incremental archive, ``transfer_{date}_transfer_{previous_date}.tgz``, is also created (if supported). This incremental archive may be *significantly* smaller than the full archive.
#     - If the incremental archive is transferred to the destination in step 2, then
#         - In step 3, move the archive into the same directory as before; in this example, ``{transfer_dir}``.
#         - In step 4, extract this incremental archive on top of the existing mirror.
#     - If instead the full archive is transferred in step 2, then
#         - In step 3, the archive can be moved into the same directory as before, ``{transfer_dir}``, although it doesn't have to be.
#
# #. In step 5, unless there is a new submodule being mirrored, the repositories are already configured.
#
# A developer can then run:
#
# 1. ``git clone https://git-airgap.com/projectA/project_A.git`` - Note: non-recursive
# #. ``source setup.env``
# #. ``just git airgap-submodule-update`` - Clone submodules recursively from the new mirror
#
# .. note::
#
#   If a new submodule is added to the repository then ``just git airgap-submodule-update`` must be re-run instead of the standard git command, ``git submodule update``, which will fail because the location of the submodules as defined in the .gitmodules file is not correct here---instead, the submodule must first be re-configured to point to the URL specified by repo_map.env. (This command is essentially doing a custom ``git submodule sync`` and ``git submodule update``. Accordingly, it must also be run if the URL of the submodule is changed, which could happen, e.g., if the location of the airgap'ed server changed. Note that in this case, an updated ``repo_map.env`` file would need to be committed to the old airgap'ed server.)
#
#   Limitations - There are a few limitations with a mirrored repository:
#
#   1. While the mirrored repository is a proper git repository, care must be taken to ensure subsequent (incremental) mirrors are successful: specifically, the transferred branches must remain read-only. However, additional branches/tags can be created as long as their names don't clash with those from the host repository.
#
#   #. :func:`git_mirror git_mirror_main`, and by extension this plugin, does not mirror all submodules that have ever been part of the repo, only those from a specific branch/SHA/tag you specify (git's init.defaultBranch by default). Consequently, checking out another version of the repository with a different version of the .gitmodules file in which a submodule has been deleted or renamed may cause the ``git_airgap-submodule-update`` to fail because the submodule's remote URL could not be re-configured to point to the mirror.
#
# .. seealso::
#
#   :func:`git_mirror git_mirror_main`, :func:`git_mirror git_push_main`, and :func:`git_mirror git_clone_main`
#**
# REVIEW git_airgap-submodule-update target should be added to just sync;
# currently it is part of the setup section of just sync; git_submodule-update
# is called in subsequent calls to just sync
# RE FIXME There is actually a problem when running the git_submodule-update
# target in an airgap'ed repo: it now runs git submodule sync before update,
# which will put the submodule URLs back to what they are in the .gitmodules
# file. In our case, this is wrong, leading the subsequent update to fail
# RE For now, we can just run git_airgap-submodule-update instead of
# git_submodule-update in an airgap scenario in just sync
# RE However, it would not update the submodules in a safe way...
# RE RE Convert git_mirror:sync_submodules into sync_submodule. Then,
# sync_submodule could be made to override the sync'ing functionality of
# git_submodule-update, which is already part of just sync
#
# NOTE git_submodule-update, like sync_submodules, also runs sync and update
# in an interleaved fashion, but that is to make that function more robust
# (albeit toward a scenario that git itself does not account for) not out of
# necessity when first updating (aka cloning) the submodules

#**
# .. function:: create_repo_map
#
# Create the contents of the repo_map.env file
#
# Create the repository mapping such that, once the :var:`JUST_GIT_AIRGAP_MIRROR_URL` variable is defined, it can be sourced by :func:`git_mirror git_push_main` and :func:`git_mirror git_clone_main`.
#
# :Argument: ``$1`` - The project's repository name (e.g., vsi_common)
#
# :Parameters: [``ASSOCIATIVE_REPO_MAP``] - Set to a value to create the repo map as an associative-array, ``repos``, as opposed to two partitioned arrays (which is bash 3.2 compatible): ``repo_urls`` and ``repo_paths``. (Default: unset; i.e., partitioned)
#
# :Output: *stdout* - The contents of the repo_map.env file, the file that maps between the submodule's path and its new URL. For example,
#
# .. code-block:: bash
#
#    # The urls are specified with the variable JUST_GIT_AIRGAP_MIRROR_URL,
#    # which must be set to the mirrored repositories' new location on the
#    # air-gapped git server. Delay setting this variable until the archive has
#    # been moved to the destination in case the information must be controlled
#    JUST_GIT_AIRGAP_MIRROR_URL=
#
#    repo_paths=(
#      ./
#      ./docker/recipes
#    )
#    repo_urls=(
#      "${JUST_GIT_AIRGAP_MIRROR_URL}/vsi_common.git"
#      "${JUST_GIT_AIRGAP_MIRROR_URL}/recipes.git"
#    )
#
# If, for example, :var:`JUST_GIT_AIRGAP_MIRROR_URL` was set to ``https://git-server/projectA``, these urls would expand to:
#
#   - ``https://git-server/projectA/vsi_common.git``
#   - ``https://git-server/projectA/recipes.git``
#
# .. note::
#
#   One limitation of this function occurs when two dependencies are only differentiated by their organization, e.g., projectC/dependency.git and projectD/dependency.git; then, these dependencies will both be mirrored to the same URL: "${JUST_GIT_AIRGAP_MIRROR_URL}/dependency.git". One option is to override (or extend) this function to fixup the repository map as needed. Alternatively, if significant customization of the repository map is required, it can be created manually and used directly by :func:`git_mirror git_mirror_main` and family.
#
# .. var:: JUST_GIT_AIRGAP_MIRROR_URL
#
# A variable used in the repo_map.env file created by :func:`create_repo_map` to specify the mirrored repositories' new location on the air-gapped git server
#**

function create_repo_map()
{
  local repo_name="${1}"

  local ASSOCIATIVE_REPO_MAP="${ASSOCIATIVE_REPO_MAP-}"

  local OLD_IFS="${IFS}"
  IFS=$'\n'
  # The (relative, i.e., display) path from the project repository to each
  # submodule (recursively)
  # NOTE displaypath only provides the expected path if this command is run
  # from the root of the project repository. Fortunately, that is the case in
  # the Justfile.
  # Alternatively, use JUST_USER_CWD or :func:`git_functions git_project_root_dir`
  local repo_paths=("${repo_name}" $(git_submodule_displaypaths_recursive)) # noquotes
  IFS="${OLD_IFS}"

  local repo_path
  local repo_urls=()
  for repo_path in "${repo_paths[@]}"; do
    # The respective url for each submodule (recursively)
    # NOTE Quotes around JUST_GIT_AIRGAP_MIRROR_URL aren't necessary here because
    # the entries will be quoted when printed to file
    repo_urls+=('${JUST_GIT_AIRGAP_MIRROR_URL}/'"$(basename "${repo_path}")"'.git')
  done
  # Rename the project repo to '.'
  repo_paths[0]='.'

  uwecho '# NOTE: This file is automatically created by
          #   just:just_git_airgap_repo.bsh:create_repo_map
          #
          # If this mapping between submodules and URLs does not suit your
          # needs, you can edit this file directly before calling
          # `just git import-repo` or override `create_repo_map` before calling
          # `just git export-repo`

          '

  # JUST_GIT_AIRGAP_MIRROR_URL can use filesystem paths, but they need to be
  # absolute paths because git_mirror:git_push_main changes into the directory
  # of each repository it pushes
  uwecho '### YOU MUST SET THIS VARIABLE ###
          # For example:
          # JUST_GIT_AIRGAP_MIRROR_URL=git@git-server.com:projectA
          JUST_GIT_AIRGAP_MIRROR_URL=

          '

  # This is not as nice as if the script would die automatically when it is
  # sourced if an env variable is null, but that doesn't seem possible;
  # set -u only check for unset variables, not null
  # RE Although this does provide a nice error message
  uwecho '# Error if this env variable is unset
          : ${JUST_GIT_AIRGAP_MIRROR_URL:?"ERROR: Please set this variable in ./repo_map.env"}

          '

  # Serialize the repository mapping such that it can be sourced by
  # git_push_main and git_clone_main in git_mirror.
  if [ -n "${ASSOCIATIVE_REPO_MAP}" ]; then
    printf 'declare -A repos\n'
    for index in "${!repo_paths[@]}"; do
      # The %s in [] is implicitly quoted by bash
      printf 'repos[%s]="%s"\n' "${repo_paths[index]}" "${repo_urls[index]}"
    done
  else
    printf 'repo_paths=(\n'
    printf '  "%s"\n' "${repo_paths[@]}"
    printf ')\n\n'
    printf 'repo_urls=(\n'
    printf '  "%s"\n' "${repo_urls[@]}"
    printf ')\n'
  fi
  printf '\n\n\n\n'

  (
    source "${VSI_COMMON_DIR}"/linux/git_airgap_submodule_helper.bsh && \
    declare -f git_airgap_submodule_update
  )
}

#**
# .. function:: orphan_commit_repo_map
#
# Orphan commit the repo_map.env file
#
# Given a repository mapping like the one produced by :func:`create_repo_map`, make an orphan commit in the repository (on a branch named __just_git_mirror_info_file by default) to a file named repo_map.env.
#
# :Arguments: - ``$1`` - The contents of the repo_map.env file; i.e., the file that maps between the submodule's path and its new URL
#             - [``$2``] - The name of the branch on which to make the orphan commit. Default: __just_git_mirror_info_file
#**

function orphan_commit_repo_map
{
  local repo_map="${1}"
  local orphan_branch="${2-__just_git_mirror_info_file}"

  local remote_local_url="$(git_project_git_dir)" # Alternatively, PWD
  local refs_mapping="$("${GIT}" for-each-ref --format='%(refname) %(objectname)' refs/heads)"

  # Create an automatically deleting temporary directory
  local temp_repo
  make_temp_path temp_repo -d
  pushd "${temp_repo}" &>/dev/null
    # source repo_map (in a bash 3.2 compatible way)
    local main_url="$(source /dev/stdin <<< "${repo_map}"; _git_mirror_get_url .)"
    # Clone the orphan branch from the mirror (if it exists)
    # Alternatively, https://stackoverflow.com/a/7349740
    if "${GIT}" clone --single-branch --branch "${orphan_branch}" "${main_url}" . &> /dev/null; then
      "${GIT}" remote set-url origin "${remote_local_url}"
      "${GIT}" checkout "${orphan_branch}" &> /dev/null
    else
      # If trying to clone a single branch from a bare repo that has only
      # been initialized, git v1.8.3 segfaults, leaving behind an initialized
      # .git directory
      rm -rf .git
      "${GIT}" init &> /dev/null
      "${GIT}" remote add origin "${remote_local_url}"
      "${GIT}" checkout --orphan "${orphan_branch}" &> /dev/null
    fi

    echo "${repo_map}" > repo_map.env

    local message="the repo_map.env file needed by just:git_mirror that maps repo_paths to urls"
    "${GIT}" add repo_map.env
    "${GIT}" -c "user.name=just git_export-repo" \
           -c "user.email=<just@export-repo.git>" commit \
           --allow-empty \
           -m "$(printf "${message}\n\n${refs_mapping}")"
    "${GIT}" push --force origin "${orphan_branch}" &> /dev/null
  popd &>/dev/null
}

#**
# .. function:: add_import-repo_just_project
#
# Create a simple just project in the prep_dir
#
# This function creates a simple just project (a README.md, setup.env, and Justfile that includes this plugin) in the air-gapped mirror cache (the prep_dir) created by the ``git_export-repo`` ``just`` target. This just project can be used to push (aka import) the mirrored repositories to their respective air-gapped git server by using the ``git_import-repo`` ``just`` target.
#
# :Arguments: ``$1`` - The output directory (prep_dir) that caches the mirrored repositories and archive to be transferred
#
# :Output: ``${1}/{README.md,setup.env,Justfile}``
#**

function add_import-repo_just_project()
{
  # Need the abs path because we change directories when copying vsi_common
  local prep_dir="$(real_path "${1}")"

  # git archive external/vsi_common to ${prep_dir}/.vsi_common
  # does not include submodules, but that that's ok
  rm -rf "${prep_dir}"/.vsi_common
  pushd "${VSI_COMMON_DIR}" &>/dev/null
    "${GIT}" archive --format=tar --prefix=.vsi_common/ HEAD | ( cd "${prep_dir}" && tar xf - )
  popd &>/dev/null

  uwecho 'These mirrored git repositories were automatically created by

            just:just_git_airgap_repo:git_export-repo

          To push them to their respective air-gapped git server, simply:

          1. Edit repo_map.env to set the required environment variable (or,
             if necessary, update repo_map.env as needed)
          2. `source setup.env`
          3. `just git import-repo`
          ' > "${prep_dir}"/README.md
  # REVIEW It might be nicer not to import a plugin here so that there is only
  # one target in just help
  # REVIEW Perhaps the just project in the prep_dir should be able to run
  # just git export-repo
  uwecho '#!/usr/bin/env bash
          export JUST_PROJECT_PREFIX=AIRGAP_MIRROR
          export JUST_VERSION="'"${JUST_VERSION}"'"
          if [ -z "${AIRGAP_MIRROR_CWD+set}" ]; then
            export AIRGAP_MIRROR_CWD="$(\cd "$(\dirname "${BASH_SOURCE[0]}")"; \pwd)"
          fi

          JUST_LOCAL_SETTINGS=/dev/null source "${VSI_COMMON_DIR}/linux/just_env" /dev/null

          source "${VSI_COMMON_DIR}/linux/just_git_airgap_repo.bsh"

          cd "${AIRGAP_MIRROR_CWD}"
          function caseify() { defaultify ${@+"${@}"}; }
          ' > "${prep_dir}"/Justfile
  uwecho 'export JUST_SETUP_SCRIPT="$(basename "${BASH_SOURCE[0]}")"
          source "$(dirname "${BASH_SOURCE[0]}")/.vsi_common/env.bsh"
          unset JUSTFILE
          ' > "${prep_dir}"/setup.env
}

#**
# .. function:: relocate_git_defaultify
#
# Git relocate plugin for just
#**

function relocate_git_defaultify()
{
  local arg="${1}"
  shift 1
  case ${arg} in
    # Create a mirror of a git repository (which is not the same thing as a
    # clone) and all of its submodules (for a specific branch). The mirror is
    # based on the URL of a git remote in this clone---not directly on this
    # clone itself.
    #
    # REVIEW When just supports it, rename 'git export-repo --guided'
    git_export-repo-guided) # Walk through how to export a mirror of the git \
                            # repository, including all submodules, to a tarball
      if [ "${#}" -eq "0" ]; then
        echo "Creating a mirror of a git repository (which is not the same thing as a clone)"
        echo "and all of its submodules (for a specific branch). The mirror is based on the"
        echo "URL for a git remote in this clone---not directly on this clone itself."
        echo
        echo "NOTE A question can be bypassed by adding the respective flag."
        echo "Use --help to see the flags."
        echo
      fi

      JUST_IGNORE_EXIT_CODES=123

      local check_remote
      local remote_name
      local prep_dir
      local branch
      local output_dir

      local parsed_args
      local usage_help=0
      # REVIEW Support --remote-url (but disallow also setting --check-remote)
      parse_args parsed_args --help usage_help -h usage_help \
          -b branch: --branch branch: \
          -c check_remote --check-remote check_remote --no-check-remote check_remote! \
          -r remote_name: --remote-name remote_name: -p prep_dir: --prep-dir prep_dir: \
          -o output_dir: --output-dir output_dir: -- ${@+"${@}"}
      shift "${parsed_args}"
      if [ "${#}" -gt "0" ]; then
        if [[ ${1} = -* ]]; then
          echo "Unknown flag: ${1}"
        else
          echo "Positional arguments are not allowed: ${1}"
        fi
        return 123
      fi

      if [ "${usage_help}" != "0" ]; then
        echo "just git export-repo-guided [-b|--branch] [-c|--[no-]check-remote]"
        echo "                            [-r|--remote-name] [-p|--prep-dir]"
        echo "                            [-o|--output-dir] [-h|--help]"
        echo
        echo "   -b, --branch         The branch on which to base the mirror; e.g., main"
        echo "   -c, check-remote     Ensure that changes to a submodule that are tracked"
        echo "   --no-check-remote    by its parent have been pushed to the submodule's URL"
        echo "   -h, --help           Print this help"
        echo "   -p, --prep-dir       The path to a previously mirrored repository"
        echo "   -o, --output-dir     The output directory in which to mirror the repositories"
        echo "   -r, --remote-name    The git remote (with associated URL) on which to base the"
        echo "                        mirror; e.g., origin"
        echo
        return 0
      fi

      # Only prep_dir xor remote_name can be set
      if [ -n "${prep_dir:+set}" ] && [ -n "${remote_name:+set}" ]; then
        echo "Only one of --prep-dir and --remote-name can be given"
        return 123
      fi
      # Only prep_dir xor output_dir can be set
      if [ -n "${prep_dir:+set}" ] && [ -n "${output_dir:+set}" ]; then
        echo "Only one of --prep_dir and --output_dir can be given"
        return 123
      fi


      # NOTE if specifying a prep_dir, this isn't needed, but should probably
      # exist
      local valid_remote_names=($("${GIT}" remote))
      if [ "${#valid_remote_names[@]}" -eq "0" ]; then
        # Either the repo is misconfigured or initialized locally.
        # REVIEW In the latter case at least, we could mirror the repo directly
        # RE We won't worry about that use case now
        echo "This repository has no remotes. Please push the repo to a git server and"
        echo "try again."
        return 123
      fi

      local remote_names
      # Are either remote_name or prep_dir provided as flags
      if [ -z "${remote_name:+set}" ] && [ -z "${prep_dir:+set}" ]; then
        echo "Would you like to:"
        picker "Create a new mirror from a remote's URL" \
               "Base the archive off an existing airgap mirror (i.e., a PREP_DIR)" || picked="${?}"
        echo
        if [ "${picked}" -eq "1" ]; then
          local OLD_IFS="${IFS}"
          IFS=$'\n'
          remote_names=("${valid_remote_names[@]}")
          IFS="${OLD_IFS}"
        else
          # cd so that tab completion works
          pushd "${JUST_USER_CWD}" &>/dev/null
            read -r -e -p "Where is the existing mirror: " prep_dir
            echo
          popd &>/dev/null
        fi
      elif [ -n "${remote_name:+set}" ]; then
        # Validate remote_name is a git remote
        if ! isin "${remote_name}" "${valid_remote_names[@]}"; then
          echo "ERROR Unknown git remote provided with flag --remote-name: ${remote_name}"
          return 123
        fi

        remote_names=("${remote_name}")
      elif [ -n "${prep_dir:+set}" ]; then
        # Because prep_dir must always be validated, whether it was provided as
        # a flag or asked for, it is validated below
        :
      fi
      # remote_names or prep_dir is set


      local remote_url
      local remote_name
      if [ -n "${remote_names:+set}" ]; then
        local associated_remote_urls=()
        local associated_remote_names=()
        for remote_name in "${remote_names[@]}"; do
          local OLD_IFS="${IFS}"
          IFS=$'\n'
          # List urls configured for git fetch (i.e., the urls in
          # .git/config:remote)
          # NOTE Since git v1.8, a remote (e.g., origin) can have multiple
          # associated urls (and pushurls)
          #
          # Make the list unique, preserving order
          # https://stackoverflow.com/a/31038481
          # https://stackoverflow.com/a/17562858
          #
          # No quotes around subshell to create array (although IFS must be correct)
          local remote_urls=($("${GIT}" config --get-all remote."${remote_name}".url | awk '!a[$0]++'))
          IFS="${OLD_IFS}"
          if [ "${#remote_urls[@]}" -eq "0" ]; then
            # This shouldn't happen; if the repo has a named remote, it should
            # have an associated remote url
            echo "ERROR This repository is misconfigured: it has no urls for remote '${remote_name}'."
            echo "Please fix!"
            return 123
          fi
          associated_remote_urls+=("${remote_urls[@]}")
          local i
          for i in "${!remote_urls[@]}"; do
            associated_remote_names+=("${remote_name}")
          done
        done
        if [ "${#associated_remote_names[@]}" -ne "${#associated_remote_urls[@]}" ]; then
          echo "ASSERT These two arrays are expected to have the same length"
          return 123
        fi

        if [ "${#associated_remote_urls[@]}" -eq "0" ]; then
          # This shouldn't happen; if the repo has a named remote, it should
          # have an associated remote url
          # This actually should be impossible now because we ensure each remote
          # has at least 1 url (consequently, cannot test)
          echo "ERROR This repository is misconfigured: it has no remote urls."
          echo "Please fix!"
          return 123
        elif [ "${#associated_remote_urls[@]}" -eq "1" ]; then
          remote_name="${associated_remote_names[0]}"
          remote_url="${associated_remote_urls[0]}"
          echo "Using remote: '${remote_name}' located at"
          echo "   ${remote_url}"
          echo
        elif [ "${#associated_remote_urls[@]}" -gt "1" ]; then
          local remote_strings=()
          local i
          for i in "${!associated_remote_urls[@]}"; do
            remote_strings+=("$(printf "%s\t%s\n" "${associated_remote_names[i]}" "${associated_remote_urls[i]}")")
          done

          local default_remote="$(printf "%s\t%s\n" origin "$("${GIT}" config remote.origin.url)")"
          local default_index="$(findin "${default_remote}" "${remote_strings[@]}")"

          echo "Please choose a remote:"
          local picked
          DEFAULT_RESPONSE="${default_index}" picker "${remote_strings[@]}" || picked=${?}
          echo
          remote_name="${associated_remote_names[picked-1]}"
          remote_url="${associated_remote_urls[picked-1]}"
        fi
      elif [ -n "${prep_dir:+set}" ]; then
        # Validate this looks like a prep_dir; this is how git_mirror_main
        # computes this variable
        if [ -f "${JUST_USER_CWD}/${prep_dir}/"*"/config" ]; then
          pushd "$(dirname "${JUST_USER_CWD}/${prep_dir}/"*"/config")" &> /dev/null
            # This is the only remote that exists in the prep_dir
            remote_name="origin"
            remote_url="$("${GIT}" config --get remote.origin.url)"
            # Simply treat the prep_dir as the output_dir
            # REVIEW I do this primarily because the the rest of this target
            # assumes it is operating on this repository.
            output_dir="${prep_dir}"
            # In general, unset should NOT be used on local variables because it can
            # (with sufficient nesting of scope) result in a loss of "local" status;
            # however, because local and unset are in the same scope, we don't loose
            # locality
            unset prep_dir
          popd &> /dev/null
        else
          echo "ERROR ${prep_dir} does not look like a PREP_DIR"
          return 123
        fi
      fi


      # Branch names cannot have spaces
      local valid_branches=($("${GIT}" for-each-ref --format='%(refname:short)' refs/heads))
      if [ "${#valid_branches[@]}" -eq "0" ]; then
        echo "ERROR This repository is misconfigured: it has no branches."
        echo "Please fix!"
        return 123
      fi

      local branch
      # Is branch provided as a flag
      if [ -z "${branch:+set}" ]; then
        local branch
        # List local branches (branch names cannot have spaces)
        branches=("${valid_branches[@]}")
        if [ "${#branches[@]}" -eq "1" ]; then
          branch="${branches[0]}"
          echo "Using the only branch in this repository: '${branch}'"
          echo
        else
          local current_branch="$("${GIT}" rev-parse --abbrev-ref HEAD)"
          default_index="$(findin "${current_branch}" "${branches[@]}")"

          local picked
          echo "Please choose which branch you would like to base the submodules off:"
          DEFAULT_RESPONSE="${default_index}" picker "${branches[@]}" || picked="${?}"
          echo
          branch="${branches[picked-1]}"
        fi
      else
        # Validate branch is a git branch
        if ! isin "${branch}" "${valid_branches[@]}"; then
          echo "ERROR Unknown git branch provided with flag --branch: ${branch}"
          return 123
        fi
      fi


      # Is check_remote set by a flag
      if [ "${check_remote}" == "0" ]; then
        ask_question "Do you want to ensure all local changes have been pushed to '${remote_name}'" \
            check_remote y
        echo
      fi
      if [ "${check_remote}" == "1" ]; then
        local sm_status_rv=0
        local sm_status
        # Calls git fetch; connecting to the URL is required when creating the
        # mirror, so this is ok
        # local foo="$(bar)" || rv="${?}" does not work as one line in bash 4.2 or older. Use two lines
        sm_status="$(git_submodule_is_published_recursive "${remote_name}")" || \
            sm_status_rv="${?}"
        if [ "${sm_status_rv}" -ne "0" ]; then
          echo "${sm_status}"
          echo
        fi
        # No need to call git fetch in the project repository
        unpushed_commits="$(log_unpushed_commits "${remote_name}" "${branch}")"
        if [ "${unpushed_commits}" != "" ]; then
          echo "WARNING In this repo, ${unpushed_commits/There are/there are}"
          echo
        fi
        if [ "${sm_status_rv}" -ne 0 ] || [ "${unpushed_commits}" != "" ]; then
          echo "WARNING There are unpushed changes. You may want to ensure all changes to"
          echo "this repository and its submodules have been pushed to their respective"
          echo "remote servers."
          ask_question "Continue?" response n
          if [ "${response}" == "0" ]; then
            return 123
          fi
        fi
      fi


      # Is output_dir unset; i.e., it was not set either as a flag or inferred
      # from prep_dir
      if [ -z "${output_dir:+set}" ]; then
        # cd so that tab completion works
        pushd "${JUST_USER_CWD}" &>/dev/null
          # REVIEW After all this, the user could choose an output_dir which is
          # a prep_dir
          # RE I guess that would be ok though
          echo "Where would you like the mirror to be created"
          read -r -e -p \
              "Note: keep this directory as a cache and reuse it during future mirrors: " \
              output_dir
          echo
        popd &>/dev/null
      fi
      # REVIEW Could test to ensure output_dir either doesn't exist or is empty
      # (e.g., with dir_tools.bsh:is_dir_empty)

      local GIT_MIRROR_PREP_DIR="${output_dir}"
      justify git_export-repo "${remote_url}" "${branch}"
      ;;

    # REVIEW Rename to git_mirror-repo and git_push-airgap-repo
    # NOTE this is tightly coupled with git_import-repo
    git_export-repo) # Export a mirror of the git repository, including all \
                     # submodules, to a tarball
      # REVIEW Move this functionality into a function

      # ASSUMPTION We are currently in the project's root directory; this is
      # normally the case with just

      local args=(${@+"${@}"})
      # If no arguments are specified, choose origin's (last) remote URL
      if [ "${#args[@]}" -eq "0" ]; then
        local remote_url="$("${GIT}" config --get remote.origin.url)"
        args=("${remote_url}")
      fi

      # just cd's into the project's root directory, which will make
      # prep_dir/output_dir relative to that, not the user's CWD
      pushd "${JUST_USER_CWD}" &>/dev/null
        local GIT_MIRROR_PREP_DIR="${GIT_MIRROR_PREP_DIR-}"
        local GIT_MIRROR_MAIN_REPO
        # Sets GIT_MIRROR_PREP_DIR and GIT_MIRROR_MAIN_REPO
        git_mirror_repos "${args[@]}"
      popd &>/dev/null

      # Find the name of the project repository according to the remote url
      # This is how git_mirror_main computes this variable
      local repo_name="$(basename "${GIT_MIRROR_MAIN_REPO}")"
      repo_name="${repo_name%.*}"

      # Create the file that maps between the submodule's path and its new URL.
      # This mapping MUST be created in this repo because the mirror in the
      # prep_dir does not have its submodules recursively updated
      create_repo_map "${repo_name}" > "${GIT_MIRROR_PREP_DIR}/repo_map.env"

      # Copy a simple Justfile to make import-repo easy
      add_import-repo_just_project "${GIT_MIRROR_PREP_DIR}"

      # Archive the mirrored repos
      archive_mirrors "${GIT_MIRROR_PREP_DIR}"

      extra_args=${#}
      ;;

    # NOTE this is tightly coupled with git_export-repo
    git_import-repo) # Push a repo exported with `git export-repo` to an \
                     # initialized git repo
      # REVIEW Move this functionality into a function

      # ASSUMPTION The bare repos for the submodules have been initialized
      # ASSUMPTION We are using the simple just project setup by
      # add_import-repo_just_project in git_export-repo, and are therefore
      # currently in the PREP_DIR

      # This is how git_push_main computes this variable
      local main_dir="$(dirname "$(ls */config)")"

      repo_map="$(cat repo_map.env)"

      # Orphan commit the repo_map.env file so it is available going forward;
      # e.g., during git_airgap-submodule-update
      pushd "${main_dir}" &>/dev/null
        orphan_commit_repo_map "${repo_map}"
      popd &>/dev/null

      echo "IMPORTANT You must have permissions to push and if necessary force push branches"
      echo "          to the remote; in addition to access-level permissions, server-side"
      echo "          configurations like protected branches and pre-commit hooks, which can"
      echo "          result in branches failing to push, must not apply."

      git_tag_main repo_map.env ./
      git_push_main repo_map.env ./
      ;;

    git_airgap-submodule-update) # Clone a repo exported with `git export-repo`. This \
                           # is necessary because we do not want to update the \
                           # url's of the submodules
      # NOTE setup.env must be edited to include logic to init and update
      # vsi_common (basically copying part of git_clone_main) before this
      # target can be called; see git_airgap_submodule_helper.bsh

      local repo_map_file
      make_temp_path repo_map_file # auto-deleting file
      # The repo map's submodule URLs were corrected in git_import-repo
      git show origin/__just_git_mirror_info_file:repo_map.env > "${repo_map_file}"
      git_clone_main "${repo_map_file}" ./
      ;;

    # TODO Move to just_git_functions
    git_convert_git_remote_http_to_git) # Change the remote urls to use the git@ \
                                        # syntax instead of https
      if ! command -v "${GIT}" >& /dev/null; then
        echo "Git not found, skipping remote url conversion" >&2
        return 0
      fi

      convert_git_remote_http_to_git
      ;;

    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}
