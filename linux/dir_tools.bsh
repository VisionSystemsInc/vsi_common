#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/signal_tools.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/dir_tools

#**
# ===============
# Directory Tools
# ===============
#
# .. default-domain:: bash
#
# .. file:: dir_tools.bsh
#
# Tools that deal with directories and paths, including making temporary file paths.
#**

#**
# .. function:: parent_find_files
#
# :Arguments: ``$1``... - The names of the files being searched for
# :Return Value: file_matches - array containing matches
#
# Find files by searching up the parent tree
#
# Searches for files to use. It starts by checking the current directory, and goes up. Just like git searches for a .git directory
#**
function parent_find_files()
{
  local name
  local pwd_before
  file_matches=()
  # Speed improvement: if it's right there, echo it out right away
  for name in "${@}"; do
    if [ -f "${name}" ]; then
      file_matches+=("${PWD}/${name}")
    fi
  done

  \pushd . > /dev/null
    # Search for the file until some match is found
    while [ "${#file_matches[@]}" -eq 0 ]; do
      for name in "${@}"; do
        if [ -f "${name}" ]; then
          file_matches+=("$(\cd "$(dirname "${name}")"; \pwd)/$(basename "${name}")")
        fi
      done

      pwd_before="${PWD}"

      \cd ..

      # This works both when PWD starts with / and //
      if [ "${PWD}" == "${pwd_before}" ]; then
        break
      fi
    done
  \popd > /dev/null
}

#**
# .. var:: _VSI_TEMP_PATHS
#
# .. note::
#   Do **NOT** mess with this variable. It is used to force recursive remove directories, and any mishaps could result in serious injury to computer, and you, depending on how upset you get by losing your computer.
#**
_VSI_TEMP_PATHS=()

#**
# .. function:: make_temp_path
#
# :Arguments: ``$1`` - Name of variable where temporary path will be stored
#             [``$2``...] - Optionally add additional arguments to mktemp call. The most useful thing to add would be ``-t``, as this is in all the OSes. ``-d`` is often used to make a directory
# :Output: ``$1`` - Name of temporary path
#
# Create self cleaning temp directories
#
# .. rubric:: Usage
#
# Use this to create a self deleting temp file/directory. If you do not want to have it self delete, just use ``mktemp`` instead.
#
# Can be called multiple times
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   make_temp_path temp_dir -d
#   touch "${temp_dir}"/file1
#
#   # Do NOT
#   t="$(make_temp_path temp_dir -d; echo "${temp_dir}")"
#   # or
#   (
#     make_temp_path temp_dir -d
#     touch "${temp_dir}"/file2
#   ) # The temp_dir is deleted here
#   cat "${temp_dir}"/file2 # Fails
#   # As these will create and delete the temp dir within the subcommand, by design
#
#   # This is good, as the temp files will be cleaned up sooner
#   (
#     make_temp_path temp_dir -d
#     touch "${temp_dir}"/file2
#     cat "${temp_dir}"/file2 # Success!
#   ) # The temp_dir is deleted here
#
# .. note::
#   This uses the EXIT, INT, and TERM traps. If you use these too, your traps will be automatically chained using :func:`signal_tools.bsh trap_chain`.
#**
function make_temp_path()
{
  local _local_variable_name="${1}"
  shift 1

  local _vsi_temporary_directory="$(mktemp ${@+"${@}"})"
  export -n "${_local_variable_name}=$_vsi_temporary_directory"

  _VSI_TEMP_PATHS+=("${_vsi_temporary_directory}")
  trap_chain "_make_temp_path_cleanup exit" EXIT
  trap_chain "_make_temp_path_cleanup int" INT
  trap_chain "_make_temp_path_cleanup term" TERM
}

function _make_temp_path_cleanup()
{
  local rv="${?}"
  if [ "${__make_temp_path_cleanup_called-}" = "0" ]; then
    return "${rv}"
  fi

  local temp_path
  for temp_path in ${_VSI_TEMP_PATHS[@]+"${_VSI_TEMP_PATHS[@]}"}; do
    if [ -d "${temp_path}" ]; then
      if [[ ${OSTYPE-} = darwin* ]] || ! command -v find &> /dev/null; then
        # :nocov_mac:
        rm -rf "${temp_path}"
        # :nocov_mac:
      else
        # a little safer than rm -rf, in case of bind mounts
        find "${temp_path}" -mount -depth -delete
      fi
    elif [ -e "${temp_path}" ]; then
      rm -f "${temp_path}"
    fi
  done

  # Ctrl+C (INT) and TERM don't end script when INT/TERM is trapped
  if [ "${1-}" = "term" ]; then
    __make_temp_path_cleanup_called=0
    exit_chain 130
  elif [ "${1-}" = "int" ]; then
    __make_temp_path_cleanup_called=0
    exit_chain 127
  fi
}

#**
# .. function:: mktemp_compat
#
# OS-compatible version of mktemp -p
#
# :Arguments: ``$1`` - The location in which to make the temporary directory
# :Output: *stdout* - The path, ${1}/{a_temp_dir}, to the temporary directory
#
# Make a temporary directory in a specific location. This emulates the ``mktemp -p DIR`` behavior for OS's that don't support it (macOS)
#**
# REVIEW make a deleting version of this
# RE or add support for this in make_temp_path
# RE remove in favor of "mktemp -d path/to/tmp.XXXXXX"
# REVIEW rename mktemp_at
function mktemp_compat()
{ # Stupid mac compatibility
  local dir="${1}"
  while [ -e "${dir}" ]; do
    dir="${1}/$(basename "$(mktemp -u)")"
  done
  mkdir -p "${dir}"
  echo "${dir}"
}

#**
# .. function:: normpath
#
# :Arguments: * ``$1`` - path
#
# :Output: *stdout* - Normalized path
#
# Prints out a normalized version of the path. With .., //, and ./ simplified out, and removes trailing /
#
# Unlike :file:`real_path`, this works on non-existing path, but is not as reliable as :file:`real_path`
#**
function normpath()
{
  local IFS
  local x
  local components
  local new_components=()
  local absolute=0

  IFS=/
  local noglob=0
  if [[ ${SHELLOPTS} =~ (^|:)noglob(:|$) ]]; then
    noglob=1
  fi
  set -o noglob
  components=(${1})
  if [ "${noglob}" = "0" ]; then
    set +o noglob
  fi

  # Special for absolute path
  if [ "${1:0:1}" = "/" ]; then
    absolute=1
  fi

  for x in "${!components[@]}"; do
    current="${components[x]}"
    if [ "${current}" = "." ] || [ -z "${current}" ]; then
      continue
    elif [ "${current}" = ".." ]; then
      if [ "${#new_components[@]}" = "0" ]; then
        if [ "${absolute}" = "1" ]; then
          continue
        else
          new_components+=("${current}")
        fi
      else
        if [ "${new_components[${#new_components[@]}-1]}" = ".." ]; then
          new_components+=("${current}")
        else
          unset "new_components[${#new_components[@]}-1]"
        fi
      fi
    else
      new_components+=("${current}")
    fi
  done

  if [ "${absolute}" = "1" ]; then
    echo "/${new_components[@]+${new_components[*]}}"
  elif [ "${#new_components[@]}" -gt 0 ] && [ "${new_components[0]}" = ".." ]; then
    echo "${new_components[*]}"
  else
    if [ "${#new_components[@]}" -gt 0 ]; then
      echo "./${new_components[@]+${new_components[*]}}"
    else
      echo "."
    fi
  fi
}

#**
# .. function:: basenames
#
# :Arguments: * ``$1`` - Number of levels to keep
#             * ``$2`` - path
# :Output: *stdout* - base name up to ``$1`` levels deep
#
# Multiple level version of basename
#
# .. note::
#   ``basenames 2 test`` will result in ``./test`` as the implied dirname is ``.``
#**
function basenames()
{
  local IFS=/
  local noglob=0
  if [[ ${SHELLOPTS} =~ (^|:)noglob(:|$) ]]; then
    noglob=1
  fi
  set -o noglob
  local components=($(normpath "${2}"))
  if [ "${noglob}" = "0" ]; then
    set +o noglob
  fi
  local -i min="${#components[@]}"-"${1}"

  min=$((min<0?0:min))

  echo ${components[@]+"${components[*]:${min}}"}
}

function dirname()
{
  # Remove trailing slashes
  local dn="${1%${1##*[!/]}}"
  dn=${dn%/*}
  # If no slashes were found
  if [ "${dn}" = "${1}" ]; then
    # must be .
    echo -n .
  # /abc should be /, not empty
  elif [ -z "${dn}" ]; then
    echo -n /
  else
    # else found
    echo -n "${dn}"
  fi
}

function basename()
{
  # Remove trailing slashes
  local bn="${1%${1##*[!/]}}"
  bn=${bn##*/}
  echo -n "${bn}"
}

#**
# .. function:: is_dir_empty
#
# Checks to see if there is any files or directories in a given directory, other than ``.`` and ``..``.
#
# :Arguments: ``$1`` - The directory to search, must have permissions, or else it may give false results
# :Return Value: * ``0`` - Empty
#                * ``1`` - Not empty
# :Uses: ``find`` to search the directory
#
# Searches a directory and stops as soon as something is found. You can write your own version of this to modify the conditions the ``find`` use. Other versions include ``find "${1}" -type f -printf '1\n' -quit`` which requires that a file specifically (not a directory) be in the tree somewhere. Add ``-maxdepth 1`` for saying a file must be in the initial directory, not the entire tree.
#**
function is_dir_empty()
{
  if [ "$(find "${1}" -not -path "${1}" -print -quit)" = "" ]; then
    return 0
  fi
  return 1
}

#**
# .. function:: get_mktemp_dir
#
# Get the default temp dir that mktemp uses
#
# :Output: **stdout** - The temp dir, may need :func:`real_path real_path` run on it to dereference symlinks
#**
function get_mktemp_dir()
{
  local tmp

  if [[ ${OSTYPE-} = darwin* ]]; then
    tmp="${_CS_DARWIN_USER_TEMP_DIR-${TMPDIR-/tmp}}"
  else
    tmp="${TMPDIR-/tmp}"
  fi

  echo "${tmp}"
}

#**
# .. function:: common_prefix
#
# Return the longest prefix of all list elements. Based on python's ``os.path.commonprefix``
#
# :Arguments: - ``$1`` - A path
#             - ``$2`` - Another path
# :Output: **stdout** - The longest common prefix
#
# .. note::
#
#    This function may return invalid paths because it works a character at a time.
#**
function common_prefix()
{
  local s1
  local s2
  if [[ ${#1} -lt ${#2} ]]; then
    s1="${1}"
    s2="${2}"
  else
    s1="${2}"
    s2="${1}"
  fi

  local -i i
  for (( i=0; i<${#s1}; i++ )); do
    if [[ ${s1:i:1} != ${s2:i:1} ]]; then
      echo "${s1::i}"
      return
    fi
  done

  echo "${s1}"
}

#**
# .. function:: relative_path
#
# Return a relative filepath to path from the start directory.
#
# :Arguments: - ``$1`` - The file path
#             - ``$2`` - The start path
# :Output: **stdout** - The relative path
#
# This is a path computation; the filesystem is not accessed to confirm the existence or nature of path or start. Based on python's os.path.relpath
#**
function relative_path()
{
  local path
  local start

  if [[ ${1::1} != / ]]; then
    path="${PWD}/${1}"
  else
    path="${1}"
  fi
  if [[ ${2::1} != / ]]; then
    start="${PWD}/${2}"
  else
    start="${2}"
  fi

  local IFS='/'
  local noglob=0
  if [[ ${SHELLOPTS} =~ (^|:)noglob(:|$) ]]; then
    noglob=1
  fi
  set -o noglob
  path=($(normpath "${path}"))
  start=($(normpath "${start}"))
  if [ "${noglob}" = "0" ]; then
    set +o noglob
  fi

  # Everything is absolute path, and starts with a /, this results in the first
  # element being "", do this to fix the math....
  unset path[0]
  unset start[0]

  local -i i
  local s1
  local s2
  if [[ ${#path[@]} -lt ${#start[@]} ]]; then
    s1=(${path[@]+"${path[@]}"})
    s2=(${start[@]+"${start[@]}"})
  else
    s1=(${start[@]+"${start[@]}"})
    s2=(${path[@]+"${path[@]}"})
  fi

  for (( i=0; i<${#s1[@]}; i++ )); do
    if [ "${s1[i]}" != "${s2[i]}" ]; then
      break
    fi
  done
  local ans=()
  local -i j
  for (( j=${#start[@]}-i; j>0; j--)); do
    ans+=('..')
  done
  if [ "${bash_bug_ifs_array_slice_expansion}" = "0" ]; then
    for (( j=i+1; j<=${#path[@]}; j++ )); do
      ans+=(${path[@]+"${path[@]:j:1}"})
    done
  else
    ans+=(${path[@]+"${path[@]:i+1}"})
  fi
  if [ "${#ans[@]}" = "0" ]; then
    echo '.'
  else
    echo "${ans[*]}"
  fi
}