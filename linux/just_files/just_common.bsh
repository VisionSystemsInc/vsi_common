#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/dir_tools.bsh"
source "${VSI_COMMON_DIR}/linux/real_path"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# just/just_common

#**
# .. default-domain:: bash
#
# =====================
# Just Common Functions
# =====================
#
# .. file:: just_common.bsh
#
# .. envvar:: JUST_HELP_SEPARATOR
#
# Separator used internally for processing help comments
#
# When processing the help comments, the :envvar:`JUST_HELP_SEPARATOR` is used to
# separate the strings. As long as no help string contains this, everything
# will work out. Default: @#@
#
# .. rubric:: Bugs
#
# * If a comment contains " ${:envvar:`JUST_HELP_SEPARATOR`} ", then it will be truncated
#   at the first instance
# * If :envvar:`JUST_HELP_SEPARATOR` is not regex safe, it will not work either.
#
# .. seealso::
#
#   :func:`just_functions.bsh safe_load`
#**

: ${JUST_HELP_SEPARATOR='@#@'}

#**
# .. envvar:: JUST_SETUP_SCRIPT
#
# When writing a setup script (typically called setup.env), :envvar:`JUST_SETUP_SCRIPT`
# can optionally be set to the name of the just setup script that will be used in
# messages such as the version check.
#
# .. rubric:: Example
#
# Usually developers will source a simple script to setup just. This primarily
# includes adding just to the path and setting up tab complete:
#
# .. code-block:: bash
#
#     export JUST_SETUP_SCRIPT="$(basename "${BASH_SOURCE[0]}")"
#     source "$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)/external/vsi_common/env.bsh"
#
# This might also include adding plugins for tab-complete.
#
# .. code-block:: bash
#
#     JUST_HELP_FILES=("${VSI_COMMON_DIR}"/linux/just_files/just_git_functions.bsh)
#
# This is also a convenient place to slip in git hooks.
#
# .. code-block:: bash
#
#     #Create post-checkout hook
#     _just_temp_filename="$(dirname "${BASH_SOURCE[0]}")/.git/hooks/post-checkout"
#     if [ ! -e "${_just_temp_filename}" ]; then
#       cat <<-EOF > "${_just_temp_filename}"
#         #!/usr/bin/env bash
#
#         if [ "\$1" != "\$2" ]; then
#           echo
#           echo "Don't forget to update your environment with the command: just sync"
#         fi
#         EOF
#       chmod 755 "${_just_temp_filename}"
#     fi
#
#     #Create post-merge hook
#     _just_temp_filename="$(dirname "${BASH_SOURCE[0]}")/.git/hooks/post-merge"
#     if [ ! -e "${_just_temp_filename}" ]; then
#       cat <<-EOF > "${_just_temp_filename}"
#         #!/usr/bin/env bash
#
#         echo
#         echo "Don't forget to update your environment with the command: just sync"
#         EOF
#       chmod 755 "${_just_temp_filename}"
#     fi
#     unset _just_temp_filename
#
# .. function:: _just_commands_from_file
#
# :Arguments: ``$1``... - Filename(s) of Justfile to be parsed
#
# Parses Justfile for help comments on targets. It looks for all case statements with a comment at the end. It will also parse
# commented case statements that exist for the purpose of populating the help
#
# .. seealso::
#
#   :envvar:`JUST_HELP_SEPARATOR` Used to combine lines.
#
#   :cmd:`just help` Prints out basic help based on comments in the Justfile.
#**

function _just_commands_from_file()
{
           # Segment into "command JUST_HELP_SEPARATOR comment"
  \sed -n${sed_flag_rE} \
           ':combine
            # These next 5 lines combine lines ending in \ and remove leading spaces on next line
            /\\$/{
              # Read and append next line
              N
              # If the pattern buffer matches the case pattern, ends in a
              # \ and the comment continues on the next line, then combine
              /^ *#? *[ ?*_0-9|a-zA-Z{}-]*\) *#.*\\\n *#/{
                # Combine the two lines, removing the extra #, replacing it
                # with a single space
                s| *\\\n *# *| |
                t combine
              }
              s|\\\n *||''
              t combine
            }
            s|^ *#? *([ ?*_0-9|a-zA-Z{}-]*[?*_0-9|a-zA-Z{}-]) *\) *# *(.*)|\1 '"${JUST_HELP_SEPARATOR}"'\2|
            # If there is a match, process it
            t process
            # Else do not even print it. This replaces a grep
            b noprint
            :process
            # Remove trailing spaces
            s| +$||
            :processloop
            # Converts aaa|bbb|ccc @#@ blah to aaa @#@ blah\nbbb @#@ blah\n...
            s/\|(.* '"${JUST_HELP_SEPARATOR}"'(.*))/ '"${JUST_HELP_SEPARATOR}"'\2'$'\\\n''\1/
            # Continue processing until no matches
            t processloop
            p
            :noprint' ${@+"${@}"}
}

#**
# .. function:: _just_subcommands_from_array
#
# :Arguments: *stdin* - see Usage
#
# :Output: *stdout* - prints newline separated list of commands
#
# Returns a non-unique list of commands that have subcommands from an array.
# This is not intended to line up with the input array
#
# .. rubric:: Usage
#
# .. code-block:: bash
#
#   IFS=$'\n'
#   parsed_help_a=($(_just_commands_from_file "${JUSTFILE}"))
#   _just_subcommands_from_array <<< "${parsed_help_a[*]}"
#**

function _just_subcommands_from_array()
{
  \sed -n${sed_flag_rE} 's|^(_?[a-zA-Z0-9\-]+)_.*|\1|p'
}

#**
# .. function:: _just_subtargets_from_array
#
# :Arguments: ``$1`` - subcommand name
#
#          ``$2..N`` - help_lines
#
# :Return Value: just_subtargets - Adds to array
#
# .. rubric:: Usage
#
# .. code-block:: bash
#
#   IFS=$'\n'
#   parsed_help_a=($(_just_commands_from_file "${JUSTFILE}"))
#
#   _just_subtargets_from_array ${TARGET} "${parsed_help_a[@]}"
#**

function _just_subtargets_from_array()
{
  local help_line
  local subcommand="${1}"
  shift 1

  for help_line in ${@+"${@}"}; do
    if [[ ${help_line} =~ ^${subcommand}_.* ]]; then
      help_line=${help_line%% *}
      just_subtargets+=("${help_line#*_}")
    fi
  done
}

#**
# .. function:: _just_parse_helps
#
# :Arguments: ``$1...`` - List of Just files, including plugins
#
# :Output: parsed_help_a - Array of help lines: ``target ${JUST_HELP_SEPARATOR} message``
#
# Parse help information out of Just files
#**

function _just_parse_helps()
{
  local filename
  local IFS=$'\n'
  local i
  local target
  local target_array

  #WARNING: Susceptible to wildcard expansion (*)
  parsed_help_a=($(_just_commands_from_file ${@+"${@}"}))

  # Target expansion magic
  for i in "${!parsed_help_a[@]}"; do
    if [[ ${parsed_help_a[$i]} =~ (^.*_)\{(.*)\}(\ ${JUST_HELP_SEPARATOR}.*) ]]; then
      unset parsed_help_a[$i]
      target_array="${BASH_REMATCH[2]}[@]"
      target_array=(${!target_array+"${!target_array}"})
      for target in "${target_array[@]}"; do
        parsed_help_a+=("${BASH_REMATCH[1]}${target}${BASH_REMATCH[3]} ${target}")
      done
    fi
  done
}

#**
# .. function:: _just_load_justfile
#
# :Arguments: ``$1`` - The Justfile filename
# :Parameters: ``JUST_DRYRUN_SOURCE`` - For internal use, can replace the source command (with say :) to disable sourcing the Justfile
# :Return Value: * ``0`` - Successfully loaded the Justfile
#                * ``1`` - Justfile not found
#
# Convenience function for finding and loading the Justfile if it exists
#**

function _just_load_justfile()
{
  local file_matches=()
  if [ -f "${1}" ]; then
    file_matches=("${1}")
  else
    parent_find_files "${1}"
  fi

  if [ "${#file_matches[@]}" -gt 0 ] && [ -f "${file_matches[0]}" ]; then
    # Put the Justfile first, this is important for tab complete
    JUST_HELP_FILES=("$(real_path "${file_matches[0]}")" ${JUST_HELP_FILES[@]+"${JUST_HELP_FILES[@]}"})
    ${JUST_DRYRUN_SOURCE-source} "${file_matches[0]}"
    return 0
  fi
  return 1
}

#**
# .. function:: _just_get_plugins
#
# :Arguments: [``$1``] - Default directory to look for :envvar:`JUST_PLUGIN_FILE` in
#
# :Parameters: [:envvar:`JUST_PLUGIN_FILE`] - Override the name of the just plugins file.
#
# :Default: :file:`.justplugins`
#
# :Output: ``JUST_PLUGINS`` - (Possibly empty) array of plugins filenames
#
# .. note::
#   :func:`_just_get_plugins` adds to ``JUST_PLUGINS`` if it already exists. If you want to
#   replace ``JUST_PLUGINS``, unset ``JUST_PLUGINS`` before calling :func:`_just_get_plugins`.
#
# .. seealso::
#   The plug in system for just
#
#   :file:`.justplugins` Plugin file
#**

function _just_get_plugins()
{
  local line
  local JUST_PLUGIN_FILE=${JUST_PLUGIN_FILE:-.justplugins}
  local base_dir=${1-.}

  # Set JUST_PLUGINS to an empty array if it doesn't exist already
  if ! \declare -p JUST_PLUGINS &> /dev/null; then
    JUST_PLUGINS=()
  fi

  # Prepend the directory if it doesn't exist
  if [ ! -f "${JUST_PLUGIN_FILE}" ]; then
    JUST_PLUGIN_FILE="${base_dir}/${JUST_PLUGIN_FILE}"
  fi

  # Make base_dir absolute
  if [ "${base_dir:0:1}" != "/" ]; then
    base_dir="$(cd "${base_dir}"; pwd)"
  fi

  # Read in the plugin file
  if [ -f "${JUST_PLUGIN_FILE}" ]; then
    while IFS='' \read -r line || [ -n "${line}" ]; do
      # Skip blank lines
      if [[ ${line} =~ ^[[:blank:]]*$ ]]; then
        continue
      fi
      # Skip comments
      if  [[ ${line} =~ ^[[:blank:]]*# ]]; then
        continue
      fi

      if [ "${line:0:1}" != "/" ]; then
        line="${base_dir}/${line}"
      fi

      JUST_PLUGINS+=("${line}")
    done < "${JUST_PLUGIN_FILE}"
  fi
}
