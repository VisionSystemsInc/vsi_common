#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

source "${VSI_COMMON_DIR}/linux/just_files/docker_functions.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# just/plugins/docker/just_docker_functions

JUST_DEFAULTIFY_FUNCTIONS+=(docker_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

#**
# =========================
# J.U.S.T. Docker Functions
# =========================
#
# .. default-domain:: bash
#
# .. file:: just_docker_functions.bsh
#**

#**
# .. function:: docker-compose_restore_from_cache
#
# :Arguments: - ``$1`` - Docker compose filename
#             - ``$2`` - Main service name to restore and rebuild. This needs to be the last (unnamed) stage
#             - ``[$3...]`` - Addition services based on same dockerfile to restore and rebuild
# :Parameters: - ``JUST_DOCKER_COMPOSE_CACHE_REPO`` - Default value: ``vsiri/ci_cache``
#              - ``JUST_DOCKER_COMPOSE_PULL`` - Pulls images to use. Default: 1 (true).
#              - ``JUST_DOCKER_COMPOSE_BUILD`` - Builds images after pulling cache. Default: 1 (true).
#              - ``JUST_DOCKER_COMPOSE_PUSH`` - Pushes images when done. Default: 1 (true).
#
# Restores image from cached images downloaded from the registry.
#
# This is done in three steps:
#
# 1. First, the images are pulled from ``JUST_DOCKER_COMPOSE_CACHE_REPO``, if available.
# 2. Next, the images are built against the Dockerfiles using the downloaded cache.
# 3. Lastly, the images are pushed back to ``JUST_DOCKER_COMPOSE_CACHE_REPO`` to keep them up to date.
#
# - Every stage is backed up as long as it is given a name. It must have a name because without one, it cannot be targeted using the ``docker`` cli or ``docker-compose``. These stages are named: ``${JUST_DOCKER_COMPOSE_CACHE_REPO}:${main_service_name}_${stage_name}``
# - The final stage is tagged as: ``${JUST_DOCKER_COMPOSE_CACHE_REPO}:final_${main_service_name}``
# - Any VSI recipes used are also identified and tagged: ``${JUST_DOCKER_COMPOSE_CACHE_REPO}:recipe_${main_service_name}_${recipe_name}``. The recipes contain "ONBUILD" commands that are different images than the ``${JUST_DOCKER_COMPOSE_CACHE_REPO}:${main_service_name}_${stage_name}`` version of them.
#
# Even though all the stages are restored, only the services specified (``$2`` ...) are retagged so that they can be used. If you need more than one service's images restored, you will need to specify them all. If multiple services use the same image tag, they do not need to be specified. For example, service ``foo`` uses image ``stuff:foo``, service ``bar`` uses image ``stuff:bar``, and service ``car`` uses image ``stuff:bar`, only services ``foo`` and ``bar`` need to be passed in.
#**
# DEPRECATED
function docker-compose_restore_from_cache()
{
  local compose_file="${1}"
  shift 1

  # Render compose file
  local compose_rendered="$(docker compose -f "${compose_file}" config)"
  local compose_yarp="$(yarp <<< "${compose_rendered}")"
  local docker_compose_version="$(sed -n${sed_flag_rE} "s|^version = '(.*)'$|\1|p" <<< "${compose_yarp}")"
  local dockerfile="$(get_dockerfile_from_compose "${compose_file}" "${1}" "${compose_yarp}")"

  local JUST_DOCKER_COMPOSE_CACHE_REPO="${JUST_DOCKER_COMPOSE_CACHE_REPO:-vsiri/ci_cache}"

  local i

  local stage_names=($(get_docker_stage_names "${dockerfile}"))
  local recipes=($(get_docker_recipes "${dockerfile}"))

  local temp_file="$(mktemp)"
  local temp_override="$(mktemp)"
  local temp_push_pull="$(mktemp)"

  #######################
  # Pull all the images #
  #######################
  if [ "${JUST_DOCKER_COMPOSE_PULL-1}" = "1" ] || [ "${JUST_DOCKER_COMPOSE_PUSH-1}" = "1" ]; then
    _dynamic_docker-compose_push_pull "${1}" > "${temp_push_pull}"
  fi

  if [ "${JUST_DOCKER_COMPOSE_PULL-1}" = "1" ]; then
    # Let it fail, since the first time the images won't exist
    Docker compose -f "${temp_push_pull}" pull || :
  fi

  ##############################
  # Restore recipes from cache #
  ##############################
  local recipes_compose_file="${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml"
  local recipe_compose_version="$(yarp < "${recipes_compose_file}" | sed -n${sed_flag_rE} "s|^version = '(.*)'$|\1|p")"
  _dynamic_docker-compose_restore_recipes "${1}" > "${temp_override}"

  if [ "${JUST_DOCKER_COMPOSE_BUILD-1}" = "1" ]; then
    Docker compose -f "${recipes_compose_file}" -f "${temp_override}" build ${recipes[@]+"${recipes[@]}"}
    # retag recipes for push
    for i in ${recipes[@]+"${recipes[@]}"}; do
      Docker tag "${VSI_RECIPE_REPO}:${i}" "${JUST_DOCKER_COMPOSE_CACHE_REPO}:recipe_${1}_${i}"
    done
  fi

  local main_service="${1}"

  ############################################################
  # Restore services from cache and setup stages for pushing #
  ############################################################
  local main_image_name="$(sed -n${sed_flag_rE} "s|^services.${main_service}.image = ||p" <<< "${compose_yarp}")"
  _dynamic_docker-compose_add_cache_from "${@}" <<< "${compose_rendered}" > "${temp_file}" 3>"${temp_override}"

  # The above function's for loop is in a different subshell actually, in order
  # to update the services array, this has to be done separately
  local services=()
  for stage_name in ${stage_names[@]+"${stage_names[@]}"}; do
    # Update list docker-compose commands
    services+=("${main_service}_auto_gen_${stage_name}")
  done
  services+=(${@+"${@}"})

  # Build images
  if [ "${JUST_DOCKER_COMPOSE_BUILD-1}" = "1" ]; then
    Docker compose -f "${temp_file}" -f "${temp_override}" --project-directory "$(dirname "${compose_file}")" build "${services[@]}"
  fi

  # Tag the final image for push
  if [ "${main_image_name}" != "" ]; then
    Docker tag "${main_image_name}" "${JUST_DOCKER_COMPOSE_CACHE_REPO}:final_${main_service}"
  fi
  # local target
  # for i in ${@+"${@:2}"}; do
  #   image_name="$(sed -n${sed_flag_rE} "s|^services.${i}.image = ||p" <<< "${compose_yarp}")"
  #   target="$(sed -n${sed_flag_rE} "s|^services.${i}.build.target = ||p" <<< "${compose_yarp}")"

  #   if [ "${image_name}" != "" ]; then
  #     if [ "${target}" = "" ]; then
  #       Docker tag "${JUST_DOCKER_COMPOSE_CACHE_REPO}:final_${main_service}" "${image_name}"
  #     else
  #       Docker tag "${JUST_DOCKER_COMPOSE_CACHE_REPO}:stage_${target}" "${image_name}"
  #     fi
  #   fi
  # done

  if [ "${JUST_DOCKER_COMPOSE_PUSH-1}" = "1" ]; then
    Docker compose -f "${temp_push_pull}" push
  fi

  # Cleanup
  ${DRYRUN-} rm "${temp_file}" "${temp_override}" "${temp_push_pull}"
}

# DEPRECATED
# docker-compose_restore_from_cache helper function
function _dynamic_docker-compose_push_pull()
{
  local i
  echo   "version: '3.5'"
  echo   "services:"
  echo   "  final_${1}:"
  echo   "    build: ."
  echo   "    image: ${JUST_DOCKER_COMPOSE_CACHE_REPO}:final_${1}"

  for i in ${stage_names[@]+"${stage_names[@]}"}; do
    echo "  stage_${i}:"
    echo "    build: ."
    echo "    image: ${JUST_DOCKER_COMPOSE_CACHE_REPO}:${1}_${i}"
  done
  for i in ${recipes[@]+"${recipes[@]}"}; do
    echo "  recipe_${i}:"
    echo "    build: ."
    echo "    image: ${JUST_DOCKER_COMPOSE_CACHE_REPO}:recipe_${1}_${i}"
  done
}

# DEPRECATED
# docker-compose_restore_from_cache helper function
function _dynamic_docker-compose_restore_recipes()
{
  local i
  echo   "version: '${recipe_compose_version}'"
  echo   "services:"
  for i in ${recipes[@]+"${recipes[@]}"}; do
    echo "  ${i}:"
    echo "    build:"
    echo "      cache_from:"
    echo "        - ${JUST_DOCKER_COMPOSE_CACHE_REPO}:recipe_${1}_${i}"
  done
}

# docker-compose_restore_from_cache helper function
# stdin - docker-compose file
# stdout - patched docker-compose file
# fid 3 out - docker-compose override file, 3 by default, unless set by override_fd
# arguments - Services to use cache
# DEPRECATED
function _dynamic_docker-compose_add_cache_from()
{
  local main_service="${1}"
  local override_fd="${override_fd-3}"
  local i

  # Anchor the main stage
  local compose_content="$(sed "s|  ${1}:|& \&main_stage|")"

  # A rendered docker-compose file is always in alphabetical order, The only
  # top-level keys are x-*, version, services, secrets, and networks. Therefore,
  # I can always add new services before "^version:". Start by getting the line
  # number of the version line-1
  i="$(sed -n '/^version:/=' <<< "${compose_content}")"
  i="$((i-1))"

  # ----------------
  # | setup stages |
  # ----------------
  # This loop will both patch the docker-compose ${file} and generate
  # a compose override file, ${override}, that will be combined in two different
  # ways to make our final configuration.
  # - Anchors can't work across, so we need the ${file} method
  # - We can't override target without redefining/anchoring all of build, so
  #   we need file_override to just add to it

  function _print_cache_froms()
  {
    echo   "      cache_from:"
    echo   "        - ${main_image_name}"
    echo   "        - ${JUST_DOCKER_COMPOSE_CACHE_REPO}:final_${main_service}"
    for i in ${stage_names[@]+"${stage_names[@]}"}; do
      echo "        - ${JUST_DOCKER_COMPOSE_CACHE_REPO}:${main_service}_${i}"
    done
    for i in ${recipes[@]+"${recipes[@]}"}; do
      echo "        - ${JUST_DOCKER_COMPOSE_CACHE_REPO}:recipe_${main_service}_${i}"
    done
  }

  echo     "version: '${docker_compose_version}'" >&${override_fd}
  echo     "services:" >&${override_fd}
  for stage_name in ${stage_names[@]+"${stage_names[@]}"}; do
    # Service patch for 2
    echo   "  ${1}_auto_gen_${stage_name}:"
    echo   "    <<: *main_stage"
    echo   "    image: ${JUST_DOCKER_COMPOSE_CACHE_REPO}:${1}_${stage_name}"

    # Service addition for 3
    echo   "  ${1}_auto_gen_${stage_name}:" >&${override_fd}
    echo   "    build:" >&${override_fd}
    echo   "      target: ${stage_name}" >&${override_fd}
    _print_cache_froms >&${override_fd}
         # https://stackoverflow.com/a/26141656/4166604
  done | sed "${i}"'r/dev/stdin' <(echo "${compose_content}")

  # ------------------
  # | setup services |
  # ------------------
  # Build services using cache
  while (( ${#} )); do
    # By adding an override file, any special build flags will be included,
    # such as build args, etc...
    echo   "  ${1}:" >&${override_fd}
    echo   "    build:" >&${override_fd}
    _print_cache_froms >&${override_fd}

    shift 1
  done
}

#**
# .. function:: get_docker_recipes
#
# :Arguments: ``$1...`` - Dockerfiles to search for recipes
# :Parameters: ``JUST_RECIPE_REPO`` - Name of recipe image to look for. Default: ``${VSI_RECIPE_REPO}``
# :Output: **stdout** - Newline separated list of the tags of the recipes
#
# Looks for recipes that are used in the Dockerfiles.
#**
function get_docker_recipes()
{
  local JUST_RECIPE_REPO="${JUST_RECIPE_REPO-\\$\{VSI_RECIPE_REPO\}}"
  # / and . are the only valid character in an image name that needs regex escaping
  JUST_RECIPE_REPO="${JUST_RECIPE_REPO//./\\.}"
  # Need to escpae / for the first search
  JUST_RECIPE_REPO="${JUST_RECIPE_REPO////\\/}"
  sed -n${sed_flag_rE} \
          '/^ *[fF][rR][oO][mM] *'"${JUST_RECIPE_REPO}"':/{
            s/^ *[fF][rR][oO][mM]  *'"${JUST_RECIPE_REPO}"':([^ ]+).*/\1/
            # Skip (miss) lines with a $ in it, they have variable names that I
            # will not be able to match
            /\$/d
            p
          }' ${@+"${@}"} | sort -u
}

#**
# .. function:: docker_defaultify
#
# .. command:: build_recipes
#
# :Arguments: [``$1``]... - Recipe names to run
# :Parameters: ``JUST_RECIPE_BUILDARGS`` - Array of build args to be added to every recipe (e.g. ``FOO=BAR``).
#
# Runs ``docker compose build`` for the docker recipes. Useful command to call before ``docker build`` on your own project that uses recipes in vsi_common, to keep them synced with your build.
#
# .. command:: build_recipes-auto
#
# :Arguments: ``$1``... - Dockerfiles to parse
#
# Scans Dockerfiles for ``vsiri/recipe:`` images, and calls :cmd:`build_recipes` on the recipes discovered. Accepts multiple files and ``-`` for stdin
#
# .. command:: log
#
# :Arguments: [``$1``]... - Service names
#
# Show logs from all service containers. Optionally specify service names to only log specific containers.
#
# .. warning::
#
#   Does not pick up containers that didn't exist when starting ``just`` log
#
# Override the log target in your ``Justfile`` and call ``__docker-compose_log`` if you need to set other parameters.
#
# .. command:: docker_clean
#
# :Arguments: ``$1`` - Volume to be removed
#
# Runs ``docker volume rm`` on the specified volume. If the volume is in use, there are four strategies to handle this:
#
# 1. ``ask`` - (default) Interactively asks you if you want to use the stop, delete, or error strategy.
# 2. ``stop`` - Attempts to stop the containers with a 30 second timeout and then forcefully remove the current containers mounting the volume, without prompting
# 3. ``delete`` - Mounts the volume and deletes all of the files. May not work when a container is running a database, or the volume is modified by the entrypoint, e.g. by adding user permissions.
# 4. ``error`` - Errors out instead of cleaning the volume
#
# The action for a specific volume is specified by setting the label ``com.vsi.just.clean_action``.
#
# For example, in a ``docker-compose.yaml`` file:
#
# .. code-block:: yaml
#
#   volumes:
#     venv:
#       labels:
#         com.vsi.just.clean_action: ask
#
# delete
# ------
#
# In the case of the ``delete`` strategy, an optional label, ``com.vsi.just.clean_setup``, can be specified to designate what just target to run to repopulate a volume. Typically this just target should run ``sh -c ":"`` or similar. This allows the entrypoint or another command to properly setup the volume, and set permissions, etc...
#
# .. command:: docker-compose_debug
#
# :Arguments: ``$1`` - service name to build.
#             [``$2``] - Stages to disable caching on. See [here](https://docs.docker.com/reference/cli/docker/buildx/build/#no-cache-filter) for the syntax
#
# This will use information from ``docker-compose config`` to craft a ``docker buildx debug build`` command with the invoke command to help debug a failing build. As this is an experimental command, support is fairly limited:
#
# * Always uses /usr/bin/bash
# * Requires docker buildx 0.12
# * Any complicated build args (spaces and special characters) will likely fail
# * Uses ``.`` as the build context
#**
function docker_defaultify()
{
  arg="${1}"
  shift 1
  case ${arg} in
    build_recipes) # Build recipes
      local build_args=()
      local build_arg
      for build_arg in ${JUST_RECIPE_BUILDARGS[@]+"${JUST_RECIPE_BUILDARGS[@]}"}; do
        build_args+=(--set "*.args.${build_arg}")
      done

      pushd "${VSI_COMMON_DIR}/docker/recipes/" &> /dev/null
        Docker buildx bake ${build_args[@]+"${build_args[@]}"} ${@+"${@}"}
      popd &> /dev/null
      extra_args=${#}
      ;;
    build_recipes-auto) # Build recipes used in specified Dockerfiles. "-" for \
                        # stdin; multiple files (via wildcards) accepted
      if [ "${#}" = "0" ]; then
        source "${VSI_COMMON_DIR}/linux/colors.bsh"
        echo "${RED}ERROR:${NC} You must pass at least one argument to build recipes-auto" >&2
        return 1
      fi

      source "${VSI_COMMON_DIR}/linux/elements.bsh"

      # Set up cache (global) array of recipes already built, so we don't build
      # the same recipe multiple times.
      if ! is_array JUST_DOCKER_RECIPES; then
        JUST_DOCKER_RECIPES=()
      fi

      local recipes=($(get_docker_recipes ${@+"${@}"}))

      local tmp=()
      subtract_array recipes JUST_DOCKER_RECIPES tmp
      recipes=(${tmp[@]+"${tmp[@]}"})

      JUST_DOCKER_RECIPES=(${JUST_DOCKER_RECIPES[@]+"${JUST_DOCKER_RECIPES[@]}"} ${recipes[@]+"${recipes[@]}"})

      if [ "${#recipes[@]}" != "0" ]; then
        justify build recipes "${recipes[@]}"
      fi
      extra_args=${#}
      ;;
    docker_clean) # Delete a docker volume. The next container to use this \
                  # volume will automatically copy any content from the image.
      local volume_inspect_rv=0
      # local foo="$(bar)" || rv="${?} does not work as one line in bash 4.2 or older. Use two lines
      local volume_inspect
      # On bash 3.2, docker volume inspect triggers the inherited trap set by
      # just in the subshell if the volume is not found.
      # Although redirecting the docker command catches inspect's error message,
      # it doesn't also capture the trap's output unless the entire subshell's
      # stderr is redirected via "exec 2>/dev/null". Disabling the trap felt
      # cleaner, and was necessary so that the return value can be captured by
      # the outer shell
      volume_inspect="$(trap -- ERR; docker volume inspect "${1}" 2>/dev/null)" || volume_inspect_rv="${?}"

      if [ "${volume_inspect_rv}" = "0" ]; then
        local rm_rv
        local rm_out
        local rm_err

        {
            IFS= read -r -d '' rm_err
            IFS= read -r -d '' rm_rv
            IFS= read -r -d '' rm_out
        } < <((printf '\0%s\0' "$(Docker volume rm "${1}"; printf '\0%d' "${?}" 1>&2)" 1>&2) 2>&1)
        # Command outputs stdout on 1, stderr on 2; then add "NUL+Return" Value on Stderr
        # printf will buffer stdout (letting "stderr+NUL+rv" stream out in real time)
        # printf then redirects its output to 2, so now 2 contains "stderr+NUL+rv+NUL+stdout"
        # Finally, stderr is redirected to 1, allowing the read commands to read "stderr+NUL+rv+NUL+stdout"

        # Echo stdout as if the command was run normally. Important for dryrun
        echo "${rm_out}"

        if [ "${rm_rv}" != "0" ]; then
          local pattern='volume is in use - \[(.*)\]'
          [[ ${rm_err} =~ ${pattern} ]]
          local OLD_IFS="${IFS}"
          IFS=", "
          local containers=(${BASH_REMATCH[1]})
          IFS="${OLD_IFS}"

          pattern='"com\.vsi\.just\.clean_action": "([^"]+)"'
          local action
          if [[ ${volume_inspect} =~ ${pattern} ]]; then
            action="${BASH_REMATCH[1]}"
          else
            action=ask
          fi

          _docker_clean_actions "${1}" "${action}"
        fi
      else
        echo "${1} already removed" >&2
      fi

      extra_args=1
      ;;
    docker-compose_clean) # Delete a docker compose volume. The next container \
                          # to use this volume will automatically copy any \
                          # content from the image. Use --all to clean all \
                          # volumes listed in the docker-compose.yml file
      if [ "${1}" = "--all" ]; then
        local DOCKER_INTERNAL_VOLUMES
        local volume
        docker_compose_list_internal_volumes < <(Just-docker-compose config)
        for volume in ${DOCKER_INTERNAL_VOLUMES[@]+"${DOCKER_INTERNAL_VOLUMES[@]}"}; do
          justify docker_clean "${COMPOSE_PROJECT_NAME}_${volume}"
        done
      else
        justify docker_clean "${COMPOSE_PROJECT_NAME}_${1}"
      fi
      extra_args=1
      ;;
    docker-compose_enter) # Enter a running container, running an interactive
                          # bash session. Set COMPOSE_SERVICES to limit to a
                          # specific service. Additional arguments are run in
                          # lieu of bash
      # Not Docker compose; no quotes
      local containers=($(docker compose ps -q -a --status running ${COMPOSE_SERVICES-} || :))
      if [ "${#containers[@]}" == "0" ]; then
        echo "No running containers found"
        extra_args=${#}
        return 0
      elif [ "${#containers[@]}" == "1" ]; then
        local picked=1
      else
        local picked
        local pretty=()
        for picked in "${!containers[@]}"; do
          pretty[picked]="$(docker container inspect -f \
              '{{index .Config.Labels "com.docker.compose.service"}} - {{.Name}} ({{.Config.Hostname}})' \
              ${containers[picked]}) $(docker ps --format {{.Status}} -f id=${containers[picked]})"
        done
        picker "${pretty[@]}" || picked="${?}"
      fi

      # Give the dev a way to override the -it flags, should they ever need to
      local DOCKER_EXTRA_EXEC_ARGS=("${DOCKER_EXTRA_EXEC_ARGS[@]--it}")

      if [ "${#}" = "0" ]; then
        Docker exec "${containers[picked-1]}" bash
      else
        Docker exec "${containers[picked-1]}" ${@+"${@}"}
      fi
      extra_args=${#}
      ;;
    docker-compose_log) # Show logs from all service containers. Optionally \
         # specify service names to only log specific containers. Bug: Does \
         # not pick up containers that didn't exist when starting just log

      # Override the log target in your Justfile and call __docker-compose_log
      # if you need to set other parameters
      justify __docker-compose_log ${@+"${@}"}
      extra_args=${#}
      ;;
    __docker-compose_log)
      function stop_logging(){ JUST_STOP_LOGGING=1; }
      JUST_STOP_LOGGING=0
      trap stop_logging INT
      trap stop_logging TERM
      while [ "${JUST_STOP_LOGGING}" == "0" ]; do
        Docker compose logs --tail=20 -f ${@+"${@}"} || echo ${?}
        while [ "${JUST_STOP_LOGGING}" == "0" ] && ! docker_service_running | grep running > /dev/null; do
          sleep 1
        done
      done
      trap - INT
      trap - TERM
      extra_args=${#}
      ;;

    docker-compose_debug) # Run docker buildx debug build against a \
        # docker-compose service. $1 - service name (required) $2 - docker context, defaults to "."
      # This is not a perfect parser. Won't handle yaml strings that aren't the same syntax as bash strings
      local compose_config=$(docker compose config | yarp)
      # This shouldn't be blank because docker-compose will report "Dockerfile" even if it's absent in the compose file```
      local dockerfile=$(sed -nE 's|^services\.'"$1"'\.build\.dockerfile = "?(.*[^"])"?|\1|p' <<< "${compose_config}")
      if [ -z "${dockerfile}" ]; then
        echo "No Dockerfile for service named \"${1}\"; either you forgot to specify a service name or specified the wrong service" >&2
        echo "Valid service names:" >&2
        sed -En 's|^services\.(.*)\.build\.dockerfile = .*| • \1|p' <<< "${compose_config}" >&2
        JUST_IGNORE_EXIT_CODES=1
        return 1
      fi
      # This won't even handle spaces
      local build_args=($(sed -nE 's|^services\.'"$1"'\.build\.args\.([^ ]*) = "?(.*[^"])"?|--build-arg \1=\2|p' <<< "${compose_config}"))

      if [ -n "${2+set}" ]; then
        if [ "${2}" = "*" ]; then
          build_args+=(--no-cache)
        else
          build_args+=(--no-cache-filter "${2}")
        fi
      fi

      # Requires buildx 0.12 or ?newer? (syntax may change, as this is an experimental feature)
      # In 0.11 it was docker buildx build --invoke ...\ but I will not be supporting
      # multiple experimental versions.
      BUILDX_EXPERIMENTAL=1 Docker buildx debug --invoke "${DOCKER_DEBUG_SHELL-/usr/bin/bash}" \
        build --progress=plain ${build_args[@]+"${build_args[@]}"} \
        -f "${dockerfile}" \
        "." # You can't use JUST_PROJECT_PREFIX+_CWD because of how terra works.

      extra_args=1
      ;;

    docker) # Run generic docker command
      Docker ${@+"${@}"}
      extra_args=${#}
      ;;

    # This pair maintains backwards compatibility and lets things like "just docker compose clean" work
    docker_compose) # Run generic docker compose command
      justify docker-compose ${@+"${@}"}
      extra_args=${#}
      ;;
    docker-compose)
      Just-docker-compose ${@+"${@}"}
      extra_args=${#}
      ;;

    # DEPRECATED
    docker-compose_ci-save) # Build and tag all stages of an image. $1 - compose filename, $2 - docker-compose service to build (for final stage)
      docker-compose_tag_all_stages "${1}" "${2}"
      extra_args=2
      ;;

    # DEPRECATED
    docker-compose_ci-load) # Build all stages of an image from a pulled cache. $1 - compose filename, $2 - docker-compose service to build (for final stage), [$3...] - additional service names that might point to other stage targets in the same dockerfile.
      docker-compose_restore_from_cache "${@}"
      extra_args=${#}
      ;;

    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}

# :Arguments: ``$1`` - Volume to be removed
#             ``$2`` - Action to take
# :Parameters: ``containers`` - Array of containers using volume
#              ``volume_inspect`` - String of the result from ``docker volume inspect ${1}``
function _docker_clean_actions()
{
  case "${2}" in
    ask)
      echo "The following containers are using ${1}:"
      echo "${containers[*]}"

      local action
      picker "Stop and forcefully remove these containers. Then try again" \
             "Delete all of the volume's files and repopulate it" \
             "Do nothing. Error and resolve manually." > /dev/null || action="${?}"

      if [ "${action}" = "1" ]; then
        _docker_clean_actions "${1}" stop
      elif  [ "${action}" = "2" ]; then
        _docker_clean_actions "${1}" delete
      elif  [ "${action}" = "3" ]; then
        _docker_clean_actions "${1}" error
      else
        _docker_clean_actions "${1}" unknown
      fi
      ;;
    delete)
      # Remove the files
      Docker run --rm --mount "type=volume,src=${1},dst=/data" alpine sh -c "find /data -maxdepth 1 -mindepth 1 -print0 | xargs -0 rm -rf"

      # If there is a com.vsi.just.clean_setup label
      pattern=$'"com\.vsi\.just\.clean_setup": "([^\n]*)"\n'
      if [[ ${volume_inspect} =~ ${pattern} ]]; then
        # Parse \" to "
        setup_cmd="${BASH_REMATCH[1]//\\\"/\"}"
        # Evaluate this string into arguments. By definition this is arbitrary
        # code execution, so eval is acceptable.
        eval "setup_cmd=(${setup_cmd})"
        # Run the just target
        justify "${setup_cmd[@]}"
      else
        echo "No 'com.vsi.just.clean_setup' label found for volume ${1}" >&2
        # false
      fi
      ;;
    stop)
      for x in "${containers[@]}"; do
        Docker stop -t 30 "${x}"
        Docker rm -f "${x}" &> /dev/null || :
        # Wait until the container no longer exists. The docker rm command is
        # synchronous; however, the stop command also triggers an rm on
        # containers marked with the --rm flag.
        while docker container inspect "${x}" &> /dev/null; do
          echo -n .
        done
      done
      Docker volume rm "${1}"
      ;;
    error)
      false
      ;;
    *)
      echo "Unknown action ${2}"
      false
      ;;
  esac
}

# Idea from Issue #103
function set_docker_compose_project_name()
{
  if [ "${COMPOSE_PROJECT_NAME:+set}" != "set" ]; then
    local cwd_var="${JUST_PROJECT_PREFIX}_CWD"
    local user_var="${JUST_PROJECT_PREFIX}_USERNAME"
    if [ "${!user_var:+set}" = "set" ]; then
      COMPOSE_PROJECT_NAME="$(docker_compose_sanitize_project_name "${!cwd_var}" "${!user_var}")"
    else
      COMPOSE_PROJECT_NAME="$(docker_compose_sanitize_project_name "${!cwd_var}")"
    fi
  fi
}
