#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

source "${VSI_COMMON_DIR}/linux/ask_question"
source "${VSI_COMMON_DIR}/linux/colors.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"
source "${VSI_COMMON_DIR}/linux/set_flags.bsh"

#*# just/plugins/just_git_functions

JUST_DEFAULTIFY_FUNCTIONS+=(git_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

#**
# .. default-domain:: bash
#
# ======================
# J.U.S.T. Git Functions
# ======================
#
# .. file:: just_git_functions.bsh
#
# git plugin for just
#**

#**
# .. var:: GIT
#
# Name/path of git executable
#
# Instead of hard-coding "git" everywhere, use the variable :var:`GIT` so that when the need comes, it is easier to switch which executable gets called. Set to empty string to have any calls to git skipped.
#
# All :func:`git_defaultify` targets will be skipped if the value of :var:`GIT` is not found or empty.
#
# .. note::
#   When using the GIT env variable in this file, do not surround it with quotes as you normally would. Although this prevents using a path to ``git`` with a space in it, in exchange, it is possible to enable a dry-run-ish capability if GIT is set to 'echo git'.
#**

: ${GIT=git}

#**
# .. function:: submodule-helper-list
#
# "git submodule--helper list" bash port
#
# Reproduces what ``git submodule--helper list`` does. Not all versions of git are modern enough to have this feature. Currently, the first three columns of information and --prefix are not reproduced because they are not needed.
#
# :Arguments: [``$1...``] - Glob expressions to be matched, just like '`git-submodule--helper`'
#
# :Output: ``submodule_names`` - array of submodule names (matched if filters supplied)
#          ``submodule_paths`` - corresponding array of submodule paths
#**

function submodule-helper-list()
{
  # Get submodule data
  local submodule_data="$(${GIT} config -l -f .gitmodules | sed -n${sed_flag_rE} 's|^submodule.(.*).path=(.*)|\1'$'\\\n''\2|p')"
  local IFS=$'\n'
  # Parse submodule data
  # Git modules can't have newlines in the "name", but the path could, and both can have tabs and spaces
  # [submodule "w	t  f"]
  # 	path = w\tt\n  f
  # 	url = https://github.com/visionsystemsinc/vsi_common.git
  # git config output :-\
  # submodule.w     t  f.path=w     t
  #   f
  # submodule.w     t  f.url=https://github.com/visionsystemsinc/vsi_common.git

  set_oflag noglob
  # TODO Get the submodule names like git_mirror:get_config_submodule_names
  #   git config --name-only --get-regexp '^submodule\..*\.url$'
  # and use these keys to get the path/url as git_mirror:clone_submodules does
  # See also just_git_airgap_repo.bsh:git_sync_submodules_recursively
  submodule_names=($(awk ' NR % 2 == 1 { print; }' <<< "${submodule_data}" ))
  submodule_paths=($(awk ' NR % 2 == 0 { print; }' <<< "${submodule_data}" ))
  reset_oflag noglob

  # If there are any arguments, filter out unmatched submodules
  if (( $# )); then
    local i
    local j
    local git_root_dir="$(${GIT} rev-parse --show-toplevel)"
    # Store array size, since the length changes in the loop
    local submodules=${#submodule_names[@]}
    local pattern

    # Loop through submodules
    for ((i=0; i<$submodules; i++)); do
      # loop through all arguments
      for j in "${@}"; do
        # Check to see if the pattern matches. The two slashes on the LHS are
        # to match the RHS /*/. /*/ allows additional pattern matching only for
        # full subdirectories names, and nothing else, since that is how
        # git-submodule--helper already works.
        if [[ ${submodule_paths[$i]}// == ${j}/*/ ]]; then
          continue 2
        fi
      done
      # Remove them if the continue 2 doesn't cause a skip
      unset submodule_names[$i]
      unset submodule_paths[$i]
    done

    if (( ${#submodule_names[@]} )); then # If not empty
      # Reset the arrays, so that they are contiguous
      submodule_names=("${submodule_names[@]}")
      submodule_paths=("${submodule_paths[@]}")
    fi
  fi
}

#**
# .. function:: _checkout_git_submodule
#
# Helper function for :func:`safe_git_submodule_update`
#
# :Arguments: ``$1`` - Submodule name
#
#             ``$2`` - Submodule path (relative)
#
#             ``$3`` - Message to print out if submodule update failed
#
# :Output: ``presskey`` - set variable presskey on failure
#**

function _checkout_git_submodule()
{
  popd > /dev/null

  if ! ${GIT} -c foo=bar version &> /dev/null || \
     ! git_feature_submodule_update_with_custom_command; then
    # This is older than 1.8 so it doesn't support -c OR submodule.${1}.update
    echo "${YELLOW}Warning:${NC} your version of git is too old. Doing normal submodule update" >&2
    pushd "${2}" &> /dev/null
      ${GIT} fetch "${JUST_GIT_UPSTREAM-just_upstream}"
    popd &> /dev/null
    if ${GIT} submodule update "${2}"; then
      if [ -f "${2}/.gitmodules" ]; then
        pushd "${2}" &> /dev/null
        show_summary_message=0 safe_git_submodule_update
        popd &> /dev/null
      fi
    else
      echo "${3}"
      read -n1 -r -p "Press any key to continue." presskey
      echo
    fi
  else
    if PATH="${VSI_COMMON_DIR}/linux:${PATH}" ${GIT} -c "submodule.${1}.update"='!bash git_safe_update' submodule update "${2}"; then
      if [ -f "${2}/.gitmodules" ]; then
        pushd "${2}" &> /dev/null
        show_summary_message=0 safe_git_submodule_update
        popd &> /dev/null
      fi
    else
      echo "${3}"
      read -n1 -r -p "Press any key to continue." presskey
      echo
    fi
  fi
}

#**
# .. function:: safe_git_submodule_update
#
# Update git submodules in a smart way
#
# git submodules are already confusing enough to work with. When a project
# gets big and complicated, and add to that the potential of losing changes
# that have already been committed, the default behavior of submodules is
# enough to have anyone committed!
#
# A git submodule update should update a submodule *if and only if* it is a
# **ff-only merge**, and the submodule is clean (enough). Also, non-conflicting
# unstaged changes are also ok too.
#
# .. rubric:: Bugs
#
# If the committer of the main repository changes submodules in a non-fast
# forward way, this would confuse :func:`safe_git_submodule_update` because that isn't
# very smart.
# Update: It will at least tell you which repositories are behind now.
#
# :Arguments: [``$1...``] - Specify submodule paths to update. None defaults to all
#
# :Parameters: ``$show_summary_message`` - For internal use. Disables error summary messages
#**

function safe_git_submodule_update()
{
  local i
  local show_summary_message=${show_summary_message-1}
  local presskey
  if [ "${bash_bug_unassigned_variable_set_to_null}" -eq 0 ]; then
    # In general, unset should NOT be used on local variables because it can
    # (with sufficient nesting of scope) result in a loss of "local" status;
    # however, because local and unset are in the same scope, we don't loose
    # locality
    unset presskey
  fi
  local askcontinue

  pushd "$(pwd)" > /dev/null
    local submodule_names
    local submodule_paths
    local submodule_url
    local current_submodule_url
    local current_remote_url
    local current_just_upstream_url
    # Call "close enough" bash equivalent to git submodule--helper list/name
    submodule-helper-list ${@+"${@}"}
    for ((i=0; i<${#submodule_paths[@]}; i++)); do
      name="${submodule_names[$i]}"
      sm_path="${submodule_paths[$i]}"

      if ! ${GIT} config submodule."$name".url; then
        if [ "$(${GIT} ls-tree HEAD:"$(dirname "${sm_path}")" "$(basename "${sm_path}")" | awk '{print $2}')" == "commit" ]; then
          echo "Uninitialized submodule '${name}'...Initializing"
          ${GIT} submodule init $sm_path
        else
          # There are cases where novices remove a submodule and forget to
          # remove it from the .gitmodules files. In this case, it will show up
          # in submodule-helper-list but shouldn't be checked out. Either it
          # will have no entry from ls-tree (empty), or it will not be a commit
          # (eg tree).
          echo "Skipping phantom submodule '${name}'"
          continue
        fi
      fi
      current_submodule_url="$(${GIT} config submodule."${name}".url)"
      # Initialize (and update) the submodule if it is not already
      if [ -z "${current_submodule_url}" ] || \
        ([ ! -d "$sm_path"/.git ] && [ ! -f "$sm_path"/.git ]); then
        if ! [ "$(${GIT} config -f .gitmodules "submodule.${name}.update")" == "none" ]; then
          echo "Submodule '${name}' is not checked out! Initializing and updating..."
          ${GIT} submodule update --init "${sm_path}"
        fi
        continue
      fi

      # See just_git_airgap_repo.bsh:submodule-helper-resolve-url; or better
      # consider using just_git_airgap_repo.bsh:git_sync_submodules_recursively
      # instead
      #
      # git submodule sync is necessary in case .gitmodules changed; however,
      # we don't want to modify the current configuration so we need to figure
      # out what settings git is going to change.
      # git submodule sync will update the configuration using the
      # .gitmodules file and the default remote of the current branch, if set;
      # otherwise origin.
      pushd "${sm_path}" > /dev/null
        local current_branch="$(${GIT} rev-parse --abbrev-ref HEAD)"
        local default_remote="$(${GIT} config branch."${current_branch}".remote || echo origin)"
        current_remote_url="$(${GIT} config remote."${default_remote}".url)"
        current_just_upstream_url="$(${GIT} config remote."${JUST_GIT_UPSTREAM-just_upstream}".url || :)"
      popd > /dev/null

      # sync with the .gitmodules file
      ${GIT} submodule sync "${sm_path}"
      # Get the updated URL
      updated_submodule_url="$(${GIT} config submodule."$name".url)"

      # Arguably, if the submodule's URL changed in the .gitmodules file, we
      # should leave these changes to the remote, but we cannot differentiate
      # that case from the case where the user modified these values to point
      # to a custom remote
      # Instead, compare the current and updated value of just_upstream and if
      # has changed (and was set), then warn the user to run git submodule sync
      if [ -n "${current_just_upstream_url:+set}" ] && \
         [ "${current_just_upstream_url}" != "${updated_submodule_url}" ]; then
         echo "The URL of the submodule '${BOLD}${RED}${sm_path}${NC}' looks like it changed. You"
         echo "may want to run 'git submodule sync' in the '$(basename "${PWD}")' repository"
         echo
      fi

      # Reset the configuration of the submodule
      # git submodule sync dies if there are multiple URLs (e.g.,
      # git config --get-all submodule.<name>.url or
      # git config --get-all remote.origin.url)
      ${GIT} config submodule."$name".url "${current_submodule_url}"
      # Reset the default remote
      pushd "${sm_path}" > /dev/null
        ${GIT} remote set-url "${default_remote}" "${current_remote_url}"
      popd > /dev/null

      pushd "${sm_path}" > /dev/null
        # This is my equivalent to "git submodule sync". It uses a specific remote
        # that it not one of the defaults to handle issue #186
        ${GIT} remote add "${JUST_GIT_UPSTREAM-just_upstream}" "${updated_submodule_url}" &> /dev/null || \
          ${GIT} remote set-url "${JUST_GIT_UPSTREAM-just_upstream}" "${updated_submodule_url}"

        if ! ${GIT} diff --no-ext-diff --quiet; then
          echo "Uncommited tracked files in '${sm_path}'"
          _checkout_git_submodule "${name}" "${sm_path}" \
            "You need to add or discard (checkout) changes and resolve any conflicts in the submodule: ${name}"
          continue
        fi
        if ! ${GIT} diff --no-ext-diff --cached --quiet; then
          echo "Staged tracked files in '${sm_path}'"
          echo "You need to commit/reset files and resolve any conflicts in the submodule: ${name}"
          read -n1 -r -p "Any key to continue." presskey
          popd > /dev/null
          continue
        fi
        # Removed the -- to be compatible with slightly older git versions. Should work on newer
        # if ${GIT} ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' >/dev/null 2>/dev/null; then
        if ${GIT} ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch ':/*' >/dev/null 2>/dev/null; then
          echo "Untracked files in '${sm_path}'"
          _checkout_git_submodule "${name}" "${sm_path}" \
            "You need to resolve any conflicts in the submodule: ${name}."
          continue
        fi
        _checkout_git_submodule "${name}" "${sm_path}" \
          "You need to resolve any conflicts in the submodule: ${name}."
    done
  popd > /dev/null

  if [ "${show_summary_message-0}" == "1" ]; then
    local IFS=$'\n'
    local message_printed=0
    for i in $(${GIT} submodule status --recursive | \grep ^+ || :); do
      i="${i% *}"
      i="${i#* }"
      echo
      echo "******************************************************************"
      echo "${YELLOW}Repository '${NC}${BOLD}${RED}${i}${NC}${YELLOW}' does not appear to be on the expected SHA${NC}!"
      echo "If you have changes that you want to track in the parent module run:"
      echo "  'git add $i' followed by 'git commit', or if you want to reset the"
      echo "submodule to the expected SHA run:"
      echo "  'git submodule update $i'"
      echo "However, ensure that any commits you may have made are tracked."
      message_printed=1
    done

    if [ "${presskey+set}" == "set" ]; then
      echo
      echo "*************************** WARNING ******************************"
      echo "Tried to safely update submodules, however ${RED}something went wrong${NC}!"
      echo "After resolving the problems, you can try updating the main repo"
      echo "again. If this is not working for you, you can fall back to"
      echo "  'git submodule update --init --recursive'"
      echo "However, ensure that any commits you may have made to submodules are tracked."
      message_printed=1
    fi

    if [ "${message_printed}" = "1" ]; then
      echo
      ask_question "Continue without fixing?" askcontinue n
      if [ "${askcontinue}" = "0" ]; then
        return 1
      fi
    fi
  fi
}

#**
# .. function:: git_reattach_heads
#
# Reattach detached heads in submodules.
#
# :Arguments: - [``1...``] - A list of submodule paths; otherwise, all submodules will attempt to be re-attached (recursively). For example, docker/recipes
#
# Search recursively in the current working directory for all submodules with detached heads. For each, look through all named branches (in the form of refs/heads/branch_name) for one with a SHA that matches that of the detached head (if more than one, the first one is used). If no match found, i.e., empty string, then branch is left detached.
#**

git_reattach_heads()
{
  # git submodule foreach must be run from the top-level working tree in git 1.8
  pushd "$(${GIT} rev-parse --show-cdup)" &> /dev/null
    local submodule_paths
    if [ $# -eq 0 ]; then
      local OLD_IFS="${IFS}"
      IFS=$'\n'
      submodule_paths=($(${GIT} submodule foreach --quiet --recursive 'echo ${prefix-${displaypath}}'))
      IFS="${OLD_IFS}"
    else
      submodule_paths=("${@}")
    fi

    local submodule_path
    for submodule_path in "${submodule_paths[@]}"; do
      echo "Entering '${submodule_path}'"
      pushd "${submodule_path}" &>/dev/null
        # If detached, get SHA & first branch name, and then reattach
        if [ "$(${GIT} rev-parse --abbrev-ref --symbolic-full-name HEAD)" = "HEAD" ]; then
          local current_sha="$(${GIT} rev-parse HEAD)"
          local branch_name="$(${GIT} show-ref --heads | sed -n${sed_flag_rE} "/^${current_sha} .*/{ s|.*/(.*)|\1|; p; q;}")"
          if [ "${branch_name}" != "" ]; then
            ${GIT} checkout "${branch_name}"
          fi
        fi
      popd &>/dev/null
    done
  popd &> /dev/null
}

#**
# .. function:: git_defaultify
#
# Git plugin for just
#**

function git_defaultify()
{
  arg=$1
  shift 1
  case $arg in
    #**
    # .. command:: git_submodule-update
    #
    # :Parameters: - ``JUST_GIT_UPSTREAM`` - The submodule remote name used. When :cmd:`git_submodule-update` syncs, it will use this remote. Default: ``just_upstream``
    #              - ``JUST_GIT_USE_REMOTE`` - The submodule remote name used for fetching the new commits. Useful if you have your own set of remotes you want to use. Default: ``${JUST_GIT_UPSTREAM}``
    #
    # Recursively updates all submodules in a ff-only manner. Also reattaches heads if possible.
    #
    # Sets ``JUST_GIT_SUBMODULE_SYNCED`` to ``1`` on the first run so that subsequent calls are skipped. If you have reason to call it multiple times, you can reset ``JUST_GIT_SUBMODULE_SYNCED``.
    #**
    git_submodule-update) # A safe git submodule update that is careful not to \
                          # discard commits by accident. Unlike the standard \
                          # git submodule update, submodules are only updated \
                          # going forward in history. Also, this version uses a \
                          # specific remote, ${JUST_GIT_UPSTREAM-just_upstream}, and only syncs that \
                          # one remote. It then updates from ${JUST_GIT_USE_REMOTE-${JUST_GIT_UPSTREAM}}. \
                          # Additionally, after sync and update, detached heads \
                          # are reattached if they happen to land on a local \
                          # tracking branch.
      extra_args=$#

      if ! command -v ${GIT} >& /dev/null; then
        echo "Git not found, skipping submodule sync" >&2
        return 0
      fi

      if [[ ${JUST_GIT_SUBMODULE_SYNCED-} != 1 ]]; then
        echo "Syncing submodules"
        # Run a safe git submodule sync and git submodule update
        safe_git_submodule_update ${@+"${@}"}
        git_reattach_heads ${@+"${@}"}
        JUST_GIT_SUBMODULE_SYNCED=1
      else
        echo "Already synced submodules earlier... (JUST_GIT_SUBMODULE_SYNCED=${JUST_GIT_SUBMODULE_SYNCED-})" >&2
      fi
      ;;
    #**
    # .. command:: git_make-submodules-relative
    #
    # Recursively update all submodules to have relative paths.
    #
    # Reset the paths in git submodules to be relative paths (relative to the $(pwd)) rather than absolute paths. This path is specified in the .git file stored in the submodule's root directory (which is how submodules are managed by git). Relative paths are now the default in git; however, there have been versions where either by design or bug, this path was absolute. The relative path of the submodule is computed using one of: a version of realpath that supports the --relative-to flag, python or perl. If none of these programs are available, the update fails.
    #
    # :Uses: realpath with the --relative-to flag, python or perl.
    #**
    git_make-submodules-relative) # Reset the paths in all git submodules to be \
                                  # relative paths rather than absolute paths. \
                                  # This is important for having portable \
                                  # repositories, which is important for \
                                  # mounting into a docker. Resets modules \
                                  # relative to the $(pwd), so you should \
                                  # be in the main repo's base directory.
      if ! command -v ${GIT} >& /dev/null; then
        echo "Git not found, skipping submodule conversion" >&2
        return 0
      fi

      if realpath --relative-to=/ /tmp &> /dev/null; then
        code='realpath --relative-to=. ${submodule_path}'
      elif command -v python &> /dev/null; then
        code='python -c "import os.path;print(os.path.relpath('"'"'${submodule_path}'"'"', '"'"'.'"'"'))"'
      elif command -v perl &> /dev/null; then
        # Perl is a requirement of git, so this should always work
        code='perl -e "use File::Spec; print File::Spec->abs2rel ('"'"'${submodule_path}'"'"', '"'"'.'"'"');"'
      else
        echo "You must have realpath with --relative-to, python or perl for this to work on your OS" >&2
        exit 1
      fi

      ${GIT} submodule foreach --recursive bash -c '
      if [ -f .git ]; then
        submodule_path=$(cut -d" " -f2- .git)
        echo "gitdir: $('"${code}"')" > .git
      fi'
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}