#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# just/plugins/container_functions

#**
# ===================
# Container Functions
# ===================
#
# .. default-domain:: bash
#
# .. file:: container_functions.bsh
#
# Common functionality for adding extra just features to container services
#
# .. envvar:: JUST_IN_CONTAINER
#
# An environment variable that will be set inside of a container so that a script can know it is inside a container started by :file:`just`. It is set to the specific container technology so that scripts can adapt to the specific container technology used. (E.g. ``docker``, ``singularity``, ``podman``, etc...).
#
# .. function:: container_environment_override
#
# :Arguments: * ``$1`` - The name of a function that takes two arguments, variable name and variable value, and writes to the corresponding configuration file.
#             * ``JUST_PROJECT_PREFIX`` - The Just project prefix value
#             * ``JUST_DISABLE_ENVIRONMENT_SWAP`` - Transparently swap environment variables as they are added to the docker environment
#             * ``EXPORT_DOCKER`` - Also exports the ``${1}_.*_DOCKER`` version of the variable when using the transparent environment variable swap feature (the swap effectively becomes a copy).
#
# Sets up a number of environment variables to make containers behave the way we want them to
#
# * ``JUST_HOST_WINDOWS`` - Set to ``1`` on Windows, else unset. This is primarily used in the entrypoint to remove a second slash at the beginning of environment variables that have to be placed there due to limitations in MINGW/Cygwin. These double slashes have, on occasion, caused apps to fail, so removing them becomes important.
# * ``${JUST_PROJECT_PREFIX}_DOCKER`` - variables are swapped
#
# .. seealso::
#
#   :func:`docker_compose_override generate_docker_compose_override`
#     Uses this for environment variables
#**
function container_environment_override()
{
  local var
  local indirect
  local indirect2

  if [ "${OS-}" = "Windows_NT" ]; then
    "${1}" JUST_HOST_WINDOWS 1
  fi

  for var in $(compgen -A export); do
    # For project variables ending in _DOCKER, handle these specially
    if [[ ${var} =~ ^${JUST_PROJECT_PREFIX}_.*_DOCKER$ ]]; then
      indirect="${var%_DOCKER}"

      # If the non-_DOCKER variable exists
      if declare -p ${indirect} &> /dev/null; then
        if [ "${JUST_DISABLE_ENVIRONMENT_SWAP-}" == "1" ]; then
          "${1}" ${indirect} "${!indirect}"
        else
          indirect2="${indirect}_HOST"
          if [ -z "${!indirect2+set}" ]; then
            # Set ENV_VAR_HOST to ${ENV_VAR} in the container
            "${1}" ${indirect}_HOST "${!indirect}"
          fi
        fi
      fi
      if [ "${JUST_DISABLE_ENVIRONMENT_SWAP-}" == "1" ]; then
        "${1}" ${var} "${!var}"
      else
        # Set ENV_VAR to ${ENV_VAR_DOCKER} in the container
        "${1}" ${indirect} "${!var}"
        if [ "${EXPORT_DOCKER-0}" == "1" ]; then
          # Set ENV_VAR_DOCKER to ${ENV_VAR_DOCKER} in the container
          "${1}" ${indirect}_DOCKER "${!var}"
        fi
      fi
    # For project variables ending in _HOST, pass them along as-is
    elif [[ ${var} =~ ^${JUST_PROJECT_PREFIX}_.*_HOST$ ]]; then
      "${1}" ${var} "${!var}"
    fi
  done
}

#**
# .. function:: translate_path
#
# Translates a path from one filesystem to another, useful for going from host to a container.
#
# :Arguments: * ``$1`` - Original path
#             * ``$2, [$4, $6, ...]`` - Host paths
#             * ``$3, [$5, $7, ...]`` - Container paths
# :Output: **stdout** - The translated path. If none of the path pairs translated the path, the original path returned
#**
function translate_path()
{
  local __translate_paths_original_path="${1}"
  local __translate_paths_relative_path
  shift 1

  while [ "${#}" -gt "1" ]; do
    __translate_paths_relative_path="$(relative_path "${__translate_paths_original_path}" "${1}")"
    if [ "${__translate_paths_relative_path:0:3}" != "../" ]; then
      echo "${2}/${__translate_paths_relative_path}"
      return
    fi
    shift 2
  done
  echo "${__translate_paths_original_path}"
}

#**
# .. function:: is_in_container
#
# Tests to see if you are currently in a container. Currently only supports:
# - docker
# - singularity
# - podman
#
# :Return Value: - ``0`` - In a container
#                - ``1`` - Not in a container
#**
function is_in_container()
{
  # Docker check, always works in docker
  if [ -e /.dockerenv ]; then
    return 0
  # singularity check, always works in singularity
  elif [ -d /.singularity.d ]; then
    return 0
  # Podman check, https://github.com/containers/podman/issues/3586#issuecomment-512896997
  elif [ -e /run/.containerenv ]; then
    return 0
  # # Other OCI?
  # else
  #   # I feel like the most universal way is to check the / mount point or the mnt namespace.
  #   # But I don't have a good test off hand to see if it's doesn't match. Examples include:
  #   # overlay on / type overlay (rw,context="system_u:object_r:container_file_t:s0:c343,c672",relatime,lowerdir=/var/lib/containers/storage/overlay/l/MFXOI7UMIM6NIUIUTPTYP344IM,upperdir=/var/lib/containers/storage/overlay/67284897ca227b4d703704373ee54b623cef5e5219a598bc3780dc90663f5a43/diff,workdir=/var/lib/containers/storage/overlay/67284897ca227b4d703704373ee54b623cef5e5219a598bc3780dc90663f5a43/work,metacopy=on,volatile)
  #   # overlay on / type overlay (ro,nodev,relatime,seclabel,lowerdir=/var/singularity/mnt/session/overlay-lowerdir:/var/singularity/mnt/session/rootfs)
  #   # overlay on / type overlay (rw,relatime,seclabel,lowerdir=/var/lib/docker/overlay2/l/7SRMPIDVGTVQGPDQLA4LRIZ4XC:/var/lib/docker/overlay2/l/XHTAYJJXRUOX5LVDQY3YPBKZQH,upperdir=/var/lib/docker/overlay2/aae4df59b5e75200c1e4b4b533463d6f81d27f90fa82c19d6dc7c2159352299d/diff,workdir=/var/lib/docker/overlay2/aae4df59b5e75200c1e4b4b533463d6f81d27f90fa82c19d6dc7c2159352299d/work)
  #   # But these are just overlayfs examples. There are other storage drivers, and I'd rather not write a test for each one individually.
  fi

  return 1
}