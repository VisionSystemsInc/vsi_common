#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

source "${VSI_COMMON_DIR}/linux/just_files/just_docker_functions.bsh"

#*# just/plugins/just_ci_functions

JUST_DEFAULTIFY_FUNCTIONS+=(ci_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

#**
# =========================
# J.U.S.T. CI Functions
# =========================
#
# .. default-domain:: bash
#
# .. file:: just_ci_functions.bsh
#
# CI plugin for just
#**

#**
# .. envvar:: JUST_CI_CACHE_REPO
#
# Dockerhub repository for CI service cache.
#
# .. seealso::
#
#   :cmd:`ci_load-services`
#**

: ${JUST_CI_CACHE_REPO="vsiri/ci_cache"}

#**
# .. envvar:: JUST_CI_CACHE_VERSION
#
# Version for CI service cache.
#
# .. seealso::
#
#   :cmd:`ci_load-services`
#**

: ${JUST_CI_CACHE_VERSION=}

#**
# .. envvar:: JUST_CI_RECIPE_REPO
#
# Dockerhub repository for CI recipe cache.
#
# .. seealso::
#
#   :cmd:`ci_load-recipes`, :cmd:`ci_load-recipes-auto`
#**

: ${JUST_CI_RECIPE_REPO="vsiri/ci_cache_recipes"}

#**
# .. envvar:: JUST_CI_RECIPE_VERSION
#
# Version for CI recipe cache.
#
# .. seealso::
#
#   :cmd:`ci_load-recipes`, :cmd:`ci_load-recipes-auto`
#**

: ${JUST_CI_RECIPE_VERSION=}

#**
# .. command:: ci_load-recipes
#
# :Arguments: [``$1``]... - Recipe names to load
#
# Runs `ci_load.py` for specified docker recipes. Handles loading of both single and multi-stage recipes. Note recipes are not pushed back to the recipe cache (``ci_load.py --no-push ...``).
#
# .. command:: ci_load-recipes-auto
#
# :Arguments: ``$1``... - Dockerfiles to parse
#
# Scans Dockerfiles for ``vsiri/recipe:`` images, and calls :cmd:`ci_load-recipes` on the recipes discovered. Accepts multiple files and ``-`` for stdin
#
# .. command:: ci_load-services
#
# :Arguments: ``$1`` - Docker compose yaml file
#             ``$2`` - Main docker-compose service
#             [``$3``]... - Optional `ci_load.py` inputs
#
# Runs `ci_load.py` for specified docker services. Recipes are expected to be loaded prior to call via ``just ci load-recipes-auto``.
#
#**

function ci_defaultify()
{
  arg="${1}"
  shift 1
  case ${arg} in
    ci_load-recipes) # Load recipes from dockerhub cache
      for recipe in ${@+"${@}"}; do
        python3 "${VSI_COMMON_DIR}/linux/ci_load.py" \
            --recipe-repo "IGNORE" \
            ${JUST_CI_RECIPE_REPO:+ --cache-repo "${JUST_CI_RECIPE_REPO}"} \
            ${JUST_CI_RECIPE_VERSION:+ --cache-version "${JUST_CI_RECIPE_VERSION}"} \
            --no-push \
            "${VSI_COMMON_DIR}/docker/recipes/docker-compose.yml" \
            "${recipe}"
      done
      extra_args=${#}
      ;;
    ci_load-recipes-auto) # Load recipes used in specified Dockerfiles from \
                          # dockerhub cache. "-" for stdin; multiple files \
                          # (via wildcards) accepted
      if [ "${#}" = "0" ]; then
        source "${VSI_COMMON_DIR}/linux/colors.bsh"
        echo "${RED}ERROR:${NC} You must pass at least one argument to ci load recipes-auto" >&2
        return 1
      fi
      local recipes=($(get_docker_recipes ${@+"${@}"}))
      justify ci_load-recipes "${recipes[@]}"
      extra_args=${#}
      ;;
    ci_load-services) # Load services from dockerhub cache
      python3 "${VSI_COMMON_DIR}/linux/ci_load.py" \
          --recipe-repo "IGNORE" \
          ${JUST_CI_CACHE_REPO:+ --cache-repo "${JUST_CI_CACHE_REPO}"} \
          ${JUST_CI_CACHE_VERSION:+ --cache-version "${JUST_CI_CACHE_VERSION}"} \
          ${@+"${@}"}
      extra_args=${#}
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
}
