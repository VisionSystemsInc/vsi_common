#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

source "${VSI_COMMON_DIR}/linux/just_files/container_functions.bsh"
source "${VSI_COMMON_DIR}/linux/dir_tools.bsh"
source "${VSI_COMMON_DIR}/linux/just_files/singularity_functions.bsh"
source "${VSI_COMMON_DIR}/linux/command_tools.bsh"
source "${VSI_COMMON_DIR}/linux/elements.bsh"

#*# just/plugins/singularity/just_singularity_functions

JUST_DEFAULTIFY_FUNCTIONS+=(singular_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

#**
# ==============================
# J.U.S.T. Singularity Functions
# ==============================
#
# .. default-domain:: bash
#
# .. file:: just_singularity_functions.bsh
#
# .. function:: singular_defaultify
#**

function singular_defaultify()
{
  arg="${1}"
  shift 1
  case ${arg} in
    #**
    # .. command:: singularity_import
    #
    # Converts a docker image to a singularity image, writing the image to the just directory.
    #
    # :Arguments: ... - Same as `docker2singularity <https://github.com/singularityhub/docker2singularity#usage>`_, mainly "docker image name"
    # :Parameters: * ``SINGULARITY_CUSTOM_IMPORT_SCRIPT`` - Specifies custom script to use run (step 8.5). This is useful for customizing the image (like entrypoints) before it is converted to a file.
    #              * ``SINGULARITY_DOCKER_SOCKET`` - An array to specify a custom docker socket to connect to docker. If SINGULARITY_DOCKER_SOCKET is not an array, it is converted to an array where whitespaces will be split. Default: ``(--mount source=/var/run/docker.sock,destination=/var/run/docker.sock,type=bind)``
    #              * ``DOCKER2SINGULARITY_VERSION`` - Version of singularity to use docker2singularity. Default: 2.6 for increased compatibility.
    #**
    singularity_import) # Export docker image "$1" to singularity. The rest of the arguments are passed on to \
                        # docker2singularity. Mount a custom script into /custom/tosingularity to be executed as \
                        # step 8.5.
      local custom_script
      local docker_socket
      if declare -p SINGULARITY_DOCKER_SOCKET &> /dev/null; then
        if is_array SINGULARITY_DOCKER_SOCKET; then
          docker_socket=(${SINGULARITY_DOCKER_SOCKET[@]+"${SINGULARITY_DOCKER_SOCKET[@]}"})
        else
          docker_socket=(${SINGULARITY_DOCKER_SOCKET-})
        fi
      else
        docker_socket=(--mount source=/var/run/docker.sock,destination=/var/run/docker.sock,type=bind)
      fi

      if [ -n "${SINGULARITY_CUSTOM_IMPORT_SCRIPT+set}" ]; then
        custom_script=(--mount source="${SINGULARITY_CUSTOM_IMPORT_SCRIPT}",destination=/custom/tosingularity,type=bind,readonly=true)
      fi

      Docker run --rm --privileged \
          ${docker_socket[@]+"${docker_socket[@]}"} \
          --mount source="$(pwd)",destination=/output,type=bind \
          -e DOCKER_UID="${DOCKER_UID-$(id -u)}" -e DOCKER_GID="${DOCKER_GID-$(id -g)}" \
          ${custom_script[@]+"${custom_script[@]}"} \
          vsiri/docker2singularity:${DOCKER2SINGULARITY_VERSION-v3.5.0} "${@}"
      extra_args=${#}
      ;;
    #**
    # .. command:: singularity_exec
    # .. command:: singularity_instance-start
    # .. command:: singularity_run
    # .. command:: singularity_shell
    # .. command:: singularity_test
    #
    # Starts a singularity container using :func:`singularity_functions.bsh Singularity`.
    #**
    # singularity_run) # Run a singularity container
    # singularity_exec) # Exec a command with a singularity container
    # singularity_shell) # Run a singularity container shell
    # singularity_instance-start) # Start a singularity container in the background
    # singularity_test) # Run the singularity container's tests
    singularity_*)
      local cmd="${arg#*_}"
      if [ "${cmd}" = "instance-start" ]; then
        cmd="instance start"
      fi
      # No quotes around cmd, to allow for spaces
      Singularity ${cmd} ${@+"${@}"}
      extra_args=${#}
      ;;
    #**
    # .. command:: singular-compose
    #
    # singular-compose take the equivalent place of ``docker compose``, but for singularity. This does not use `singularity-compose <https://github.com/singularityhub/singularity-compose>`_, instead it is a much simpler and plainer bash version.
    #
    # :Arguments: [``-f {filename}`` | ``--file {filename}``] - Optionally specify one or more singular-compose files, and ignoring the default found ``singular-compose.env`` file.
    #
    # A singular-compose file (default ``singular-compose.env``) is written 100% in bash and gives you the freedom to do anything you need in it. It is designed to be sourced by :cmd:`singular-compose` and has few requirements.
    #
    # * ``instances`` - must be an array of names of instances. If an instance name is not included here, it will be ignored by :cmd:`singular-compose`. You should use the ``+=`` operator when setting instances, so that multiple files can work together
    # * ``{instance_name}_image`` - The filename of the singularity image.
    # * [``{instance_name}_volumes``] - An array of bind mounts that will have the ``-B`` flag added to them.
    # * [``{instance_name}_environment``] - A paired array of key/value pairs of environment variables that will be set in the singularity container. Even indexes are keys, odd indexes are values (if contiguous).
    # * [``{instance_name}_singular_flags``] - List of extra flags to be passed to the singularity subcommand.
    #
    # .. rubric:: Example ``singular-compose.env``
    #
    # .. code-block:: bash
    #    :caption: singular-compose.env
    #
    #    instances+=(django mysql)
    #
    #    # I can even include other compose files
    #    source "${DJANGO_SOURCE_DIR}/singular-compose2.env"
    #
    #    django_environment=(
    #      TZ "${TZ}"
    #      DISPLAY "${DISPLAY}"
    #      JUSTFILE /src/docker/django.Justfile
    #      JUST_SETTINGS /src/django.env
    #    )
    #    django_volumes=(
    #      "${DJANGO_SOURCE_DIR}:${DJANGO_INSTALL_DIR_DOCKER}:ro"
    #      "${VSI_COMMON_DIR}:/vsi:ro"
    #    )
    #    django_singular_flags=(-c -e --nv)
    #    : ${django_image=${DJANGO_CWD}/django_${DJANGO_USERNAME}.simg}
    #
    #    # I can even just copy other arrays (like an anchor)
    #    mysql_environment=("${django_environment[@]}")
    #    # Add a data dir, but copy all but the first volume from django
    #    mysql_volumes=(
    #      "${DJANGO_SOURCE_DIR}/singular/data:/data:rw"
    #      "${django_volumes[@]:1}"
    #    )
    #    mysql_singular_flags=("${django_singular_flags[@]}")
    #    : ${mysql_image=${DJANGO_CWD}/mysql_${DJANGO_USERNAME}.simg}
    #
    # :cmd:`singular-compose` currently supports a few subcommands:
    #
    #  * ``run`` - ``singularity run`` your singular-compose instance using :func:`singularity_functions.bsh Singularity`.
    #  * ``shell`` - ``singularity shell`` your singular-compose instance using :func:`singularity_functions.bsh Singularity`.
    #  * ``exec`` - ``singularity exec`` your singular-compose instance using :func:`singularity_functions.bsh Singularity`.
    #  * ``test`` - ``singularity test`` your singular-compose instance using :func:`singularity_functions.bsh Singularity`.
    #  * ``instance start`` - ``singularity instance start`` your singular-compose instance using :func:`singularity_functions.bsh Singularity`.
    #  * ``config`` - Prints out the configuration for a specific instance, using bash ``declare -p`` notation. This output can be sourced or eval'ed
    #  * ``config-null`` - A binary version of ``config`` using :func:`string_tools.bsh null_dump`, more useful when sending the information to languages not bash.
    #  * ``instance`` - Handles other ``singularity`` instance commands for instance management.
    #**
    singular-compose) # Simple pure bash version of singularity-compose
      ########################################
      ### Parse singular-compose arguments ###
      ########################################
      local compose_files=()
      local args_parsed
      parse_args args_parsed -f +compose_files: --file +compose_files: -- ${@+"${@}"}
      extra_args+="${args_parsed}"
      shift "${args_parsed}"

      ### Handle parsed arguments ###
      if [ "${#compose_files[@]}" != "0" ]; then
        local "${JUST_PROJECT_PREFIX}_SINGULAR_COMPOSE_FILES"
        dynamic_set_a "${JUST_PROJECT_PREFIX}_SINGULAR_COMPOSE_FILES" "${compose_files[@]}"
      fi

      # Get subcommand
      local subcommand="${1}"
      extra_args+=1
      shift 1

      # Handle instance start/stop/exec
      if [ "${subcommand}" = "instance" ] && (( ${#} )) ; then
        case "${1}" in
          start|stop|exec)
            subcommand="instance_${1}"
            extra_args+=1
            shift 1
            ;;
        esac
      fi

      # Local vars for the ``singular_load_env`` calls below
      local singular_volumes singular_environment singular_flags \
            singular_image singular_mount_points

      case ${subcommand} in
        run|shell|exec|test|instance_start|instance_stop|instance_exec)
          # TODO: parse_args here
          local instance="${1}"
          shift 1
          extra_args+=1

          singular_load_env "${instance}"

          ###############################
          ### Setup _Singularity call ###
          ###############################

          local subcommand_args=()

          # When -c is used, $HOME, /tmp, /proc, /sys, and /dev are not mounted
          # in directly. The internal /tmp is very limited and quickly starts
          # having problems. So it is best to just mount it in by default.
          if [ "${SINGULARITY_ADD_TMP_DIR-1}" = "1" ]; then
            # Don't say :rw https://github.com/hpcng/singularity/issues/5416
            subcommand_args+=(-B "$(get_mktemp_dir):/tmp")
          fi
          # /tmp needs to be mounted in BEFORE singular_volumes, incase
          # something tries to mount inside of tmp, like /tmp/.X11-unix. This
          # does not make sense, that you can't mount into the tmpfs /tmp, but
          # for some reason it creates a fatal error, and this works around it.
          # It has nothing to do with "The dir existing before being mounted to"


          # Generate binds
          if [ -n "${singular_volumes+set}" ]; then
            local i
            for (( i=0; i<${#singular_volumes[@]}; i++ )); do
              subcommand_args+=(-B "${singular_volumes[i]}")
            done
          fi

          # Make Singularity call
          case ${subcommand} in
            instance_start)
              # "singular-compose instance start" should have the instance name added to the end
              subcommand=instance
              subcommand_args=(start
                               ${subcommand_args[@]+"${subcommand_args[@]}"}
                               ${singular_flags[@]+"${singular_flags[@]}"}
                               "${singular_image}"
                               ${@+"${@}"}
                               "${singular_instance_name}")
              # Ignore already started by default
              local SINGULARITY_IGNORE_EXIT_CODES="${SINGULARITY_IGNORE_EXIT_CODES-255}"
              ;;
            instance_stop)
              # "singular-compose instance stop" should have the instance name added to the end, but no image name or singular_flags
              subcommand=instance
              subcommand_args=(stop
                               ${@+"${@}"}
                               "${singular_instance_name}")
              # Ignore already stopped by default
              local SINGULARITY_IGNORE_EXIT_CODES="${SINGULARITY_IGNORE_EXIT_CODES-1}"
              ;;
            instance_exec)
              # "singular-compose instance exec" is really just singularity exec instance://{instance name} ...
              subcommand=exec
              subcommand_args=(${subcommand_args[@]+"${subcommand_args[@]}"}
                               ${singular_flags[@]+"${singular_flags[@]}"}
                               "instance://${singular_instance_name}"
                               ${@+"${@}"})
              ;;
            # Everything else follows this pattern
            *)
              subcommand_args+=(${singular_flags[@]+"${singular_flags[@]}"} "${singular_image}" ${@+"${@}"})
              ;;
          esac
          extra_args+=${#}

          function load_singularity_env()
          {
            local i
            ##########################
            ### Export Environment ###
            ##########################
            for (( i=0; i+1<${#singular_environment[@]}; i+=2 )); do
              # https://github.com/sylabs/singularity/issues/3686
              singularity_env_pass "${singular_environment[i]}" "${singular_environment[i+1]}"
            done
            container_environment_override singularity_env_pass
          }

          # Check to see if the first element of singular_environment is set, hence no [@]
          if [ "${SINGULARITY_EXEC-0}" = "0" ]; then
            local JUST_IGNORE_EXIT_CODES="${SINGULARITY_IGNORE_EXIT_CODES-0}"
            (
              unset JUST_IGNORE_EXIT_CODES
              load_singularity_env
              _Singularity
            ) # Do this in a subshell so that these variables don't pollute the rest of just
          else
            load_singularity_env
            _Singularity
          fi
          ;;
        config)
          local instance="${1}"
          shift 1
          extra_args+=1

          singular_load_env "${instance}"

          declare -p singular_environment
          declare -p singular_volumes
          declare -p singular_flags
          declare -p singular_image
          ;;
        config-null)
          local instance="${1}"
          shift 1
          extra_args+=1

          singular_load_env "${instance}"


          null_dump environment singular_environment volumes singular_volumes flags singular_flags image singular_image
          # Steps to parse
          # 1) Split by "\0^" (null+caret)
          # 2) Odds are "name"
          # 3) Evens are "\0." (null+period) separated entries
          # 4) Environment are key(even entries starting at 0)/value(odd) pairs
          ;;

        instance)
          Singularity "${subcommand}" ${@+"${@}"}
          extra_args+=${#}
          ;;
        #singular-compose_import) Create a singularity image ($1) from docker image ($2) using local docker
        import)
          local instance="${1}"
          # Always create a mount point for a test app
          local mount_point_args=("/opt/test/")
          local mount_point
          local image_dir

          singular_load_env "${instance}"

          for mount_point in ${singular_mount_points[@]+"${singular_mount_points[@]}"}; do
            mount_point_args+=(--mount "${mount_point}")
          done

          image_dir="$(dirname "${singular_image}")"
          mkdir -p "${image_dir}"
          pushd "${image_dir}" &> /dev/null
            justify singularity import \
              --name "$(basename "${singular_image}")" \
              ${mount_point_args[@]+"${mount_point_args[@]}"} \
              "${2}"
          popd &> /dev/null
          extra_args+=2
          ;;
        *)
          echo "I don't understand: singular-compose ${subcommand}" >&2
          exit 1
          ;;
      esac
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}