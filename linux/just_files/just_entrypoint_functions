#!/usr/bin/env bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/linux_accounts.bsh"
source "${VSI_COMMON_DIR}/linux/elements.bsh"
source "${VSI_COMMON_DIR}/linux/mount_tools.bsh"

#*# just/plugins/docker/just_entrypoint_functions

#**
# =============================
# J.U.S.T. Entrypoint Functions
# =============================
#
# .. default-domain:: bash
#
# .. file:: just_entrypoint_functions
#
# Functions to help write docker entrypoints
#
# :Arguments: See inputs for other SEE ALSO
#
# .. rubric:: Example
#
# :file:`just_entrypoint_functions`
#
# .. rubric:: Usage
#
# Can also be sourced to call individual functions. By default, calling
# :file:`just_entrypoint_functions` runs
# - :func:`docker_setup_user`
#
# .. seealso::
#   :func:`docker_setup_user`
#
# .. function:: docker_setup_user
#
# Create user/group
#
# :Parameters:
#   * [``DOCKER_ACCOUNTS_CREATE_USER``] - Enables the adding of a new user. If the particular username already exists, it is replaced. Default: 1
#   * [``DOCKER_ACCOUNTS_CREATE_GROUPS``] - Enables the adding of new groups. The first group is set as the user's primary group. Each subsequent group is set as an additional group, and the user is added as a member of each of these groups. If a group name already exists, an incrementing number is appended until the name does not exist. If the GID already exists, it is just used again. Default: 1
#   * [``DOCKER_ACCOUNTS_POSIX_GROUPS``] - Enables filtering group names removing non-posix characters. This is important for operating systems like CentOS, etc... that actually follow the posix rules, unlike Debian. If 100% of the characters are non-posix, the name is based on DOCKER_UNNAMED_GROUP_NAME. Default: 1
#   * [``DOCKER_USERNAME``] - The username used to create the new user. Default: user
#   * [``DOCKER_UID``] - The UID used when creating the new user. Default: 1000
#   * [``DOCKER_GROUP_NAMES``] - The group name(s) used when creating the groups for the new user. IFS delimited string (default: space, tab, newline). Default: user (only the primary group)
#   * [``DOCKER_GIDS``] - The corresponding GID(s) used when creating the new groups. IFS delimited string. Default: 1000
#   * [``DOCKER_UNNAMED_GROUP_NAME``] - The group name used for an unnamed group. Default: group
#   * [``DOCKER_HOME``] - The home directory used when creating a new user. When the new directory is created, it is owned (non-recursively) by the UID/GID. Default: /home/${``DOCKER_USERNAME``}
#**

function docker_setup_user()
{
  local i

  : ${DOCKER_ACCOUNTS_CREATE_USER=1}
  : ${DOCKER_ACCOUNTS_CREATE_GROUPS=1}
  : ${DOCKER_ACCOUNTS_POSIX_GROUPS=${DOCKER_ACCOUNTS_CREATE_GROUPS}}

  : ${DOCKER_USERNAME=user}
  : ${DOCKER_UID=1000}
  : ${DOCKER_GROUP_NAMES=user}
  : ${DOCKER_GIDS=1000}
  : ${DOCKER_UNNAMED_GROUP_NAME=group}
  : ${DOCKER_HOME=/home/${DOCKER_USERNAME}}

  # Convert to arrays
  DOCKER_GIDS=(${DOCKER_GIDS[@]-})
  DOCKER_GROUP_NAMES=(${DOCKER_GROUP_NAMES[@]-})
  # Ensure these two arrays are the same length
  for (( i=${#DOCKER_GROUP_NAMES[@]}; i<${#DOCKER_GIDS[@]}; i++ )); do
    # add_to_group will ensure unique names, but I'll help it out to get it started
    DOCKER_GROUP_NAMES+=("${DOCKER_UNNAMED_GROUP_NAME}_${i}")
  done

  if [ "${DOCKER_ACCOUNTS_POSIX_GROUPS}" == "1" ]; then
    # Remove non-posix characters
    for i in "${!DOCKER_GROUP_NAMES[@]}"; do
      DOCKER_GROUP_NAMES[$i]="$(sed 's|[^0-9a-zA-Z._ -]||g
                                     # in cases where 100% of characters were non-posix
                                     # name the group based on DOCKER_UNNAMED_GROUP_NAME
                                     s|^ *$|'"${DOCKER_UNNAMED_GROUP_NAME}"'|' <<< "${DOCKER_GROUP_NAMES[$i]}")"
    done
  fi


  if [ "${DOCKER_ACCOUNTS_CREATE_USER}" == "1" ]; then
    add_user ${DOCKER_USERNAME} ${DOCKER_UID} ${DOCKER_GIDS[0]} "${DOCKER_HOME}"

    mkdir -p "${DOCKER_HOME}"
    # This will fail when you mount in your home dir as readonly, which is
    # ok, so silence and ignore the error
    chown ${DOCKER_UID}:${DOCKER_GIDS[0]} "${DOCKER_HOME}" &> /dev/null || :
  fi

  if [ "${DOCKER_ACCOUNTS_CREATE_GROUPS}" == "1" ]; then
    local group
    local gshadow
    read_group_data

    LINUX_ACCOUNTS_AUTOSAVE=0 add_group ${DOCKER_GROUP_NAMES[0]} ${DOCKER_GIDS[0]}

    local users
    users=(${DOCKER_USERNAME})
    for ((i=1; i<${#DOCKER_GIDS[@]}; i++)); do
      LINUX_ACCOUNTS_AUTOSAVE=0 add_group ${DOCKER_GROUP_NAMES[$i]} ${DOCKER_GIDS[$i]}
    done

    write_group_data
  fi
}

#**
# .. function:: retry_as_user
#
# If the command fails, retry it as ``DOCKER_USERNAME``
#
# .. rubric:: Usage
#
# Try to run a command as the current user (root); if that fails, run the
# command as ``DOCKER_USERNAME``.
#
# :Arguments: ``$1`` - The command to execute
#
# :Parameters: [``DOCKER_USERNAME``] - The username used to create the new user. Default: user
#**

function retry_as_user()
{
  "${@}" 2>/dev/null || gosu "${DOCKER_USERNAME}" "${@}"
}

#**
# .. function:: docker_link_mounts
#
# Create symlinks based on ``JUST_DOCKER_ENTRYPOINT_LINKS``
#
# When :func:`docker_compose_override generate_docker_compose_override` processes mounts, the desired mount will not be possible in some cases, e.g., on nfs file systems with squash root enabled. Instead, the root of an nfs mount point is mounted into the container in a secondary location, and a symlink is created from the subdirectory to the original mount point. This function creates these symlinks based on the // separated string ``JUST_DOCKER_ENTRYPOINT_LINKS``. e.g., "source//destination//source//destination".
#
# .. rubric:: Usage
#
# Automatically called when :file:`just_entrypoint_functions` is called. If :file:`just_entrypoint_functions` is sourced, then :func:`docker_link_mounts` would need to be called separately.
#
# :Parameters: * [``JUST_DOCKER_ENTRYPOINT_LINKS``] - // delimited string of symlinks to create, e.g., "source//destination//source//destination"
#   * [``DOCKER_LINK_MOUNTS_FORCE``] - Adds a -f to ln commands. Disabled by default. Set this flag to enable.
#   * [``DOCKER_LINK_MOUNTS_NOT_IN_MOUNTS``] - Prevents making symlinks in mounted subdirectories. This is not the default docker behavior, so this feature is disabled by default. Set this flag to enable.
#   * [``DOCKER_USERNAME``] - The username used to create the new user. Default: user
#**

function docker_link_mounts()
{
  local options
  local x
  local y

  : ${DOCKER_USERNAME=user}

  # Short circuit in the case that JUST_DOCKER_ENTRYPOINT_LINKS is unset
  if [ -z "${JUST_DOCKER_ENTRYPOINT_LINKS+set}" ]; then
    return 0
  fi

  local MIFS=${MIFS-:} # change to // when done
  # Convert to array, using // as separator. This means you can't have unclean
  # paths with // in them, but this is an acceptable limitation
  MIFS="${MIFS}" split_s JUST_DOCKER_ENTRYPOINT_LINKS ${JUST_DOCKER_ENTRYPOINT_LINKS+"${JUST_DOCKER_ENTRYPOINT_LINKS}"}

  if [ -n "${DOCKER_LINK_MOUNTS_FORCE+set}" ]; then
    options='-f'
  fi
  if [[ ${OSTYPE} != darwin* ]]; then
    options="${options-} -T"
  fi

  local link_destinations=()
  for ((x=1; x<${#JUST_DOCKER_ENTRYPOINT_LINKS[@]}; x+=2)); do
    # copy to an array of just destinations
    link_destinations+=("${JUST_DOCKER_ENTRYPOINT_LINKS[$x]}")
  done

  # Sort the array
  # per sort's man page:
  # The locale specified by the environment affects sort order. Set LC_ALL=C
  # to get the traditional sort order that uses native byte values.
  # We need it in this order so that base directories come before subdirectories.
  y=()
  while IFS= read -r -d '' x || [ -n "${x}" ]; do
    y+=("${x}")
  done < <(MIFS='\\x00' join_a_out ${link_destinations[@]+"${link_destinations[@]}"} | LC_ALL=C sort -u -z)
  link_destinations=(${y[@]+"${y[@]}"})


  if [ -n "${DOCKER_LINK_MOUNTS_NOT_IN_MOUNTS+set}" ]; then
    # Filter out destinations that are subdirectories of another volume; these
    # links may fail anyway if the directory already exists. We also don't want
    # to make symlinks in host directories if we can help it. symlinks are
    # strictly worse than bind mounts; don't try to make them as capable.
    for x in ${!link_destinations[@]}; do
      for ((y=0; y<x; y++)); do
        if [ -n "${link_destinations[$y]+set}" ] && \
          [[ ${link_destinations[$x]} == ${link_destinations[$y]}/* ]]; then
          unset link_destinations[$x]
          break
        fi
      done
    done
  fi

  for y in ${!link_destinations[@]}; do
    # Last link wins; this matches docker-compose behavior
    for ((x=${#JUST_DOCKER_ENTRYPOINT_LINKS[@]}-2; x>=0; x-=2)); do
      if [ -n "${link_destinations[$y]+set}" ] && \
         [ "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]}" == "${link_destinations[$y]}" ]; then
        retry_as_user mkdir -p "$(dirname "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]}")"

        # Cannot create a symlink over a directory; this will cause the next
        # step to fail. This can occur in a very specific case where a directory
        # structure was created in the docker image (usually so that the
        # entrypoint can run smoothly before just_entrypoint_functions is run).
        # Although it could also potentially be a mount of some sort. Consequently,
        # only delete the directory if it is part of the docker image.
        if [ -d "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]}" ] && \
           [ ! -L "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]}" ] && \
           [ "$(mount_point "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]}")" = "/" ]; then
          rm -rf "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]}"
        fi

        # Don't overwrite an existing file unless explicitly requested
        if ! retry_as_user test -e "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]}" || \
           [ -n "${DOCKER_LINK_MOUNTS_FORCE+set}" ]; then
          # The gosu version covers the case when the link's destination is
          # in a subdirectory of another volume that is on an nfs mount with
          # squash root. NOTE the containing volume was previously symlink'd
          # into place via this symlink indirection.
          retry_as_user ln -s ${options-} "${JUST_DOCKER_ENTRYPOINT_LINKS[$x]}" "${JUST_DOCKER_ENTRYPOINT_LINKS[$((x+1))]%/}"
        fi
        break
      fi
    done
  done
}

#**
# .. function:: docker_setup_data_volumes
#
# Change permissions of data volumes to 777
#
# When :func:`docker_compose_override generate_docker_compose_override` processes
# mounts, it determines the list of internal data volumes, and passes them
# to the container in ``JUST_DOCKER_ENTRYPOINT_CHMOD_DIRS``. This function
# uses that variable to set all the directories' permissions to 777. This is
# useful for when a data volume is just created and it only had root
# permissions
#
# .. rubric:: Usage
#
# Automatically called when just_entrypoint_functions is called. If
# :file:`just_entrypoint_functions` is sourced, then :func:`docker_setup_data_volumes` would need
# to be called separately.
#
# :Parameters:
#   * [``JUST_DOCKER_ENTRYPOINT_CHMOD_DIRS``] - // delimited string of folders corresponding to data volumes e.g., "/tmp/test1///dev/shm/2"
#   * [``JUST_DOCKER_ENTRYPOINT_CHOWN_DIRS``] - // delimited string of folders corresponding to folders in volumes that should be owned by ```DOCKER_UID`` and ``DOCKER_GIDS[0]``
#   * [``DOCKER_USERNAME``] - The username used to reown ``JUST_DOCKER_ENTRYPOINT_CHOWN_DIRS``. Default: user
#**

function docker_setup_data_volumes()
{
  if [ -n "${JUST_DOCKER_ENTRYPOINT_CHMOD_DIRS:+set}" ]; then
    local just_docker_entrypoint_internal_volumes
    MIFS='//' split_s just_docker_entrypoint_internal_volumes "${JUST_DOCKER_ENTRYPOINT_CHMOD_DIRS}"
    chmod 777 "${just_docker_entrypoint_internal_volumes[@]}"
  fi

  if [ -n "${JUST_DOCKER_ENTRYPOINT_CHOWN_DIRS:+set}" ]; then
    : ${DOCKER_UID=1000}

    local just_docker_entrypoint_internal_dirs
    MIFS='//' split_s just_docker_entrypoint_internal_dirs "${JUST_DOCKER_ENTRYPOINT_CHOWN_DIRS}"
    local reown_dirs=()
    local d
    for d in "${just_docker_entrypoint_internal_dirs[@]}"; do
      if [ "$(stat -c %u "${d}" 2>/dev/null)" != "${DOCKER_UID}" ]; then
        reown_dirs=(${reown_dirs[@]+"${reown_dirs[@]}"} "${d}")
      fi
    done
    if [[ ${#reown_dirs[@]} != 0 ]]; then
      echo "Reowning: ${reown_dirs[@]}" >&2
      chown -R "${DOCKER_USERNAME}:" "${reown_dirs[@]}"
    fi
  fi
}

if [ "${BASH_SOURCE[0]}" = "${0}" ] || [ "$(basename "${BASH_SOURCE[0]}")" = "${0}" ]; then
  set -eu
  docker_setup_user ${@+"${@}"} && \
  docker_link_mounts ${@+"${@}"} && \
  docker_setup_data_volumes
fi
