#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/web_tools.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"
source "${VSI_COMMON_DIR}/linux/aliases.bsh"

#*# linux/cuda_info

#**
# ================
# CUDA Information
# ================
#
# .. default-domain:: bash
#
# .. file:: cuda_info.bsh
#
# Determine easy to use capabilities for CUDA devices
#
# There are many versions of CUDA, CUDA card architectures, etc... Knowing how to compile for a specific card is hard enough, but it's very difficult to know what the right architectures are for your specific card and what the limitations are based on your version of CUDA/NVIDIA driver, etc. This script should help determine what versions you have and suggest what architectures to use. This is good enough for an automated solution to get up and running, but these suggestions are not absolute. You may find a fine-tuned configuration that works better on a case-by-case basis.
#
#
# A number of variables are set by the following functions.
#
# .. var:: CUDA_VERSION
#
# The version of CUDA being used. These functions will attempt to discover the CUDA Toolkit in commonly known locations and gather a list of all discovered CUDAs in the sorted array :var:`CUDA_VERSIONS`. Then, the highest capable version of CUDA is picked and set to :var:`CUDA_VERSION`.
#
# :var:`CUDA_VERSION` can optionally be set to a specific version (e.g. "7.5.13"), in which case other CUDA versions will not be discovered and :var:`CUDA_VERSIONS` will not be populated.
#
# .. note::
#
#    Currently, CUDA Toolkits are discovered by checking the system ``PATH`` and ``/usr/local/cuda*/bin/`` directories for the nvcc executable. More paths should be added to this file as they become necessary.
#
# .. var:: CUDA_VERSIONS
#
# List of all :var:`CUDA_VERSION`-s discovered
#
# .. var:: CUDA_ARCHES
#
# An array of CUDA "virtual" instruction sets supported by CUDA. Every version of CUDA (``nvcc``) has a set of "virtual" ``compute_xx`` architectures (ISAs) that it can build against when compiling code for "real" ``sm_xx`` architectures.
#
# This array contains the list of the compute (virtual) architectures supported by the :var:`CUDA_VERSION` version of CUDA as an array of two digit numbers.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#    $ echo "${CUDA_ARCHES[@]}"
#    20 30 32 35 37 50 52 53 60 61 62
#
#    Adding the periods to the architecture version number:
#
#    y=()
#    for x in ${CUDA_ARCHES[@]+"${CUDA_ARCHES[@]}"}; do
#      y+=("${x:0:${#x}-1}.${x:${#x}-1:1}")
#    done
#
#    $ echo "${y[@]}"
#    2.0 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.1 6.2
#
# .. seealso::
#   :var:`CUDA_DEPRECATED`
#
# .. var:: CUDA_CODES
#
# An array of CUDA "real" instruction sets supported by CUDA. Every version of CUDA (``nvcc``) has a set of "real" ``sm_xx`` architectures that that it can assemble native (CUDA binary) code for.
#
# This array contains a list of the sm architectures supported by the :var:`CUDA_VERSION` version of CUDA as an array of two digit numbers.
#
# .. seealso::
#   :var:`CUDA_DEPRECATED`
#
# .. var:: CUDA_MINIMAL_DRIVER_VERSION
#
# Every version of CUDA has a minimal version of the NVIDIA graphics-card driver that must be installed in order to support that version of CUDA. This was largely undocumented until CUDA 10 came out, despite being obviously important. This variable is set to the minimum required version of the NVIDIA driver for the :var:`CUDA_VERSION` version of CUDA, as best as we've been able to determine.
#
# .. var:: CUDA_DEPRECATED
#
# Some versions of CUDA support old instruction sets, but print a deprecated warning. For those versions of CUDA, a :var:`CUDA_DEPRECATED` array is defined to list the two digit architectures that are supported yet deprecated in the :var:`CUDA_VERSION` version of CUDA.
#
# .. var:: CUDA_FORWARD_PTX
#
# PTX arch for newer CUDA cards. In situations where you are making portable fatbinaries, you should compile for every architecture. However, in order to future proof your fatbin for architectures newer than your current version of CUDA supports, you will need to compile to a pure virtual architecture using the PTX feature so that the real architecture can be JIT (Just-In-Time) compiled.
#
# :var:`CUDA_FORWARD_PTX` identifies the fullest-featured PTX architecture so that you can choose to add this to your builds.
#
# .. var:: CUDA_CARDS
#
# The names of the CUDA cards. Exact values may vary, e.g. "Titan X (Pascal)" vs "Titan Xp".
#
# .. var:: CUDA_CARD_FAMILIES
#
#   The family name of each card in :var:`CUDA_CARDS`.
#
# .. var:: CUDA_CARD_ARCHES
#
# The specific CUDA architecture a card natively supports, for each card in :var:`CUDA_CARDS`.
#
# .. var:: CUDA_SUGGESTED_ARCHES
#
# Suggested "virtual" architectures to compile for. Instead of compiling for every architecture that the :var:`CUDA_VERSION` version of CUDA supports, :var:`CUDA_SUGGESTED_ARCHES` is the intersection between :var:`CUDA_CARD_ARCHES` and :var:`CUDA_ARCHES` so that you compile only for your cards.
#
# .. var:: CUDA_SUGGESTED_CODES
#
# Suggested "real" architectures to compile for. Instead of compiling for every architecture that the :var:`CUDA_VERSION` version of CUDA supports, :var:`CUDA_SUGGESTED_CODES` is the intersection between :var:`CUDA_CARD_ARCHES` and :var:`CUDA_CODES` so that you compile only for your cards.
#
# .. var:: CUDA_SUGGESTED_PTX
#
# Suggested PTX architectures to compile for. If your graphics card is too new for the :var:`CUDA_VERSION` version of CUDA, you will need to compile to a pure virtual architecture (by embedding PTX code in the fatbinary) in order to use it. That way, the real architecture can be JIT (Just-In-Time) compiled for at runtime.
#
# :var:`CUDA_SUGGESTED_PTX` identifies the PTX architectures you need to run on newer (unrecognized) cards. You can choose to add them to your builds.
#**

#**
# .. function:: discover_cuda_versions
#
# :Output: :var:`cuda_info.bsh CUDA_VERSIONS`
#          :var:`cuda_info.bsh CUDA_VERSION`
#
# Find CUDA development kits
#
# .. note::
#
#    Will not work on macOS if it has NVIDIA and two or more versions of CUDA installed.
#**
function discover_cuda_versions()
{
  CUDA_VERSIONS=()
  # local IFS=$'\n' # Handle spaces, tabs, but not newlines in the paths
  local version
  for version in nvcc /usr/local/cuda*/bin/nvcc; do
    if ! command -v "${version}" &> /dev/null; then
      continue
    fi
    CUDA_VERSIONS+=($(NVCC="${version}" get_nvcc_version))
  done

  # Maybe nvcc isn't running right or is missing, check for version files
  if [ "${#CUDA_VERSIONS[@]}" = "0" ]; then
    for version in /usr/local/cuda*/version.txt; do
      if [ -r "${version}" ]; then
        CUDA_VERSIONS+=($(version_txt_cuda_version "${version}"))
      fi
    done
    for version in /usr/local/cuda*/version.json; do
      if [ -r "${version}" ]; then
        CUDA_VERSIONS+=($(version_json_cuda_version "${version}"))
      fi
    done
  fi

  if [ "${#CUDA_VERSIONS[@]}" = "0" ] && command -v "${NVIDIA_SMI}" &> /dev/null; then
    echo "No CUDA found: Determining max supported CUDA instead" >&2
    CUDA_VERSIONS=($(nvidia_smi_cuda_version))
  fi

  # Prevent macOS from crashing. Not sure why this is new. Might be darling
  if [ ${#CUDA_VERSIONS[@]} -gt 1 ]; then
    CUDA_VERSIONS=($(sort -uV <<< ${CUDA_VERSIONS[*]+"${CUDA_VERSIONS[*]}"}))
  fi

  # Get the highest cuda level
  CUDA_VERSION=${CUDA_VERSIONS[@]+"${CUDA_VERSIONS[${#CUDA_VERSIONS[@]}-1]}"}
}

#**
# .. function:: nvidia_smi_cuda_version
#
# Starting at NVIDIA Driver version 410.72, ``nvidia-smi`` started listing the maximum version of CUDA that driver supports. This function can be used to parse that.
#
# :Parameters: * ``NVIDIA_SMI`` - Optional path to a specific ``nvidia-smi``. Default: ``nvidia-smi`` (using the system path)
#
# :Output: *stdout* - echoes out the version of CUDA that ``nvidia-smi`` says it supports. If this version of ``nvidia-smi`` does not say, nothing is output.
#**
function nvidia_smi_cuda_version()
{
  ${NVIDIA_SMI} | sed -n${sed_flag_rE} 's|.*CUDA Version: *([0-9.]*).*|\1|;
                                        t done
                                        b
                                        :done
                                        p;
                                        q;'
}

#**
# .. function:: device_query_cuda_capability
#
# :Output: * :var:`cuda_info.bsh CUDA_CARD_FAMILIES`
#          * :var:`cuda_info.bsh CUDA_CARD_ARCHES`
#          * :var:`cuda_info.bsh CUDA_CARDS`
#
# :Parameters: * ``DEVICE_QUERY`` - Optional path to a specific ``deviceQuery``. Default: ``deviceQuery`` (using the system path)
#
# :Return Value: * ``0`` - No errors
#                * Non-zero - If the output of ``deviceQuery`` does not contain any CUDA capabilities, then something likely failed. This is usually caused by running a contianer without the NVIDIA extensions or having an insufficient NVIDIA driver for the version of CUDA ``deviceQuery`` is compiled for.
#
# Device query is one of the sample programs in the CUDA Samples that prints out useful information about the connected CUDA devices.
#
# The ``deviceQuery`` executable is compiled from the source code typically found the in ``/usr/local/cuda/samples/1_Utilities/deviceQuery/``, but can be downloaded precompiled for Linux from https://goo.gl/equvX3
#**
function device_query_cuda_capability()
{
  local card_info

  # deviceQuery may fail, for example, if running without nvidia-docker or if the CUDA driver version is insufficient for CUDA runtime version
  card_info="$(${DEVICE_QUERY-deviceQuery} | \grep -E "CUDA Capability Major/Minor version number|^Device")" || return $?
  CUDA_CARD_ARCHES=($(echo "${card_info}" | \awk '/CUDA Capability Major\/Minor version number/{sub(/\./, "", $NF); print $NF}'))
  cuda_arch_to_cuda_family

  local IFS=$'\n'
  CUDA_CARDS=($(echo "${card_info}" | \awk '/^Device/{$1=$2=""; $0=$0; $1=$1; print}' | \sed 's|"||g'))
}

#**
# .. function:: nvidia_docker_plugin_cuda_capability
#
# The deprecated nvidia-docker v1 API actually hosted GPU information, which was useful for determining the CUDA Arches. This is rarely used now.
#
# :Parameters: [``NV_HOST``] - Environment variable to optionally specify a custom NVIDIA host for the GPUs. Default: ``http://localhost:3476``
#
# :Output: * :var:`cuda_info.bsh CUDA_CARD_FAMILIES`
#          * :var:`cuda_info.bsh CUDA_CARD_ARCHES`
#          * :var:`cuda_info.bsh CUDA_CARDS`
#**
function nvidia_docker_plugin_cuda_capability()
{
  local card_info="$(download_to_stdout ${NV_HOST-http://localhost:3476}/gpu/info)"

  CUDA_CARD_FAMILIES=($(echo "${card_info}" | \awk '/Family:/{print $NF}'))
  CUDA_CARD_ARCHES=($(echo "${card_info}" | \awk '/Arch:/{sub(/\./, "", $NF); print $NF}'))
  local IFS=$'\n'
  CUDA_CARDS=($(echo "${card_info}" | \awk '/Model:/{$1=""; $0=$0; $1=$1; print}'))
}

#**
# .. function:: version_txt_cuda_version
#
# Parses the ``version.txt`` file left behind by some CUDA installs (Version 5.5 through 11.0. 11.0 only installs as part of the "docs" package).
#
# For versions of CUDA that are patched, the highest version number is returned.
#
# :Parameters: [``$1``] - Filename of ``version.txt`` file. Default: Read from stdin
#**
function version_txt_cuda_version()
{
  local versions=($(\awk '{print $NF}' ${1+"${1}"} | sort))
  if [ "${#versions[@]}" -ge 1 ]; then
    echo "${versions[${#versions[@]}-1]}"
  fi
}

#**
# .. function:: version_json_cuda_version
#
# Parses the ``version.json`` file left behind by some CUDA installs (11.2 or newer).
#
# :Parameters: [``$1``] - Filename of ``version.json`` file. Default: Read from stdin
#**
function version_json_cuda_version()
{
  \sed -n${sed_flag_rE} '/"name" *: *"CUDA NVCC"/{N;
                                                  s|.*"version" *: *"([^"]*)".*|\1|p;}' ${1+"${1}"}
}

#**
# .. function:: get_nvcc_version
#
# Determine the version of nvcc
#
# :Parameters: [``$NVCC``] - Name of nvcc executable. Default: ``nvcc``
#
# :Output: **stdout** - Version of ``nvcc``
#**
function get_nvcc_version()
{
  local IFS=' ,V'
  local version=($("${NVCC}" | \sed -n "s|Cuda compilation tools.*release ||p"))
  # Format before 5.5
  if [ "${version[${#version[@]}-1]}" = "0.2.1221" ]; then
    echo "${version[0]}"
  else # new format starting in 5.5
    echo "${version[${#version[@]}-1]}"
  fi
}

#**
# .. function:: cuda_arch_to_cuda_family
#
# Determines CUDA Family names based off of CUDA Arch stored in ``CUDA_CARD_ARCHES``
#
# :Parameters: :var:`cuda_info.bsh CUDA_CARD_ARCHES`
#
# :Output: :var:`cuda_info.bsh CUDA_CARD_FAMILIES`
#**
function cuda_arch_to_cuda_family()
{
  local cuda_card_arches cuda_card_families

  # Put in descending order
  cuda_card_arches=(80 75 70 60 50 30 20 10) # Lowest possible architecture for a specific family
  cuda_card_families=(Ampere Turing Volta Pascal Maxwell Kepler Fermi Tesla) # Matching Family name

  CUDA_CARD_FAMILIES=()
  local arch fam ver
  for arch in ${CUDA_CARD_ARCHES[@]+"${CUDA_CARD_ARCHES[@]}"}; do
    for ver in "${!cuda_card_arches[@]}"; do
      if [ "${arch}" -ge "${cuda_card_arches[ver]}" ]; then
        CUDA_CARD_FAMILIES+=("${cuda_card_families[ver]}")
        continue 2
      fi
    done
    CUDA_CARD_FAMILIES+=("Unknown family")
  done
}

if command -v pgrep &> /dev/null; then
  function __nvidia_docker_is_running()
  {
    \pgrep -f "${1}" &> /dev/null
    return $?
  }
else
  function __nvidia_docker_is_running()
  {
    [ $(\ps -ef | \grep "${1}" | \wc -l) -gt 1 ]
    return $?
  }
fi

#**
# .. function:: discover_cuda_info
#
# Get CUDA info about each card
#
# :Output: * :var:`cuda_info.bsh CUDA_CARDS`
#          * :var:`cuda_info.bsh CUDA_CARD_ARCHES`
#          * :var:`cuda_info.bsh CUDA_CARD_FAMILIES`
#**
function discover_cuda_info()
{
  local IFS="${IFS}"
  local OLD_IFS="${IFS}"

  CUDA_CARD_FAMILIES=()

  # Attempt to use deviceQuery
  if command -v "${DEVICE_QUERY-deviceQuery}" &> /dev/null && device_query_cuda_capability; then
    :
  # Else attempt to use the nvidia-docker daemon
  elif __nvidia_docker_is_running nvidia-docker-plugin || declare -p NV_HOST &> /dev/null; then
    nvidia_docker_plugin_cuda_capability
  else
    echo "deviceQuery not found and nvidia-docker v1 plugin not running"
    echo "deviceQuery can be downloaded from https://www.vsi-ri.com/bin/deviceQuery60"
    echo "or https://goo.gl/equvX3"
  fi
}

#**
# .. function:: cuda_capabilities
#
# :Parameters: ``$1`` - The CUDA version to check against. This is typically the ``nvcc`` version, but the docs version should work too. In a pinch, CUDA version will work, to some extent.
#
# :Output: * :var:`cuda_info.bsh CUDA_ARCHES`
#          * :var:`cuda_info.bsh CUDA_CODES`
#          * :var:`cuda_info.bsh CUDA_MINIMAL_DRIVER_VERSION`
#          * :var:`cuda_info.bsh CUDA_DEPRECATED`
#
# Determine compiler capabilities for specific CDK
#**
function cuda_capabilities()
{
  # This is the most complete list of compute and sm architectures supported by
  # CUDA version that I know of. It was created using strings on nvcc from each
  # version of CUDA. Documentation, stackoverflow, and random blogs often miss
  # at least one piece of information and is not this complete nor will it
  # verify this table.

  CUDA_DEPRECATED=()

  # This seems to be updated regularly
  # [1] https://stackoverflow.com/a/30820690/4166604
  # [2] https://gist.github.com/ax3l/9489132
  case "${1}" in
    1.0*)
      CUDA_ARCHES=(10 11)
      CUDA_CODES=(10 11)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=162.01 #~
      else
        CUDA_MINIMAL_DRIVER_VERSION=100.14 #~
      fi
      ;;
    1.1*)
      CUDA_ARCHES=(10 11)
      CUDA_CODES=(10 11)
      CUDA_MINIMAL_DRIVER_VERSION=169.01
      ;;
    2.0*)
      CUDA_ARCHES=(10 11 12 13)
      CUDA_CODES=(10 11 12 13)
      CUDA_MINIMAL_DRIVER_VERSION=177.70 #~
      ;;
    2.1*)
      CUDA_ARCHES=(10 11 12 13)
      CUDA_CODES=(10 11 12 13)
      CUDA_MINIMAL_DRIVER_VERSION=180.22 #~
      ;;
    2.2*)
      CUDA_ARCHES=(10 11 12 13)
      CUDA_CODES=(10 11 12 13)
      CUDA_MINIMAL_DRIVER_VERSION=185.18.14 #~
      ;;
    2.3*)
      CUDA_ARCHES=(10 11 12 13)
      CUDA_CODES=(10 11 12 13)
      CUDA_MINIMAL_DRIVER_VERSION=190.53 #~
      ;;
    3.0*)
      CUDA_ARCHES=(10 11 12 13 20)
      CUDA_CODES=(10 11 12 13 20)
      CUDA_MINIMAL_DRIVER_VERSION=195.36.15
      ;;
    3.1*)
      CUDA_ARCHES=(10 11 12 13 20 30)
      CUDA_CODES=(10 11 12 13 20 21 22 23 30)
      CUDA_MINIMAL_DRIVER_VERSION=256.40
      ;;
    3.2*) # CUDA .16
      CUDA_ARCHES=(10 11 12 13 20)
      CUDA_CODES=(10 11 12 13 20 21)
      CUDA_MINIMAL_DRIVER_VERSION=260.19.26
      ;;
    4.0*) # CUDA .17
      CUDA_ARCHES=(10 11 12 13 20)
      CUDA_CODES=(10 11 12 13 20 21 22 23)
      CUDA_MINIMAL_DRIVER_VERSION=270.41.19
      ;;
    4.1*) # CUDA .28
      CUDA_ARCHES=(10 11 12 13 20)
      CUDA_CODES=(10 11 12 13 20 21)
      CUDA_MINIMAL_DRIVER_VERSION=285.05.33
      ;;
    4.2*) # CUDA .9
      CUDA_ARCHES=(10 11 12 13 20 30)
      CUDA_CODES=(10 11 12 13 20 21 30)
      CUDA_MINIMAL_DRIVER_VERSION=295.41
      ;;
    5.0*) # CUDA .35
      CUDA_ARCHES=(10 11 12 13 20 30 35)
      CUDA_CODES=(10 11 12 13 20 21 30 35)
      CUDA_MINIMAL_DRIVER_VERSION=304
      ;;
    5.5*) # .0, CUDA .22
      CUDA_ARCHES=(10 11 12 13 20 30 35)
      CUDA_CODES=(10 11 12 13 20 21 30 35)
      CUDA_MINIMAL_DRIVER_VERSION=319
      ;;
    6.0*) # .1, CUDA .37
      CUDA_ARCHES=(10 11 12 13 20 30 32 35 50)
      CUDA_CODES=(10 11 12 13 20 21 30 32 35 50)
      CUDA_MINIMAL_DRIVER_VERSION=331
      CUDA_DEPRECATED=(10)
      ;;
    6.5*) # .12, CUDA .14
      CUDA_ARCHES=(11 12 13 20 30 32 35 37 50 52)
      CUDA_CODES=(11 12 13 20 21 30 32 35 37 50 52)
      CUDA_MINIMAL_DRIVER_VERSION=340
      CUDA_DEPRECATED=(11 12 13)
      ;;
    7.0*) # .27, CUDA .28
      CUDA_ARCHES=(20 30 32 35 37 50 52 53)
      CUDA_CODES=(20 21 30 32 35 37 50 52 53)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=347.62
      else
        CUDA_MINIMAL_DRIVER_VERSION=346.46
      fi
      ;;
    7.5*) # .17, CUDA .18
      CUDA_ARCHES=(20 30 32 35 37 50 52 53)
      CUDA_CODES=(20 21 30 32 35 37 50 52 53)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=353.66
      else
        CUDA_MINIMAL_DRIVER_VERSION=352.31
      fi
      ;;
    8.0.44)
      CUDA_ARCHES=(20 30 32 35 37 50 52 53 60 61 62)
      CUDA_CODES=(20 21 30 32 35 37 50 52 53 60 61 62)
      CUDA_DEPRECATED=(20 21)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=369.30
      else
        CUDA_MINIMAL_DRIVER_VERSION=367.48
      fi
      ;;
    8.0*) # .61 GA2
      CUDA_ARCHES=(20 30 32 35 37 50 52 53 60 61 62)
      CUDA_CODES=(20 21 30 32 35 37 50 52 53 60 61 62)
      CUDA_DEPRECATED=(20 21)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=376.51
      else
        CUDA_MINIMAL_DRIVER_VERSION=375.26
      fi
      ;;
    9.0*) # .76 and RC2 .103 and 0.176 and maybe RC .69 [2]
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=385.54
      else
        CUDA_MINIMAL_DRIVER_VERSION=384.81
      fi
      #https://devtalk.nvidia.com/default/topic/1023719/cuda-setup-and-installation/-solved-cuda-9-0rc-and-nvidia-384-69-but-driver-version-is-insufficient-for-cuda-runtime-version/
      ;;
    9.1*) # .85
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70 72)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70 72)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=391.29
      else
        CUDA_MINIMAL_DRIVER_VERSION=390.46
      fi
      # https://devtalk.nvidia.com/default/topic/1028802/cuda-setup-and-installation/problems-with-cuda-9-1-in-ubuntu-16-04/
      ;;
    9.2.88)
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70 72)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70 72)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=397.44
      else
        CUDA_MINIMAL_DRIVER_VERSION=396.26
      fi
      ;;
    9.2*) # .148 Update 1
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70 72)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70 72)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=398.26
      else
        CUDA_MINIMAL_DRIVER_VERSION=396.37
      fi
      ;;
    10.0*) #.130
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70 72 75)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70 72 75)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=411.31
      else
        CUDA_MINIMAL_DRIVER_VERSION=410.48
      fi
      ;;
    10.1*) #.105/.168 U1/.243 U2
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70 72 75)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70 72 75)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=418.96
      else
        CUDA_MINIMAL_DRIVER_VERSION=418.39
      fi
      ;;
    10.2*) #.89
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70 72 75)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70 72 75)
      CUDA_DEPRECATED=(30 32 35 37 50)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=441.22
      else
        CUDA_MINIMAL_DRIVER_VERSION=440.33
      fi
      ;;
    11.0.189) # also 11.0.1 RC, there were multiple RCs
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_DEPRECATED=(35 37 50)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=451.22
      else
        CUDA_MINIMAL_DRIVER_VERSION=450.36.06
      fi
      ;;
    11.0.194|11.0.207|11.0.2) # docs .207, CUDA .2 GA
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_DEPRECATED=(35 37 50)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=451.48
      else
        CUDA_MINIMAL_DRIVER_VERSION=450.51.05
      fi
      ;;
    11.0.221|11.0.228|11.0.3) # docs .228, CUDA .3 Update 1
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_DEPRECATED=(35 37 50)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=451.82
      else
        CUDA_MINIMAL_DRIVER_VERSION=450.51.06
      fi
      ;;
    # Use the least common denominator, incase the answer "11.0" is retrieved
    # from nvidia-smi
    11.0*) #.167, CUDA .1 RC, doc .182
      CUDA_ARCHES=(30 32 35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_CODES=(30 32 35 37 50 52 53 60 61 62 70 72 75 80)
      CUDA_DEPRECATED=(30 32 35 37 50)
      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=451.22
      else
        CUDA_MINIMAL_DRIVER_VERSION=450.36.06
      fi
      ;;
    11.1.74|11.1.0) # CUDA .0 GA
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80 86) #sm_20 too? That can't be right
      CUDA_DEPRECATED=(35 37 50)

      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=456.38
      else
        CUDA_MINIMAL_DRIVER_VERSION=455.23
      fi
      ;;
    11.1*) # .105, CUDA .1 Update 1
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_DEPRECATED=(35 37 50)

      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=456.81
      else
        CUDA_MINIMAL_DRIVER_VERSION=455.32
      fi
      ;;
    11.2.67|11.2.0) # CUDA .0
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_DEPRECATED=(35 37 50)

      if [ "${OS-}" == "Windows_NT" ]; then
        # Might actually be 460.89, docs changed in 11.2.1
        CUDA_MINIMAL_DRIVER_VERSION=460.82
      else
        # Might actually be 460.27.04, docs changed in 11.2.1
        CUDA_MINIMAL_DRIVER_VERSION=460.27.03
      fi
      ;;
    11.2.142|11.2.1) # CUDA .1 Update 1
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_DEPRECATED=(35 37 50)

      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=461.09
      else
        CUDA_MINIMAL_DRIVER_VERSION=460.32.03
      fi
      ;;
    11.2*) # .152, CUDA .2 Update 2
      CUDA_ARCHES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_CODES=(35 37 50 52 53 60 61 62 70 72 75 80 86)
      CUDA_DEPRECATED=(35 37 50)

      if [ "${OS-}" == "Windows_NT" ]; then
        CUDA_MINIMAL_DRIVER_VERSION=461.33
      else
        CUDA_MINIMAL_DRIVER_VERSION=460.32.03
      fi
      ;;
    # 11.3*) ?
    #   # run "strings `which nvcc` | grep compute_" (ARCHES) and "sm_" (CODES) and you'll get a complete list
    #   # The strings output typically has a "are deprecated and may be removed in a future release" message
    #   #
    #   # strings nvcc | \grep '^sm_' | sed 's|sm_||' | tr '\n' ' '; echo
    #   # strings nvcc | \grep '^compute_' | sed 's|compute_||' | tr '\n' ' '; echo
    #   ;;
    *)
      echo "CUDA Version ${CUDA_VERSION} is not programmed in here yet..." >&2
      CUDA_ARCHES=()
      CUDA_CODES=()
      ;;
  esac
}

#**
# .. function:: suggested_architectures
#
# :Output: * :var:`cuda_info.bsh CUDA_SUGGESTED_ARCHES`
#          * :var:`cuda_info.bsh CUDA_SUGGESTED_CODES`
#          * :var:`cuda_info.bsh CUDA_SUGGESTED_PTX`
#          * :var:`cuda_info.bsh CUDA_FORWARD_PTX`
#
# Calculate suggested architectures
#**
function suggested_architectures()
{
  local x arch y
  local IFS="${IFS}"

  CUDA_SUGGESTED_ARCHES=()
  CUDA_SUGGESTED_CODES=()
  CUDA_SUGGESTED_PTX=()

  # Loop through all the card aches
  for arch in ${CUDA_CARD_ARCHES[@]+"${CUDA_CARD_ARCHES[@]}"}; do
    for x in ${CUDA_ARCHES[@]+"${!CUDA_ARCHES[@]}"}; do
      # If it's an exact match, add it!
      if [ "${CUDA_ARCHES[$x]}" == "${arch}" ]; then
        CUDA_SUGGESTED_ARCHES+=("${arch}")
        continue 2
      # If it's greater than, that means there is no exact match.
      # The last compute checked was the right answer. Use that.
      elif [ "${CUDA_ARCHES[$x]}" -gt "${arch}" ]; then
        # Verify the compute family matches, else you probably have a card that
        # is too old, like a Fermi???
        if [ "${x}" -gt "0" ]; then
          CUDA_SUGGESTED_ARCHES+=("${CUDA_ARCHES[$x-1]}")
        else
          : #: CUDA_SUGGESTED_ARCHES+=("TOOOLD")
        fi
        continue 2
      fi
    done

    # If you get here, either you have a newer arch of an already supported arch,
    # or you have a newer card than this version of cuda supports. Let's check
    # the first case first.
    if [ "${CUDA_ARCHES[$x]:0:1}" == "${arch:0:1}" ]; then
      CUDA_SUGGESTED_ARCHES+=("${CUDA_ARCHES[$x]}")
    else
      # If you get here, that means you have have a newer card than this version
      # of cuda supports. So the best answer is to PTX compile for it.
      CUDA_SUGGESTED_PTX+=("${CUDA_ARCHES[$x]}")
    fi
  done

  for arch in ${CUDA_CARD_ARCHES[@]+"${CUDA_CARD_ARCHES[@]}"}; do
    for x in ${CUDA_CODES[@]+"${!CUDA_CODES[@]}"}; do
      # If it's an exact match, add it!
      if [ "${CUDA_CODES[$x]}" == "${arch}" ]; then
        CUDA_SUGGESTED_CODES+=("${arch}")
        continue 2
      # If it's greater than, that means there is no exact match.
      # The last compute checked was the right answer. Use that.
      elif [ "${CUDA_CODES[$x]}" -gt "${arch}" ]; then
        # Verify the compute family matches, else you probably have a card that
        # is too old, like a Fermi???
        if [ "${x}" == "0" ]; then
          # Too old
          : #CUDA_SUGGESTED_CODES+=("TOOOLD")
        else # if [ "${CUDA_CODES[$x-1]:0:1}" == "${arch:0:1}" ]; This should always be true
          CUDA_SUGGESTED_CODES+=("${CUDA_CODES[$x-1]}")
        fi
        continue 2
      fi
    done

    # If you get here, either you have a newer arch of an already supported arch,
    # or you have a newer card than this version of cuda supports. Let's check
    # the first case first.
    if [ "${CUDA_CODES[$x]:0:1}" == "${arch:0:1}" ]; then
      CUDA_SUGGESTED_CODES+=("${CUDA_CODES[$x]}")
    # no else; PTX is for ARCH, not CODES
    fi
  done

  CUDA_FORWARD_PTX=${CUDA_ARCHES[@]+"${CUDA_ARCHES[${#CUDA_ARCHES[@]}-1]}"}

  IFS=$'\n'
  CUDA_SUGGESTED_ARCHES=($(sort -u <<< ${CUDA_SUGGESTED_ARCHES[*]+"${CUDA_SUGGESTED_ARCHES[*]}"}))
  CUDA_SUGGESTED_CODES=($(sort -u <<< ${CUDA_SUGGESTED_CODES[*]+"${CUDA_SUGGESTED_CODES[*]}"}))
  CUDA_SUGGESTED_PTX=($(sort -u <<< ${CUDA_SUGGESTED_PTX[*]+"${CUDA_SUGGESTED_PTX[*]}"}))
}

#**
# .. function:: cmake_cuda_flags
#
# :Parameters: * :var:`cuda_info.bsh CUDA_SUGGESTED_ARCHES`
#              * :var:`cuda_info.bsh CUDA_SUGGESTED_CODES`
#              * [:var:`cuda_info.bsh CUDA_SUGGESTED_PTX`]
# :Output: *stdout* - echoes out the value of the target_CUDA_architectures
#
# Generate CUDA flags for CMake
#
# Modern CMake installs include a FindCUDA.cmake script which calls the select_compute_arch.cmake script (https://goo.gl/uZvAjR). It uses a limited version of the tables that :file:`cuda_info.bsh` uses and is prone to being out of date.
#
# This function will calculate the suggested value of target_CUDA_architectures for CMake's:
#
#   FindCUDA.cmake:select_compute_arch.cmake:CUDA_SELECT_NVCC_ARCH_FLAGS
#
# You will need to find where this is used and set the variable accordingly.
#
# .. rubric:: Example
#
# For example, PyTorch's CMake contains:
#
# .. code-block:: bash
#
#   CUDA_SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA $ENV{TORCH_CUDA_ARCH_LIST})
#
# Setting the environment variable ``TORCH_CUDA_ARCH_LIST`` to the output of :func:`cmake_cuda_flags` will result in using the desired CUDA architecture and code versions.
#
# To add the :var:`cuda_info.bsh CUDA_FORWARD_PTX`, run:
#
# .. code-block:: bash
#
#   CUDA_SUGGESTED_PTX+=(${CUDA_FORWARD_PTX})
#
# before calling :func:`cmake_cuda_flags`
#**
function cmake_cuda_flags()
{
  local cmake=()
  local x
  local y
  local ptx
  local OLD_IFS="${IFS}"

  for i in "${!CUDA_SUGGESTED_ARCHES[@]}"; do
    if [ "${CUDA_SUGGESTED_ARCHES[$i]}" == "${CUDA_SUGGESTED_CODES[$i]}" ]; then
      x="${CUDA_SUGGESTED_ARCHES[$i]}"
      x="${x:0:${#x}-1}.${x:${#x}-1:1}"
    else
      x="${CUDA_SUGGESTED_CODES[$i]}"
      y="${CUDA_SUGGESTED_ARCHES[$i]}"
      x="${x:0:${#x}-1}.${x:${#x}-1:1}"
      y="${y:0:${#y}-1}.${y:${#y}-1:1}"
      x="${x}(${y})"
    fi
    cmake+=($x)
  done

  ptx=(${CUDA_SUGGESTED_PTX[@]+"${CUDA_SUGGESTED_PTX[@]}"})
  IFS=$'\n'
  ptx=($(echo "${ptx[*]+"${ptx[*]}"}" | sort -u))
  IFS="${OLD_IFS}"
  for i in "${!ptx[@]}"; do
    x="${CUDA_SUGGESTED_PTX[$i]}"
    x="${x:0:${#x}-1}.${x:${#x}-1:1}"
    cmake+=("${x}+PTX")
  done

  echo -n ${cmake[*]+"${cmake[*]}"}
}

#**
# .. function:: discover_cuda_all
#
# Helper function to call all the discovery code in one call.
#
# There are two methods for CUDA device discovery (in order):
#
# 1. Using deviceQuery (available here https://goo.gl/ocBgPU)
#
#   * looks for ${DEVICE_QUERY-deviceQuery} on the PATH
#
# 2. Using the nvidia-docker-plugin to get and parse GPU information
#
#   * discovered using either ``NV_HOST`` or checking to see if nvidia-docker-plugin is running locally using pgrep or ps
#
# When running in a docker, deviceQuery is the preferred method. ``NV_HOST`` could be used, but that involves telling the docker the IP of the host, or using a shared network mode in order to use localhost (which is not recommended for production). Attempting to discover nvidia-docker-plugin will not work in a docker.
#
# :Output: * :var:`cuda_info.bsh CUDA_CARDS`
#          * :var:`cuda_info.bsh CUDA_CARD_ARCHES`
#          * :var:`cuda_info.bsh CUDA_CARD_FAMILIES`
#
# .. note::
#
#    If deviceQuery is not used, then an internal lookup table is used, but only supports Tesla, Fermi, Kepler, Maxwell, Pascal, Volta, Tesla, and Ampere. Additional family names need to be added as they are released.
#**
function discover_cuda_all()
{
  # Call all of the CUDA discovery functions
  if [ -z "${CUDA_VERSION+set}" ]; then
    discover_cuda_versions
  fi

  if [ -n "${CUDA_VERSION+set}" ]; then
    discover_cuda_info
    cuda_capabilities "${CUDA_VERSION}"
    suggested_architectures
  else
    echo "Could not determine a CUDA version, please set CUDA_VERSION and call again" >&2
  fi
}
