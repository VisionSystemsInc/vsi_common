#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/aliases

#**
# ==================
# Executable Aliases
# ==================
#
# .. default-domain:: bash
#
# .. file:: aliases.bsh
#
# Since bash script do not use ``alias`` by default, common external programs are soft coded using an all caps variable name (e.g. ``tar`` is called using ``"${TAR}"``. Simply source :file:`aliases.bsh` and use the variables.
#
# Variables should default to the common executable name, and allow the user to override them.
#
# For example, :var:`SSH` defaults to ``ssh``. There are a number of ways to override this:
#
# * ``SSH=ssh2`` - Finds the command on the path called ``ssh2``
# * ``SSH=/usr/local/bin/ssh`` - Uses a full path
# * ``function ssh3(){ SSH_FLAG=3 ssh -v ${@+"${@}"}; }; export -f ssh3; SSH=ssh3`` - Use an exported function
# * ``echo '#!/usr/bin/env bash' > ~/foo; echo 'ssh -v ${@}' >> ~/foo; SSH=~/foo``
#
# .. note::
#
#    ``SSH="ssh -v"`` will look for an executable called ``ssh -v``, not run ``ssh`` with the ``-v`` flag
#
# .. var:: GIT
#
# Name/path of git executable
#
# Instead of hard-coding "git" everywhere, use the variable :var:`GIT` so that when the need comes, it is easier to switch which executable gets called. Default is ``git``. Set to empty string to have any calls to git skipped.
#
# .. note::
#
#   When using the GIT env variable in this file, do not surround it with quotes as you normally would. Although this prevents using a path to ``git`` with a space in it, in exchange, it may be possible (eventually) to enable a dry-run-ish capability if GIT is set to ``echo git``. However, this feature does not currently work and even in the future may not work very well because this script is constantly cloning and cd'ing to new repos.
#**

: ${GIT=git}

#**
# .. var:: TAR
#
# Name/path of tar executable
#
# Instead of hard-coding "tar" everywhere, use the variable :var:`TAR` so that when the need comes, it is easier to switch which executable gets called. Default is ``tar``.
#
# .. note::
#
#   When using the TAR env variable in this file, do not surround it with quotes as you normally would. Although this prevents using a path to ``tar`` with a space in it, in exchange, it may be possible (eventually) to enable a dry-run-ish capability if TAR is set to 'echo tar'.
#**

: ${TAR=tar}

#**
# .. var:: DOCKER
#
# Name/path of docker executable
#
# Instead of hard-coding "docker" everywhere, use the variable :var:`DOCKER` so that when the need comes, it is easier to switch which executable gets called.
#**

: ${DOCKER=docker}

#**
# .. var:: DOCKER_COMPOSE
#
# Name/path of docker-compose executable
#
# Instead of hard-coding "docker-compose" everywhere, use the variable :var:`DOCKER_COMPOSE` so that when the need comes, it is easier to switch which executable gets called
#**

: ${DOCKER_COMPOSE=docker-compose}

#**
# .. var:: SINGULARITY
#
# Name/path of singularity executable
#
# Instead of hard-coding "singularity" everywhere, use the variable :var:`SINGULARITY` so that when the need comes, it is easier to switch which executable gets called.
#**

: ${SINGULARITY=singularity}

#**
# .. var:: NVIDIA_SMI
#
# Name/path of nvidia-smi executable
#
# Instead of hard-coding "nvidia-smi" everywhere, use the variable :var:`NVIDIA_SMI` so that when the need comes, it is easier to switch which executable gets called.
#**

: ${NVIDIA_SMI=nvidia-smi}

#**
# .. var:: SSH
#
# Name/path of ssh executable
#
# Instead of hard-coding "ssh" everywhere, use the variable :var:`SSH` so that when the need comes, it is easier to switch which executable gets called.
#**

: ${SSH=ssh}