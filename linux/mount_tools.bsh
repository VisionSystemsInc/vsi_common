#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/mount_tools

#**
# ===========
# Mount Tools
# ===========
#
# .. default-domain:: bash
#
# .. file:: mount_tools.bsh
#
#**

#**
# .. function:: mount_point
#
# :Arguments: * ``$1`` - path of file/directory
#             * [``$2``...] - Comma separated list limiting the file system types to process. All other filesystems will be excluded
# :Output: *stdout* - Mount point containing file/directory
# :Return Value: * ``0`` - Success
#                * ``1`` - Failed
#
# Get the mount point of a path
#
# .. note::
#   Works on Mac/Linux and Windows if you have a df that acts normally (MINGW or cygwin)
#**
function mount_point()
{
  local lines
  local line
  local x
  local options=()
  local IFS="${IFS}"
  local OLD_IFS="${IFS}"

  local target="${1}"
  shift 1

  if [ ${#} -gt 0 ]; then
    if [[ ${OSTYPE-} = darwin* ]]; then
      local OLD_IFS="${IFS}"
      local IFS
      options+=(-T)
      IFS=","
      options+=( "${*}" )
      IFS="${OLD_IFS}"
    else
      for x in "${@}"; do
        options+=(-t "${x}")
      done
    fi

  fi

  lines="$(df ${options[@]+"${options[@]}"} "${target}" 2>/dev/null)" || return $?

  {
    read -r line
    x=${line%%Mounted on}
    read -r line
    echo ${line:${#x}}
  } <<< "${lines}"
}

#**
# .. function:: mount_type
#
# :Arguments: ``$1`` - Mount name (after running through mount_point)
#
# Returns the mount type of a mount point
#
# .. seealso::
#   :func:`mount_point`
#
# .. note::
#   Mac/Linux compatible. Works on Windows if you actually have a normal POSIX mount (MING/cygwin).
#
# .. rubric:: Bugs
#
# ``$1`` is actually a regex. So make sure to escape it if it has special characters Windows 10 comes with a mount command that this will not currently work with Darling does not include a mount command
#**
function mount_type()
{
  mount | sed -${sed_flag_rE}n 's:^.* on '"${1}"' (type |\()([^, ]*).*:\2:p'
}

#**
# .. function:: is_nfs
#
# :Arguments: ``$1`` - mount type
# :Return Value: * ``0`` - Yes
#                * ``1`` - No
#
# Checks whether mount type is one of the known nfs names
#
# .. note::
#   Deprecated
#**
function is_nfs()
{
  if [ "${1}" == "nfs" -o  "${1}" == "nfs3" -o "${1}" == "nfs4" ]; then
    return 0
  fi
  return 1
}
