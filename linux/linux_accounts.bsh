#!/usr/bin/env bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/file_tools.bsh"

#*# linux/linux_accounts

#**
# ================
# Linux Accounts
# ================
#
# .. default-domain:: bash
#
# .. file:: linux_accounts.bsh
#
# Functions for manipulating linux user/groups
#
# .. note::
#   Works on tested (all?) versions CentOS, Ubuntu, Debian, Fedora, Alpine, BusyBox, CirrOS, Amazon Linux, and Clear Linux
#
# .. rubric:: Bugs
#
# On operating systems like Clear Linux, (and other more complicated setups like LDAP/NIS/etc...) where the user/group lists come from multiple places, the non-duplication code may not work as expected. This could be worked around by setting the passwd/etc... arrays yourself before calling add_user/add_group, but this too may not be the desired outcome.
#
#   - Arrays with the first element unset may have unpredictable behavior
#   - If the passwd file exists and the shadow does not, it will not be detected
#   - If the group file exists and the gshadow does not, it will not be detected
#**

#**
# .. var:: LINUX_ACCOUNTS_*_FILE
#
# | LINUX_ACCOUNTS_PASSWD_FILE - Location of passwd file
# | LINUX_ACCOUNTS_SHADOW_FILE - Location of shadow file
# | LINUX_ACCOUNTS_GROUP_FILE - Location of group file
# | LINUX_ACCOUNTS_GSHADOW_FILE - Location of gshadow file
#
# Allows you to change the location to something other than their /etc location
#**
: ${LINUX_ACCOUNTS_PASSWD_FILE=/etc/passwd}
: ${LINUX_ACCOUNTS_SHADOW_FILE=/etc/shadow}
: ${LINUX_ACCOUNTS_GROUP_FILE=/etc/group}
: ${LINUX_ACCOUNTS_GSHADOW_FILE=/etc/gshadow}

#**
# .. function:: read_file
#
# :Arguments: * ``$1`` - Filename
#             * ``$2`` - array_name
#
# :Output: ``${!2[@]}`` - Array of contents of the file; one line per element
#
# Read contents of /etc/passwd or similar files into an array
#
# .. note::
#   This is designed to work on newline separated files like /etc/passwd, /etc/group, etc...
#**
function read_file()
{
  # Make newlines the only array separator
  local IFS=$'\n'
  # Disable glob expansion
  local GLOBIGNORE='*'
  local line
  # Loop var
  local -i i=0

  # Clear array
  unset "${2}"

  if [ -e "${1}" ]; then
    while IFS='' read -r line || [[ -n "${line}" ]]; do
      read -r "${2}[i]" <<< "${line}"
      i+=1
    done < "${1}"
  fi
}

#**
# .. function:: write_file
#
# :Arguments: * ``$1`` - Filename
#             * ``$2``... - Lines to write
#
# Write contents /etc/passwd or similar from an array
#
# .. note::
#   This is designed to work on newline separated files like /etc/passwd, /etc/group, etc...
#**
function write_file()
{
  local IFS=$'\n'
  local GLOBIGNORE='*'
  local filename="${1}"
  shift 1
  echo "${*}" > "${filename}"
}


#**
# .. function:: add_user
#
# :Arguments: * ``$1`` - User name
#             * [``$2``] - UID. Default: 1000
#             * [``$3``] - GID. Default: 1000
#             * [``$4``] - User home (defaults to /home/$1)
# :Parameters: * [passwd] - List of passwd lines. Auto loaded if not defined
#              * [shadow] - List of shadow lines. Auto loaded if not defined and it exists
#              * [``LINUX_ACCOUNTS_AUTOSAVE``] - Auto writes out passwd/shadow file. Default: ``1``
#
# Adds a new user to the OS
#
# .. note::
#   Will write a new passwd to /etc/passwd. If it is determined that the OS uses /etc/shadow too, then that will be written to also.
#**
function add_user()
{
  # Read in the passwd array if it doesn't exist already
  if ! declare -p passwd &> /dev/null; then
    local passwd
    read_file "${LINUX_ACCOUNTS_PASSWD_FILE}" passwd
  fi

  # The second test is for OS's like clearlinux which contain no user/group files
  # until after an additional user/group is created.
  if [ -e "${LINUX_ACCOUNTS_SHADOW_FILE}" ] || ( [ ! -e "${LINUX_ACCOUNTS_PASSWD_FILE}" ] && getent shadow &> /dev/null ); then
    # Read in the shadow array if it doesn't exist already
    if ! declare -p shadow &> /dev/null; then
      local shadow
      read_file "${LINUX_ACCOUNTS_SHADOW_FILE}" shadow
    fi

    # Add the user
    add_to_passwd "${1}" x "${2-1000}" "${3-1000}" "${4-/home/${1}}"
    add_to_shadow "${1}" '*'
  else
    # Add the user
    add_to_passwd "${1}" x "${2-1000}" "${3-1000}" "${4-/home/${1}}"
  fi

  if [ "${LINUX_ACCOUNTS_AUTOSAVE-1}" == "1" ]; then
    write_user_data
  fi
}

#**
# .. function:: add_to_passwd
#
# :Arguments: * ``$1`` - User name
#             * [``$2``] - Encrypted password (x for none). Default: x
#             * [``$3``] - UID. Default: 1000
#             * [``$4``] - GID. Default: 1000
#             * [``$5``] - User home: Default: /home/$1
#             * [``$6``] - Default shell. Default: bash or sh
# :Parameters: passwd - List of passwd lines
#
# Adds entry to passwd array
#
# .. note::
#   If the username already exists, it is replaced.
#
# .. rubric:: Bugs
#
# I imagine bad things would happen if you "add_to_passwd root"
#**
function add_to_passwd()
{
  local IFS=:
  local user_info
  local i

  local new_passwd="${1}:${2-x}:${3-1000}:${4-1000}::${5-/home/${1}}:${6-$(command -v bash || command -v sh)}"

  for i in "${!passwd[@]}"; do
    # User Name[0], x[1], UID[2], GID[3], FullName,RoomNumber,WorkPhone,HomePhone,Other[4], Home Dir[5], Shell[6]
    user_info=(${passwd[i]})

    # If name already exists, replace it
    if [ "${user_info[0]}" == "${1}" ]; then
      passwd[i]="${new_passwd}"
      return 0
    fi
  done
  passwd=("${new_passwd}"
          ${passwd[@]+"${passwd[@]}"} )
}

#**
# .. function:: add_to_shadow
#
# :Arguments: * ``$1`` - User name
#             * ``$2`` - Encrypted password (* for none)
#
# Adds entry to shadow array
#**
function add_to_shadow()
{
  local IFS=:
  local user_info
  local i

  local new_shadow="${1}:${2}:$(($(date +%s)/3600/24)):0:99999:7:::"

  for i in "${!shadow[@]}"; do
    # User Name[0], x[1], last password change[2], min days to change password[3], max days to change password[4], password warning period[5], password inactivity period[6], account expiration date[7], reserved[8]
    user_info=(${shadow[i]})

    # If name already exists, replace it
    if [ "${user_info[0]}" == "${1}" ]; then
      shadow[i]="${new_shadow}"
      return 0
    fi
  done
  shadow=("${new_shadow}"
          ${shadow[@]+"${shadow[@]}"} )
}

#**
# .. function:: read_user_data
#
# :Output: * passwd - Array of passwd entries
#          * shadow - Array of shadow entries. Undefined if shadow does not exist
#
# Helper function to read passwd/shadow
#**
function read_user_data()
{
  read_file "${LINUX_ACCOUNTS_PASSWD_FILE}" passwd
  read_file "${LINUX_ACCOUNTS_SHADOW_FILE}" shadow
}

#**
# .. function:: write_user_data
#
# :Parameters: * passwd - Array of passwd entries
#              * [shadow] - Array of shadow entries. If undefined, shadow is not written
#
# Helper function to write passwd/shadow
#**
function write_user_data()
{
  write_file "${LINUX_ACCOUNTS_PASSWD_FILE}" ${passwd[@]+"${passwd[@]}"}
  if [ " ""${shadow[@]+set}" = " set" ]; then
    write_file "${LINUX_ACCOUNTS_SHADOW_FILE}" ${shadow[@]+"${shadow[@]}"}
  fi
}

#**
# .. function:: add_group
#
# :Arguments: * ``$1`` - Group name
#             * ``$2`` - GID
# :Parameters: * groups - List of group lines
#              * [users] - List of users to add to the group
#              * [``LINUX_ACCOUNTS_AUTOSAVE``] - Auto writes out group/gshadow file. Default: ``1``
#              * [suffix] - Suffix to add to group_name if there is a name clash. For internal use
#
# Adds a new group to the OS
#
# .. note::
#   Will write a new group to /etc/group. If it is determined that the OS uses /etc/gshadow too, then that will be written to also.
#**
function add_group()
{
  local group_name
  # Read in the group array if it doesn't exist already
  if ! declare -p group &> /dev/null; then
    local group
    read_file "${LINUX_ACCOUNTS_GROUP_FILE}" group
  fi

  # The second test is for OS's like clearlinux which contain no user/group files
  # until after an additional user/group is created.
  if [ -e "${LINUX_ACCOUNTS_GSHADOW_FILE}" ] || ( [ ! -e "${LINUX_ACCOUNTS_GROUP_FILE}" ] && getent gshadow &> /dev/null ); then
    # Read in the gshadow array if it doesn't exist already
    if ! declare -p gshadow &> /dev/null; then
      local gshadow
      read_file "${LINUX_ACCOUNTS_GSHADOW_FILE}" gshadow
    fi

    # Create a new group and, save group name into group_name
    add_to_group "${1}" "${2}" 'x'

    # Add gshadow entry
    add_to_gshadow ${group_name} '!'
  else
    # Just add a group
    add_to_group "${1}" "${2}" 'x'
  fi

  if [ "${LINUX_ACCOUNTS_AUTOSAVE-1}" == "1" ]; then
    write_group_data
  fi
}

#**
# .. function:: read_group_data
#
# :Output: * group - Array of groups
#          * gshadow - Array of gshadow entries. Undefined if gshadow does not exist
#
# Helper function to read group/gshadow
#**
function read_group_data()
{
  read_file "${LINUX_ACCOUNTS_GROUP_FILE}" group
  read_file "${LINUX_ACCOUNTS_GSHADOW_FILE}" gshadow
}

#**
# .. function:: write_group_data
#
# :Parameters: * group - Array of groups
#              * gshadow - Array of gshadow entries. If undefined, gshadow is not written
#
# Helper function to write group/gshadow
#**
function write_group_data()
{
  write_file "${LINUX_ACCOUNTS_GROUP_FILE}" ${group[@]+"${group[@]}"}
  if declare -p gshadow &> /dev/null; then
    write_file "${LINUX_ACCOUNTS_GSHADOW_FILE}" ${gshadow[@]+"${gshadow[@]}"}
  fi
}

#**
# .. function:: add_to_group
#
# :Arguments: * ``$1`` - Group name
#             * ``$2`` - GID
#             * [``$3``] - Encrypted password. Defaults to "x" (disabled)
# :Parameters: * group - List of group lines
#              * [users] - List of users to add to the group
#              * [suffix] - Suffix to add to group_name if there is a name clash. For internal use
# :Output: group_name - caches the group name used
#
# Adds entry to group array
#
# .. note::
#   Works on Debian, CentOS, Alpine, etc... Only odd Linuxes with more than 4 columns in /etc/group will fail.
#**
function add_to_group()
{
  local IFS
  group_name="${1}${suffix-}"

  local group_info
  local i

  for i in "${!group[@]}"; do
    IFS=:
    # Group Name[0], password[1], GID[2], comma separates user list[3]
    group_info=(${group[i]})

    # If name already existed
    if [ "${group_info[0]}" == "${group_name}" ]; then
      # And if the id is the same
      if [ "${group_info[2]}" == "${2}" ]; then
        # If password hash was set, make sure you use it!
        if [ -n "${3+set}" ]; then
          group_info[1]="${3}"
        fi

        # If there are no users, this field will have been removed; unremove it
        if [ "${#group_info[@]}" == "3" ]; then
          group_info[3]=
        fi

        # If users are specified, just modify the users list
        if [ -n "${users+set}" ]; then
          IFS=,
          local group_users
          group_users=(${group_info[3]} ${users[@]+"${users[@]}"})
          group_info[3]="${group_users[*]+"${group_users[*]}"}"
          IFS=:
        fi
        group[i]="${group_info[*]}"
        return 0
      fi
      # Try again with a different suffix
      suffix=$((${suffix-0}+1)) add_to_group "${@}"
      return 0
    fi
  done
  # Add as first entry. Many OSes have a special group in the last spot, +:::
  # It's common to add the entry as the second to last, but first is easier
  group=("${group_name}:${3-x}:${2}:${users-}"
         ${group[@]+"${group[@]}"} )
}

#**
# .. function:: add_to_gshadow
#
# :Arguments: * ``$1`` - Group name
#             * [``$2``] - Encrypted password (! or * for none). Default: ``!``
# :Parameters: * [admins] - List of admins to add to the entry
#              * [users] - List of users to add to the entry
#
# Adds entry to gshadow array
#**
function add_to_gshadow()
{
  local IFS=:
  local group_info
  local i

  local new_gshadow="${1}:${2-!}:${admins-}:${users-}"

  for i in "${!gshadow[@]}"; do
    # Group Name[0], password[1], admins[2], members[3]
    group_info=(${gshadow[i]})

    # If name already exists, replace it
    if [ "${group_info[0]}" == "${1}" ]; then
      gshadow[i]="${new_gshadow}"
      return 0
    fi
  done
  gshadow=("${new_gshadow}"
           ${gshadow[@]+"${gshadow[@]}"} )
}
