#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/pipenv_functions

#**
# .. default-domain:: bash
#
# ================
# Pipenv Functions
# ================
#
# .. file:: pipenv_functions.bsh
#
# Functions for working with pipenv files
#**

#**
# .. function:: get_pipfile_hash
#
# Print the hash of a Pipfile
#
# Reproduces what pipenv internally calculates for the hash of a Pipfile.
#
# :Arguments: ``$1`` - Pipfile filename
# :Output: ``stdout`` - hex sha256 sum of Pipfile data
# :Uses: Requires  ``python`` with ``pipenv``
#
# .. note::
#
#     Need to be run in the python environment (virtualenv)
#
# .. seealso::
#
#   :func:`get_pipfile_lock_hash`
#**

function get_pipfile_hash()
{
  python -c "if True:
    import pipenv.patched.pipfile.api as pipfile
    p = pipfile.Pipfile.load('${1}')
    print(p.hash)"
}

#**
# .. function:: get_pipfile_lock_hash
#
# Print the hash stored in a Pipfile.lock
#
# :Arguments: ``$1`` - Pipfile.lock filename
# :Output: ``stdout`` - hex sha256 sum of Pipfile data
# :Uses: Requires ``python``
#
# .. seealso::
#
#   :func:`get_pipfile_hash`
#**

function get_pipfile_lock_hash()
{
  python -c "if True:
    import json
    f = json.load(open('${1}', 'r'))
    print(f['_meta']['hash']['sha256'])"
}

#**
# .. function:: get_pipenv_virtualenv_location
#
# Print the virtualenv location for a given Pipefile
#
# :Arguments: ``$1`` - pipenv project root directory (directory and Pipfile do not need to exist)
# :Output: ``stdout`` - Location where the virtualenv would be.
# :Uses: Requires ``python``
#**
function get_pipenv_virtualenv_location()
{
  python -c "if True:
    import pipenv.project
    p=pipenv.project.Project()
    p._pipfile_location='${1}/Pipfile'
    print(p.get_location_for_virtualenv())"
}
