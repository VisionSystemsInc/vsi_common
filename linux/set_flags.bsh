#!/usr/bin/false

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/set_flags

#**
# =========
# Set Flags
# =========
#
# .. default-domain:: bash
#
# .. file:: set_flags.bsh
#
# Functions to make settings/clearing ``bash`` flags easy
#
# Sometimes a flag needs to be set locally for a piece of code, and should be reset if and only if it wasn't set before. These functions do remember the original state so that it can be reset with a simple call
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   set_flag u
#   # <code here>
#   reset_flag u
#
#   set_flag e
#   unset_flag E
#   set_flags xv
#   # <code here>
#   reset_flags
#
# .. seealso::
#   :func:`set_flag` :func:`unset_flag` :func:`reset_flag` :func:`set_flags` :func:`unset_flags` :func:`reset_flags` :func:`set_optflag` :func:`unset_optflag` :func:`reset_optflag` :func:`set_optflags` :func:`unset_optflags` :func:`reset_optflags` :func:`set_oflag` :func:`unset_oflag` :func:`reset_oflag` :func:`set_oflags` :func:`unset_oflags` :func:`reset_oflags`
#**

#            _                         _
#   ___  ___| |_   __   _____ _ __ ___(_) ___  _ __
#  / __|/ _ \ __|  \ \ / / _ \ '__/ __| |/ _ \| '_ \
#  \__ \  __/ |_    \ V /  __/ |  \__ \ | (_) | | | |
#  |___/\___|\__|    \_/ \___|_|  |___/_|\___/|_| |_|

#**
# .. function:: _save_flag
#
# :Arguments: ``$1`` - Single letter flag to save
# :Output: Stores original state in ``VSI_COMMON_SET_FLAG_<flag>``.
#
# Saves the previous state of a flag
#
# .. note::
#   The original state is smart enough to not be overridden by multiple calls to :func:`set_flag`/:func:`unset_flag`. The original state means the state before ALL :func:`set_flag` and :func:`unset_flags` were made. And is remembered until :func:`reset_flag` is called.
#**
function _save_flag()
{
  local flag="VSI_COMMON_SET_FLAG_${1}"

  if [ "${!flag+set}" != "set" ]; then
    if [[ ${-} =~ ${1} ]]; then
      read "${flag}" <<< 1
    else
      read "${flag}" <<< 0
    fi
  fi
}

#**
# .. function:: set_flag
#
# :Arguments: ``$1`` - Single letter flag to set
# :Output: Stores original state in ``VSI_COMMON_SET_FLAG_<flag>``
#
# Turns on a ``bash`` options, remember the previous state
#
# .. note::
#   The original state is smart enough to not be overridden by multiple calls to :func:`set_flag`/:func:`unset_flag`. The original state means the state before ALL :func:`set_flag` and unset_flag`s were made. And is remembered until :func:`reset_flag` is called.
#
# .. rubric:: Bugs
#
# Doesn't support o flag. The only options that are not duplicated are: vi, emacs, history, pipefail, and posix. Only pipefail and posix would be of interest, and are stored in SHELLOPTS.
#**
function set_flag()
{
  _save_flag "$1"
  set "-$1"
}

#**
# .. function:: unset_flag
#
# Same as :func:`set_flag`, but unsets the flag
#**
function unset_flag()
{
  _save_flag "$1"
  set "+$1"
}

#**
# .. function:: reset_flag
#
# Resets the flag to the previous state
#
# Sets (or unsets) the flag to the state before the very first call to :func:`set_flag`/:func:`unset_flag`. Also clears the variable ``VSI_COMMON_SET_FLAG_<flag>``
#**
function reset_flag()
{
  local flag="VSI_COMMON_SET_FLAG_$1"
  if [ "${!flag+set}" == "set" ]; then
    if [ "${!flag}" == "1" ]; then
      set "-${1}"
    else
      set "+${1}"
    fi
    unset "${flag}"
  fi
}

#**
# .. function:: set_flags
#
# :Arguments: ``$1`` - Multiple letters allowed
#
# Same as :func:`set_flag`, but sets multiple flags at once
#**
function set_flags()
{
  local i
  for (( i=0; i<${#1}; i++ )); do
    set_flag "${1:$i:1}"
  done
}

#**
# .. function:: unset_flags
#
# :Arguments: ``$1`` - Multiple letters allowed
#
# Same as :func:`unset_flag`, but unsets multiple flags at once
#**
function unset_flags()
{
  local i
  for (( i=0; i<${#1}; i++ )); do
    unset_flag "${1:$i:1}"
  done
}

#**
# .. function:: reset_flags
#
# :Arguments: ``$1`` - Multiple letters allowed
#
# Same as :func:`reset_flag`, but resets multiple flags at once
#
# .. note::
#   If no arguments are given, all flags are reset
#**
function reset_flags()
{
  local flag
  local i

  if (( $# )); then
    for (( i=0; i<${#1}; i++ )); do
      reset_flag "${1:$i:1}"
    done
  else
    for flag in $(\compgen -A variable | \grep ^VSI_COMMON_SET_FLAG_); do
      reset_flag "${flag#VSI_COMMON_SET_FLAG_}"
    done
  fi
}

#       _                 _                         _
#   ___| |__   ___  _ __ | |_   __   _____ _ __ ___(_) ___  _ __
#  / __| '_ \ / _ \| '_ \| __|  \ \ / / _ \ '__/ __| |/ _ \| '_ \
#  \__ \ | | | (_) | |_) | |_    \ V /  __/ |  \__ \ | (_) | | | |
#  |___/_| |_|\___/| .__/ \__|    \_/ \___|_|  |___/_|\___/|_| |_|
#                  |_|

#**
# .. function:: _save_optflag
#
# :Output: Stores original state in ``VSI_COMMON_SET_OPTFLAG_<flag>``.
#
# shopt version of :func:`_save_flag`
#**
function _save_optflag()
{
  local flag="VSI_COMMON_SET_OPTFLAG_${1}"

  if [ "${!flag+set}" != "set" ]; then
    if shopt -q "${1}"; then
      read "${flag}" <<< 1
    else
      read "${flag}" <<< 0
    fi
  fi
}

#**
# .. function:: set_optflag
#
# shopt version of :func:`set_flag`
#**
function set_optflag()
{
  _save_optflag "$1"
  shopt -s "$1"
}

#**
# .. function:: unset_optflag
#
# shopt version of :func:`unset_flag`
#**
function unset_optflag()
{
  _save_optflag "$1"
  shopt -u "$1"
}

#**
# .. function:: reset_optflag
#
# shopt version of :func:`reset_flag`
#**
function reset_optflag()
{
  local flag="VSI_COMMON_SET_OPTFLAG_$1"
  if [ "${!flag+set}" == "set" ]; then
    if [ "${!flag}" == "1" ]; then
      shopt -s "${1}"
    else
      shopt -u "${1}"
    fi
    unset "${flag}"
  fi
}

#**
# .. function:: set_optflags
#
# :Arguments: ``$1[...]`` - Multiple arguments allowed
#
# Same as :func:`set_optflag`, but set multiple opt flags at once
#**
function set_optflags()
{
  local i
  for i in "${@}"; do
    set_optflag "${i}"
  done
}

#**
# .. function:: unset_optflags
#
# :Arguments: ``$1[...]`` - Multiple arguments allowed
#
# Same as :func:`unset_optflag`, but unsets multiple opt flags at once
#**
function unset_optflags()
{
  local i
  for i in "${@}"; do
    unset_optflag "${i}"
  done
}

#**
# .. function:: reset_optflags
#
# :Arguments: ``$1[...]`` - Multiple arguments allowed
#
# Same as :func:`reset_optflag`, but unsets multiple opt flags at once
#
# .. note::
#   If no arguments are given, all opt flags are reset
#**
function reset_optflags()
{
  local flag
  local i

  if (( $# )); then
    for i in "${@}"; do
      reset_optflag "${i}"
    done
  else
    for flag in $(\compgen -A variable | \grep ^VSI_COMMON_SET_OPTFLAG_); do
      reset_optflag "${flag#VSI_COMMON_SET_OPTFLAG_}"
    done
  fi
}

#            _                                      _
#   ___  ___| |_         ___    __   _____ _ __ ___(_) ___  _ __
#  / __|/ _ \ __|  ___  / _ \   \ \ / / _ \ '__/ __| |/ _ \| '_ \
#  \__ \  __/ |_  |___|| (_) |   \ V /  __/ |  \__ \ | (_) | | | |
#  |___/\___|\__|       \___/     \_/ \___|_|  |___/_|\___/|_| |_|

#**
# .. function:: _save_oflag
#
# :Output: Stores original state in ``VSI_COMMON_SET_OFLAG_<flag>``.
#
# set -o version of :func:`_save_flag`
#
# .. rubric:: Bugs
#
# Since so many of the set flags overlap with "set -o" flags, these two features should not be mixed together and used simultaneously. The only exceptions are the "set -o" flags with no equivalent single letter representation, mainly pipefail and posix
#**
function _save_oflag()
{
  local flag="VSI_COMMON_SET_OFLAG_${1}"

  if [ "${!flag+set}" != "set" ]; then
    # local pattern='^(.*:)?'"${1}"'(:.*)?$'
    if [[ ${SHELLOPTS} =~ (^|:)${1}(:|$) ]]; then
      read "${flag}" <<< 1
    else
      read "${flag}" <<< 0
    fi
  fi
}

#**
# .. function:: set_oflag
#
# set -o version of :func:`set_flag`
#**
function set_oflag()
{
  _save_oflag "$1"
  set -o "$1"
}

#**
# .. function:: unset_oflag
#
# set -o version of :func:`unset_flag`
#**
function unset_oflag()
{
  _save_oflag "$1"
  set +o "$1"
}

#**
# .. function:: reset_oflag
#
# set -o version of :func:`reset_flag`
#
# .. rubric:: Bugs
#
# Resetting certain flags does not return everything to status quo. For example, setting vi mode, and then resetting does not restore emacs mode. This is the only known bug, and is not important from a scripting point of view.
#**
function reset_oflag()
{
  local flag="VSI_COMMON_SET_OFLAG_$1"
  if [ "${!flag+set}" == "set" ]; then
    if [ "${!flag}" == "1" ]; then
      set -o "$1"
    else
      set +o "$1"
    fi
    unset "${flag}"
  fi
}

#**
# .. function:: set_oflags
#
# :Arguments: ``$1[...]`` - Multiple arguments allowed
#
# Same as :func:`set_oflag`, but sets multiple opt flags at once
#**
function set_oflags()
{
  local i
  for i in "${@}"; do
    set_oflag "${i}"
  done
}

#**
# .. function:: unset_oflags
#
# Same as :func:`unset_oflag`, but unsets multiple opt flags at once
#**
function unset_oflags()
{
  local i
  for i in "${@}"; do
    unset_oflag "${i}"
  done
}

#**
# .. function:: reset_oflags
#
# Same as :func:`reset_oflag`, but reset multiple flags at once
#
# .. note::
#   If no arguments are given, all opt flags are reset
#**
function reset_oflags()
{
  local flag
  local i

  if (( $# )); then
    for i in "${@}"; do
      reset_oflag "${i}"
    done
  else
    for flag in $(\compgen -A variable | \grep ^VSI_COMMON_SET_OFLAG_); do
      reset_oflag "${flag#VSI_COMMON_SET_OFLAG_}"
    done
  fi
}