#!/usr/bin/env false

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

JUST_DEFAULTIFY_FUNCTIONS+=(git_defaultify)
JUST_HELP_FILES+=("${BASH_SOURCE[0]}")

#*# just/plugins/just_git_functions

#**
# .. default-domain:: bash
#
# ======================
# J.U.S.T. Git Functions
# ======================
#
# .. file:: just_git_functions.bsh
#
# git plugin for just
#**

source "${VSI_COMMON_DIR}/linux/ask_question"
source "${VSI_COMMON_DIR}/linux/colors.bsh"


#**
# .. envvar:: GIT
#
# Name/path of git executable
#
# Instead of hard-coding "git" everywhere, use the variable :envvar:`GIT` so that when the need comes, it is easier to switch which executable gets called. Set to empty string to have any calls to git skipped.
#
# All :func:`git_defaultify` targets will be skipped if the value of:envvar:`GIT` is not found or empty.
#**

: ${GIT=git}

#**
# .. function:: submodule-helper-list
#
# "git submodule--helper list" bash port
#
# Reproduces what git submodule-helper-list does. Not all versions of git
# are modern enough to have this feature. Currently, the first three columns
# of information and --prefix are not reproduced because they are not needed.
#
# :Arguments: [``$1...``] - Glob expressions to be matched, just like '`git-submodule--helper`'
#
# :Output: ``submodule_names`` - array of submodules names (matched if filters supplied)
#
#          ``submodule_paths`` - corresponding array of submodule paths
#**

function submodule-helper-list()
{
  # Get submodule data
  local submodule_data="$(git config -l -f .gitmodules | sed -nE 's|^submodule.(.*).path=(.*)|\1'$'\t''\2|p')"
  local IFS=$'\n'
  # Parse submodule data
# Git modules can't have newlines in the "name", but the path could, and also both can have tabs and spaces
# [submodule "w	t  f"]
# 	path = w\tt\n  f
# 	url = https://github.com/visionsystemsinc/vsi_common.git
# git config output :-\
# submodule.w     t  f.path=w     t
#   f
# submodule.w     t  f.url=https://github.com/visionsystemsinc/vsi_common.git

  local noglob=0
  if [[ ${SHELLOPTS} =~ (^|:)noglob(:|$) ]]; then
    noglob=1
  fi
  set -o noglob
  submodule_names=($(awk '{print $1}' <<< "${submodule_data}" ))
  submodule_paths=($(awk '{print $2}' <<< "${submodule_data}" ))
  if [ "${noglob}" = "0" ]; then
    set +o noglob
  fi

  # If there are any argument, filter out unmatched submodules
  if (( $# )); then
    local i
    local j
    local git_root_dir="$(git rev-parse --show-toplevel)"
    # Store array size, since the length changes in the loop
    local submodules=${#submodule_names[@]}
    local pattern

    # Loop through submodules
    for ((i=0; i<$submodules; i++)); do
      # loop through all arguments
      for j in "${@}"; do
        # Check to see if the pattern matches. The two slashes on the LHS are
        # to match the RHS /*/. /*/ allows additional pattern matching only for
        # full subdirectories names, and nothing else, since that is how
        # git-submodule--helper already works.
        if [[ ${submodule_paths[$i]}// == ${j}/*/ ]]; then
          continue 2
        fi
      done
      # Remove them if the continue 2 doesn't cause a skip
      unset submodule_names[$i]
      unset submodule_paths[$i]
    done

    if (( ${#submodule_names[@]} )); then # If not empty
      # Reset the arrays, so that they are contiguous
      submodule_names=("${submodule_names[@]}")
      submodule_paths=("${submodule_paths[@]}")
    fi
  fi
}

#**
# .. function:: _checkout_git_submodule
#
# Helper function for :func:`safe_git_submodule_update`
#
# :Arguments: ``$1`` - Submodule name
#
#             ``$2`` - Submodule path (relative)
#
#             ``$3`` - Message to print out if submodule update failed
#
# :Output: ``presskey`` - set variable presskey on failure
#**

function _checkout_git_submodule()
{
  popd > /dev/null

  if ! git -c foo=bar version &> /dev/null; then
    # This is older than 1.8, so it doesn't support -c OR submodule.${1}.update
    echo "${YELLOW}Warning:${NC} your version of git is too old. Doing normal submodule update" >&2
    if git submodule update "${2}"; then
      if [ -f "${2}/.gitmodules" ]; then
        pushd "${2}" &> /dev/null
        show_summary_message=0 safe_git_submodule_update
        popd &> /dev/null
      fi
    else
      read -n1 -r -p "${3} Any key to continue." presskey
      echo
    fi
  else
    if PATH="${VSI_COMMON_DIR}/linux:${PATH}" git -c submodule.${1}.update='!bash git_safe_update' submodule update "${2}"; then
      if [ -f "${2}/.gitmodules" ]; then
        pushd "${2}" &> /dev/null
        show_summary_message=0 safe_git_submodule_update
        popd &> /dev/null
      fi
    else
      read -n1 -r -p "${3} Any key to continue." presskey
      echo
    fi
  fi
}

#**
# .. function:: safe_git_submodule_update
#
# Update git submodules in a smart way
#
# git submodules are already confusing enough to work with. When a project
# gets big and complicated, and add to that the potential of losing changes
# that have already been committed, the default behavior of submodules is
# enough to have anyone committed!
#
# A git submodule update should update a submodule *if and only if* it is a
# **ff-only merge**, and the submodule is clean (enough). Also, non-conflicting
# unstaged changes are also ok too.
#
# .. rubric:: Bugs
#
# If the committer of the main repository changes submodules in a non-fast
# forward way, this would confuse :func:`safe_git_submodule_update` because that isn't
# very smart.
# Update: It will at least tell you which repositories are behind now.
#
# :Arguments: [``$1..``] - Specify submodule paths to update. None defaults to all
#
# :Parameters: ``$show_summary_message`` - For internal use. Disables error summary messages
#**

function safe_git_submodule_update()
{
  local i
  local show_summary_message=${show_summary_message-1}
  local presskey
  local askcontinue

  pushd "$(pwd)" > /dev/null
    local submodule_names
    local submodule_paths
    local submodule_url
    # Call "close enough" bash equivalent to git submodule--helper list/name
    submodule-helper-list ${@+"${@}"}
    for ((i=0; i<${#submodule_paths[@]}; i++)); do
      name="${submodule_names[$i]}"
      sm_path="${submodule_paths[$i]}"

      if ! git config submodule."$name".url; then
        if [ "$(git ls-tree HEAD:"$(dirname "${sm_path}")" "$(basename "${sm_path}")" | awk '{print $2}')" == "commit" ]; then
          echo "Uninitialized submodule $name...Initializing"
          git submodule init $sm_path
        else
          # There are cases where novices remove a submodule and forget to
          # remove it from the .gitmodules files. In this case, it will show up
          # in submodule-helper-list but shouldn't be checked out. Either it
          # will have no entry from ls-tree (empty), or it will not be a commit
          # (eg tree).
          echo "Skipping phantom submodule $name"
          continue
        fi
      fi
      submodule_url="$(git config submodule."$name".url)"
      if [ -z "${submodule_url}" ] || ( [ ! -d "$sm_path"/.git ] && [ ! -f "$sm_path"/.git ] ); then
        if ! [ "$(git config -f .gitmodules submodule.${name}.update)" == "none" ]; then
          echo "Submodule $name is not checked out! Initializing and updating..."
          git submodule update --init "${sm_path}"
        fi
        continue
      fi
      pushd "${sm_path}" > /dev/null
        # This is my equivalent to "git submodule sync". It uses a specific remote,
        # that it not of the defaults, to handle issue #186
        git remote add "${JUST_GIT_UPSTREAM-just_upstream}" "${submodule_url}" &> /dev/null || \
          git remote set-url "${JUST_GIT_UPSTREAM-just_upstream}" "${submodule_url}"

        if ! git diff --no-ext-diff --quiet; then
          echo "Uncommited tracked files in ${sm_path}"
          _checkout_git_submodule ${name} "${sm_path}" \
            "You need to add or discard (checkout) changes and resolve any conflicts in the submodule: ${name}"
          continue
        fi
        if ! git diff --no-ext-diff --cached --quiet; then
          echo "Staged tracked files in ${sm_path}"
          read -n1 -r -p "You need to commit/reset files and resolve any conflicts in the submodule: ${name}" presskey
          popd > /dev/null
          continue
        fi
        # if git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' >/dev/null 2>/dev/null; then Removed the -- to be compatible with slightly older git versions. Should work on newer
        if git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch ':/*' >/dev/null 2>/dev/null; then
          echo "Untracked files in ${sm_path}"
          _checkout_git_submodule ${name} "${sm_path}" \
            "You need to resolve any conflicts in the submodule: ${name}."
          continue
        fi
        _checkout_git_submodule ${name} "${sm_path}" \
          "You need to resolve any conflicts in the submodule: ${name}."
    done
  popd > /dev/null

  if [ "${show_summary_message-0}" == "1" ]; then
    local IFS=$'\n'
    local message_printed=0
    for i in $(git submodule status --recursive | \grep ^+ || :); do
      i="${i% *}"
      i="${i#* }"
      echo
      echo "******************************************************************"
      echo "Repository ${BOLD}${RED}${i}${NC} ${YELLOW}does not appear to be on the expected SHA${NC}. If you have changes that"
      echo "you want to track in the parent module run:"
      echo "  'git add $i' followed by 'git commit', or if you want to reset the"
      echo "submodule to the expected SHA run:"
      echo "  'git submodule update $i'"
      echo "However, ensure that any commits you may have made are tracked."
      message_printed=1
    done

    if [ "${presskey+set}" == "set" ]; then
      echo
      echo "*************************** WARNING ******************************"
      echo "Tried to safely update submodules, however ${RED}something went wrong${NC}."
      echo "After resolving the problems, you can try updating the main repo"
      echo "again. If this is not working for you, you can fall back to"
      echo "  'git submodule update --init --recursive'"
      echo "However, ensure that any commits you may have made to submodules are tracked."
      message_printed=1
    fi

    if [ "${message_printed}" = "1" ]; then
      echo
      ask_question "Continue without fixing?" askcontinue n

      if [ "${askcontinue}" = "0" ]; then
        return 1
      fi
    fi
  fi
}

#**
# .. function:: git_reattach_heads
#
# Reattach detached heads in submodules.
#
# Search for all submodules recursively in the current working directory for repos with detached heads. Looks through the branch heads for a name (in the form of refs/heads/branch_name). If a match is found, only the first one is used. If no match found, empty string, then branch is left detached.
#**
git_reattach_heads()
{

  # if detached, get sha, and first branch name, and then reattach
  git submodule foreach --recursive '
  if [ "$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)" = "HEAD" ]; then
    current_sha="$(git rev-parse HEAD)"
    branch_name="$(git show-ref --heads | sed -En "/^${current_sha} .*/{ s|.*/(.*)|\1|; p; q}")"
    if [ "${branch_name}" != "" ]; then
      git checkout "${branch_name}"
    fi
  fi'
}

#**
# .. function:: git_defaultify
#
# Git plugin for just
#**

function git_defaultify()
{
  arg=$1
  shift 1
  case $arg in
    #**
    # .. command:: git_submodule-update
    #
    # :Parameters: - ``JUST_GIT_UPSTREAM`` - The submodule remote name used. When :cmd:`git_submodule-update` syncs, it will this remote. Default: ``just_upstream``
    #              - ``JUST_GIT_USE_REMOTE`` - The submodule remote name used for fetching the new commits. Useful if you have your own person set of remotes you want to use. Default: ``${JUST_GIT_UPSTREAM}``
    #
    # Recursively updates all submodules, in a ff-only manner. Also reattaches heads if possible.
    #
    # Sets ``JUST_GIT_SUBMODULE_SYNCED`` to ``1`` on the first run, so that subsequent calls are skipped. If you have reason to call it multiple times, you can reset ``JUST_GIT_SUBMODULE_SYNCED``.
    #**
    git_submodule-update) # Safe git submodule update which is careful to not \
                          # remove commits by accident. Only updates submodules \
                          # by going forward in history. Unlike normal git \
                          # submodule update, uses a specific remote \
                          # ${JUST_GIT_UPSTREAM-just_upstream}, and only syncs that \
                          # that one remote. Will update from ${JUST_GIT_USE_REMOTE-${JUST_GIT_UPSTREAM}}, \
                          # In addition, after sync and update, \
                          # detached heads are reattached if they happen to land \
                          # on a local tracking branch.
      extra_args=$#

      if ! command -v "${GIT}" >& /dev/null; then
        echo "Git not found, skipping submodule sync" >&2
        return 0
      fi

      if [[ ${JUST_GIT_SUBMODULE_SYNCED-} != 1 ]]; then
        echo "Syncing submodules"
        # Run a safe git submodule sync and git submodule update
        safe_git_submodule_update ${@+"${@}"}
        git_reattach_heads
        JUST_GIT_SUBMODULE_SYNCED=1
      else
        echo "Already synced submodules earlier... (JUST_GIT_SUBMODULE_SYNCED=${JUST_GIT_SUBMODULE_SYNCED-})" >&2
      fi
      ;;
    git_make-submodules-relative) # Reset the paths in git submodules to be \
                                  # relative paths rather than absolute paths. \
                                  # This is important for having portable \
                                  # repositories, which is important for \
                                  # mounting into a docker. Will reset git \
                                  # modules to the $(pwd) when you run this, \
                                  # so you should be in the main repo's base \
                                  # directory. Requires: realpath with \
                                  # --relative-to, python or perl.
      if ! command -v "${GIT}" >& /dev/null; then
        echo "Git not found, skipping submodule conversion" >&2
        return 0
      fi

      if realpath --relative-to=/ /tmp &> /dev/null; then
        code='realpath --relative-to=. ${submodule_path}'
      elif command -v python &> /dev/null; then
        code='python -c "import os.path;print(os.path.relpath('"'"'${submodule_path}'"'"', '"'"'.'"'"'))"'
      elif command -v perl &> /dev/null; then
        # Perl is a requirement of git, so this should always work
        code='perl -e "use File::Spec; print File::Spec->abs2rel ('"'"'${submodule_path}'"'"', '"'"'.'"'"');"'
      else
        echo "You must have realpath with --relative-to, python or perl for this to work on your OS" >&2
        exit 1
      fi

      "${GIT}" submodule foreach --recursive bash -c '
      if [ -f .git ]; then
        submodule_path=$(cut -d" " -f2- .git)
        echo "gitdir: $('"${code}"')" > .git
      fi'
      ;;
    *)
      plugin_not_found=1
      ;;
  esac
  return 0
}