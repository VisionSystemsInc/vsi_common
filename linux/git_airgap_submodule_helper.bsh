#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/git_airgap_submodule_helper

#**
# ===========================
# Git Airgap Submodule Helper
# ===========================
#
# .. default-domain:: bash
#
# .. file:: git_airgap_submodule_helper.bsh
#
# This file contains a function to bootstrap ``just`` in a relocated repository.
#
# After (shallow) cloning the air-gapped repository, the submodules must be initialized and re-configured before they can be updated (recursively). This is handled by the ``git_clone-airgap-repo`` ``just`` target. However, this is not possible without the vsi_common submodule, which must first be initialized and updated itself.
#
# This function, :func:`git_airgap_submodule_update`, is appended to ``repo_map.env`` in the ``git_export-repo`` ``just`` target and then orphan committed to the air-gapped repository in the ``git_import-repo`` ``just`` target in :file:`just_git_airgap_repo.bsh`. :func:`git_airgap_submodule_update` follows the same steps as :func:`git_mirror update_submodules`.
#
# In order to call :func:`git_airgap_submodule_update`, repo_map.env must be grabbed out of the orphan commit and then sourced. Obviously, no ``just`` functions can be called yet, so this must be done in the file specified by :envvar:`JUST_SETUP_SCRIPT` (typically called setup.env). For example, the setup.env script, which typically looks like:
#
# .. code-block:: bash
#
#    export JUST_SETUP_SCRIPT="$(basename "${BASH_SOURCE[0]}")"
#    source "$(dirname "${BASH_SOURCE[0]}")/external/vsi_common/env.bsh"
#
# would become:
#
# .. code-block:: bash
#
#    export JUST_SETUP_SCRIPT="$(basename "${BASH_SOURCE[0]}")"
#    if [ ! -f "$(dirname "${BASH_SOURCE[0]}")/external/vsi_common/env.bsh" ]; then
#      echo "'just' could not be loaded. Trying to setup the repository as an"
#      echo "air-gapped repository"
#      # source the contents of repo_map.env (in a bash 3.2 compatible way)
#      source /dev/stdin <<< \
#          "$(git show origin/__just_git_mirror_info_file:repo_map.env 2>/dev/null || :)"
#      if ! declare -Fx git_airgap_submodule_update; then
#        echo "ERROR the vsi_common submodule could not be found!"
#        return 1
#      fi
#      git_airgap_submodule_update external/vsi_common
#    fi
#    source "$(dirname "${BASH_SOURCE[0]}")/external/vsi_common/env.bsh"
#
# After the ``setup.env`` file has been sourced, it is possible to run ``just git clone-airgap-repo`` to recursively initialize and clone the submodules from their air-gapped mirrors
#**
#
# TODO The code to be added to the setup.env should be a git hook
#
# NOTE If vsi_common is a sub-submodule, then this function won't work
# TODO Replace this function with the functionality in the git_clone-airgap-repos
# just target and git_mirror:update_submodules
# RE Simplify by removing (reverting) calls to other vsi_common functionality
# (like findin). But this might also require re-factoring update_submodules to
# iterate over the submodules manually so that we don't need to deal with
# re-sourcing things, etc. as suggested in git_mirror:clone_submodules

#**
# .. function:: git_airgap_submodule_update
#
# After cloning the air-gapped repository, reconfigure and update a submodule
#
# :Arguments: ``$1`` - A path from the ``repos``/``repo_paths`` parameter of the submodule to update
# :Parameters: ``repos`` - An associative array mapping the (relative) path from the root of the project repository to each submodule to the respective URL for each submodule (recursively)
#              ``repo_paths`` - The (relative) path from the root of the project repository to each submodule (recursively)
#              ``repo_urls`` - The respective URL for each submodule (recursively)
#
# .. note::
#
#   Either ``repos`` xor (``repo_paths`` and ``repo_urls``) should be provided
#
# .. rubric:: Bugs
#
# ``$1`` (the submodule path) must be the same as the submodule name
#**
function git_airgap_submodule_update()
( # Use a subshell because of set -eu

  # NOTE Do not use vsi_common functionality in this function! It is saved to
  # repo_map.env and sourced in setup.env

  set -eu # fail fast

  # Strip trailing slash
  local submodule_path="${1%/}"

  # Find submodule in the list
  local repo_url
  if declare -p repos &>/dev/null; then
    repo_url="${repos["${submodule_path}"]}"
    repo_paths="${!repos[@]}" # so the error message works
  else
    local index
    for index in "${!repo_paths[@]}"; do
      if [ "${repo_paths[$index]}" = "${submodule_path}" ]; then
        repo_url="${repo_urls[$index]}"
        break
      fi
    done
  fi
  if [ -z "${repo_url:+set}" ]; then
    echo "ERROR submodule_path, ${submodule_path}, not found in repo_paths:"
    for index in "${!repo_paths[@]}"; do echo "  ${repo_paths[$index]}"; done
    return 1
  fi

  # This follows just:git_mirror:git_clone_main
  git submodule init "${submodule_path}"
  # FIXME This should be using submodule_name
  # RE Don't fix (basically needs get_config_submodule_names). Instead, re-implement
  # this using git_mirror:update_submodules as noted above
  git config "submodule.${submodule_path}.url" "${repo_url}"
  git submodule update "${submodule_path}"
)
