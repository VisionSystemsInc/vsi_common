#!/usr/bin/env false bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/string_tools.bsh"
source "${VSI_COMMON_DIR}/linux/elements.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/signal_tools

#**
# ============
# String Tools
# ============
#
# .. default-domain:: bash
#
# .. file:: signal_tools.bsh
#
# Function to help handle signals and traps in bash
#
#**

#**
# .. function:: set_bashpid
#
# Sets the ``BASHPID`` environment variable in bash versions older than 4, for compatibility in bash 3.2
#**
function set_bashpid()
{
  local f
  if [ "${bash_feature_bashpid}" = "1" ]; then
    for f in "${FUNCNAME[@]}"; do
      # Check if "source/." was called in FUNCNAME; multiple sources only produce one "phantom" fork.
      # A source means we need the grandparent
      if [ "${f}" == "source" ]; then
        if [ -d /proc ]; then
          BASHPID="$(bash -c "sed -${sed_flag_rE} 's|.*\) [^ ]* ([^ ]*) .*|\1|' \"/proc/\${PPID}/stat\"")"
          return
        else
          # Not all ps's support -fp, but this should work on macOS where these is no /proc
          BASHPID="$(bash -c "ps -fp \"\${PPID}\" | awk '(NR>1) {print \$3}'")"
          return
        fi
      fi
    done
    BASHPID=$(bash -c 'echo "${PPID}"')
  fi
}

#**
# .. function:: trap_chain
#
# :Arguments: * ``$1`` - Command to be read and executes when the shell received signal ``$2``
#             * ``$2`` - Same sigspecs that the ``trap`` command accepts.
# :Parameters: * ``TRAP_CHAIN_QUIET`` - Set to ``1`` to silence warnings, if you don't want them. Default: ``0``
# :Outputs: ``_TRAP_CHAIN_{signal name}_LAST_PID`` - the PID last time :func:`trap_chain` was called
#
# Can be called multiple times to chain multiple signal handlers to one signal. Stores list of trap functions in ``_TRAP_CHAIN_{signal name}``.
#
# Handlers are run in the opposite order they are assigned in (FILO).
#
# .. rubric:: Bugs
#
# If :func:`trap_chain` is called inside a subshell on bash 4.2 or newer when the original trap was set using the ``trap`` command instead of :func:`trap_chain`, the traps of the parent are auto inherited in the subshell.  This is due to a change in how the ``trap`` command works, and there is no known automatic work around. If this happens, you'll need to clear the trap in or before the subshell to prevent this. A warning message will be printed out, unless disabled via ``TRAP_CHAIN_QUIET``.
#
# .. note::
#
#    If you are using signal ``ERR``, you must have ``set -E`` set, or else it will not inherit correctly. The same goes for ``DEBUG`` and ``RETURN`` with ``set -T``. This is part of normal ``bash`` behavior, however the same bug mentioned above, can happened if you ``set +E`` or ``set +T`` before creating a subshell, and then re-enabling the same flag before calling :func:`trap_chain`. A different warning is printed out, unless disabled via ``TRAP_CHAIN_QUIET``.
#
#**
function trap_chain()
{
  if [ "${2}" = "ERR" ] && [[ $- != *E* ]]; then
    echo "You must have \"set -E\" set for this to work with signal ${2}" >&2
    return 1
  elif [ "${2}" = "DEBUG" -o "${2}" = "RETURN" ] && [[ $- != *T* ]]; then
    echo "You must have \"set -T\" set for this to work with signal ${2}" >&2
    return 1
  fi

  local last_info="$(trap -p ${2})"
  if [ "${last_info}" = "" ]; then
    # If this is the first signal, no reason to "chain" yet, just do a normal
    # trap

    # Since there was no signal already assigned, the sanitize signal name is
    # not in last_info, so we'll have to make it
    # The trap is wrapped in an extra subshell to fix #242
    last_info="$( (trap '' "${2}"; trap -p "${2}") | { read x ; echo "${x##* }"; })"

    clear_a "_TRAP_CHAIN_${last_info}"
    last_info="_TRAP_CHAIN_${last_info}_LAST_PID"
    set_bashpid

    export -n "${last_info}=${BASHPID}"

    trap "${1}" "${2}"
  else
    # There are multiple ways to specify signals, like USR1=SIGUSR1=10
    # The output of trap -p has normalized this, so this is what we will use
    # for storing the chain variables
    local signal_name="${last_info##* }"
    # Remove signal name from end. I know only this trap name is here
    last_info="${last_info% ${signal_name}}"
    # Remove word "trap"
    last_info="${last_info#trap }"
    # Remove -- which is sometimes there?
    # (based on documentation, it's always there for me)
    last_info="${last_info#-- }"
    # Since the output of trap is quoted, I need to parse one level of quotes
    # out.
    last_info="$(quote_unescape "${last_info}")"

    local last_pid_name="_TRAP_CHAIN_${signal_name}_LAST_PID"
    # Set to -1 for unset, so that we know the initial trap was set without using trap_chain
    local last_pid="${!last_pid_name--1}"

    set_bashpid

    function chainable_signal()
    {
      if [[ ${signal_name} = ERR && $- = *E* ]] || \
        ( [ "${signal_name}" = "DEBUG" -o "${signal_name}" = "RETURN" ] && [[ $- = *T* ]] ) || \
          [ "${last_pid}" = "-1" ] || \
          [ "${last_pid}" = "${BASHPID}" ]; then
        return 0
      fi
      return 1
    }

    if [ "${last_pid}" != "${BASHPID}" ] && ! chainable_signal; then
      clear_a "_TRAP_CHAIN_${signal_name}"
      trap "_trap_unchained ${signal_name}" "${2}"
    fi

    if [ "${last_info}" != "_trap_unchained ${signal_name}" ]; then
          # ERR signals get inherited.
      if chainable_signal; then

        if [ "${bash_behavior_all_traps_display_inherited}" = "0" -a "${TRAP_CHAIN_QUIET-0}" == "0" ]; then
          if [ "${last_pid}" = "-1" ]; then
            echo "Warning: Chaining a(n) \"${signal_name}\" trap that was setup using the" >&2
            echo "\"trap\" command rather than the \"trap_chain\" command on signal \"${signal_name}\"" >&2
          elif [ "${last_pid}" != "${BASHPID}" ]; then
            # This can only happen on the ERR/RETURN/DEBUG signals...
            echo "Warning: Chaining a(n) \"${signal_name}\" trap after starting a new subshell." >&2
            echo "There is a potential of falsely inheriting a parent's trap too." >&2
            echo "If you think this happened, clear it via \"trap ${signal_name}\" in the subshell" >&2
          fi
        fi
        add_elements_a "_TRAP_CHAIN_${signal_name}" "${last_info}"
      # elif [ "${last_pid}" != "${BASHPID}" ]; then
      #   clear_a "_TRAP_CHAIN_${signal_name}"
      fi

      trap "_trap_unchained ${signal_name}" "${2}"
    fi
    add_elements_a "_TRAP_CHAIN_${signal_name}" "${1}"
    export -n "${last_pid_name}=${BASHPID}"
  fi
}

#**
# .. function:: exit_chain
#
# In case there are multiple functions being chained together for a trap, you might not want to exit until after all the traps have a chance to run. In order to accomplish this, use :func:`exit_chain`. If the trap is not part of a chain, ``exit`` is called immediately. If the trap is part of a chain, ``exit`` is called after the chain is complete
#
# :Arguments: * ``[$1]`` - The exit code used when ``exit`` is called
#
# .. note::
#
#    This is not designed to work if the function is called in a subshell; this includes ``function name()( ... )`` subshell functions.
#**
function exit_chain()
{
  local rv=${1-$?}
  if [ "${trap_chain_active-}" = "0" ]; then
    _trap_unchained_exit_after_trap=$rv
  else
    exit "${rv}"
  fi
}

function _trap_unchained()
{
  local chain_array="_TRAP_CHAIN_${1}[@]"
  local i="$(array_length "_TRAP_CHAIN_${1}")"
  local x
  local _trap_unchained_exit_after_trap

  #**
  # .. var:: trap_chain_active
  #
  # When a :func:`trap_chain` trap is triggered, a single trap will be called directly, while a chain of multiple traps will be using ``_trap_unchained``. Functions like :func:`exit_chain` will change how they work depending on whether ``_trap_unchained`` is used or not. This variable stores that state.
  #
  # :Value: * ``0`` - ``_trap_unchained`` is being used to call the chain
  #         * *Unset* - The trap function is being called directly (by ``trap`` or other)
  #**
  local trap_chain_active=0

  for (( i=${i}-1; i>=0; i-- )); do
    # This is SUPPOSED to be arbitrary code execution! So eval is ok
    x="_TRAP_CHAIN_${1}[$i]"
    eval "${!x}"
  done

  if [ -n "${_trap_unchained_exit_after_trap:+set}" ]; then
    exit "${_trap_unchained_exit_after_trap}"
  fi
}

#**
# .. rubric:: Example
#
# The following example handles Ctrl+C, kills (SIGTERM) and normal exit cases. Writing exit handlers in bash is very tricky. Fortunately, little is needed to make it work with :func:`trap_chain` correctly.
#
# The major differences in writing a trap for :func:`trap_chain` are:
#
# * ``trap`` becomes :func:`trap_chain`. Use this to set a trap handler.
# * ``exit`` becomes :func:`exit_chain`. Use this to exit the script from within a trap handler.
#
# The rest of this boiler plate example is handling all the intricacies of bash.
#
# .. code-block:: bash
#
#   function my_trap()
#   {
#     # When exit (which exit_chain calls eventually) is called, the exit code
#     # will get stored in $?, but only for the first line of a function, so
#     # it should first be stored in rv
#     # This is also the case when an error occurs (with "set -e" is enabled)
#     # This will *not* capture an error code for unbound variables on bash 3.2
#     local rv=$?
#
#     # If INT or TERM were already triggered, and EXIT is being triggered after
#     # that, there is no need to run everything a second time, so return rv right
#     # away. Failure to specify rv will result in an exit code of 0
#     if [ "${my_trap_called-}" = "0" ]; then
#       return "${rv}"
#     fi
#
#
#     # This is where the trap handler code goes
#     # <- Do stuff.
#
#
#     # If the TERM signal is being handled, the program does not exit. Ironically,
#     # if the trap wasn't setup in the first place, it would have exited. So we have
#     # to manually call exit. To do this, use exit_chain so that all the TERM
#     # handlers in the chain have a chance to run.
#     if [ "${1-}" = "term" ]; then
#       my_trap_called=0
#       exit_chain 143
#     # The same caveats for TERM are true for the INT signal, generated by
#     # pressing Ctrl+C
#     elif [ "${1-}" = "int" ]; then
#       my_trap_called=0
#       exit_chain 130
#     fi
#
#     # If this is just a normal EXIT call, you'll get here, and you still
#     # need to pass the return value, or else the exit code will always be zero
#     return "${rv}"
#   }
#   # Here is where you connect "my_trap" to EXIT, INT, and TERM handles.
#   # We typically use all three to catch the different ways a program can
#   # end. Handling all three signals increases compatibility on all OSes
#   trap_chain "my_trap exit" EXIT
#   trap_chain "my_trap int"  INT
#   trap_chain "my_trap term" TERM
#**
