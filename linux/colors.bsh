#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/findin"

#*# linux/colors

#**
# ================
# Colors Utilities
# ================
#
# .. default-domain:: bash
#
# .. file:: colors.bsh
#
# Collection of named colors and color functions
#
# By sourcing this file and running color_setup, all the basic colors and styles are made available in a terminal. Additional functions such as FG and BG give access to arbitrary colors by index. Some terminals support up to 256 colors, as :func:`number_colors` indicates.
#
# .. seealso::
#   :func:`color_setup` :func:`FG` :func:`BG` :func:`number_colors`
#
# .. rubric:: Bugs
#
# Having variables with color codes in them can make looking at "set", "declare/typeset", or "bash -xv" very noisy, as colors aren't cleared from line to line in bash
#
# .. note::
#   Per git-sh-prompt/git-prompt.sh: If setting ``PS1`` or ``PROMPT_COMMAND`` you must add \[ and \] around colors to prevent issues with command line editing/browsing/completion!
#**

#**
# .. var:: CSI
#
# The Control Sequence Introducer, ``$'\x1b['`` aka ``$'\e['``
#**
CSI=$'\x1b['

#**
# .. function:: color_setup
#
# Set up variables and functions for colors and styles
# Sets the values for the 8 basic colors (BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, and WHITE), and styles (BOLD, DIM, ITALIC, UNDERLINE, BLINK, OVERLINE, HIDDEN and STRIKETHROUGH) and RESET, RESET_<style name>. In addition, LIGHT_<color>, <color>_BG, LIGHT_<color>_BG, and <color> are all set.
# ``COLOR_NAMES`` is set to an array of 8 basic color names and the array ``COLORS`` is set to the color codes for those 8 colors by default.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   color_setup
#   echo "This is ${RED}red text${RESET}."
#
# .. note::
#   This is automatically called by sourcing :file:`colors.bsh`
#
# .. seealso::
#   :func:`FG` :func:`BG` :func:`number_colors`
#**
function color_setup()
{
  local color

  # The 8 Colors
  COLOR_NAMES=(BLACK RED GREEN YELLOW BLUE MAGENTA CYAN WHITE)
  COLORS=()

  BLACK=0
  RED=1
  GREEN=2
  YELLOW=3
  BLUE=4
  MAGENTA=5
  CYAN=6
  WHITE=7

  local _normal=30
  local _light=90
  local _bg=10
  local _reset=20

  RESET="${CSI}0m"
  NC=${RESET}
  BOLD="${CSI}1m"
  DIM="${CSI}2m"
  ITALIC="${CSI}3m"
  UNDERLINE="${CSI}4m"
  BLINK="${CSI}5m"
  OVERLINE="${CSI}6m"
  REVERSE="${CSI}7m"
  HIDDEN="${CSI}8m"
  STRIKEOUT="${CSI}9m"

  DOUBLE_UNDERLINE="${CSI}21m"
  RESET_BOLD="${CSI}22m"
  RESET_DIM="${CSI}22m"
  RESET_ITALIC="${CSI}23m"
  RESET_UNDERLINE="${CSI}24m"
  RESET_BLINK="${CSI}25m"
  RESET_OVERLINE="${CSI}26m"
  RESET_REVERSE="${CSI}27m"
  RESET_HIDDEN="${CSI}28m"
  RESET_STRIKEOUT="${CSI}29m"

  for color in "${COLOR_NAMES[@]}"; do
    # export -n so that they are global, declare -g doesn't work in bash 3.2
    export -n "LIGHT_${color}=${CSI}$((${_light}+${!color}))m"
    export -n "${color}_BG=${CSI}$((${_normal}+${_bg}+${!color}))m"
    export -n "LIGHT_${color}_BG=${CSI}$((${_bg}+${_light}+${!color}))m"
    export -n "${color}=${CSI}$((${_normal}+${!color}))m"
    COLORS+=(${!color})
  done

  # Minimize the amount of color garbage on set -xv
  local color_fix
  color_fix=${RESET}
}

#**
# .. function:: get_color
#
# :Arguments: ``$1`` - Key value
# :Output: *stdout* - The printable color code
#
# Retrieve a color from the color map
#
# :func:`get_color` acts as a circular dictionary of colors
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   color_setup
#   if (( $(number_colors) < 88 )); then
#     COLORS=("${RED}" "${GREEN}" "${YELLOW}" "${MAGENTA}" "${CYAN}" "${WHITE}")
#   else
#     COLORS=($(FG {9..15} 19 28 38 48 68 94 126 244))
#   fi
#   get_color first; echo "This is the first${RESET} color"
#   get_color second; echo "This is the second${RESET} color"
#   get_color first; echo "This is still the same first${RESET} color"
#
# .. note::
#   The act of calling :func:`get_color` echoes out the color code. So just calling :func:`get_color` will change the terminal color. If this is not desired, redirect stdout to /dev/null
#
#   get_color ness > /dev/null
#
#   The color database is stored in ``COLOR_DB_NAMES`` (keys) and ``COLOR_DB_COLORS`` (values) and pull from the color pool ``COLORS``
#
# .. rubric:: Bugs
#
# The color database can't be updated when executed in a subshell. This only matters the first time a key is used. For example:
#
# .. code-block:: bash
#
#   COLORS=($(FG {9..15} 19 28 38 48 68 94 126 244))
#
#   echo "This will $(get_color something)not${RESET} work"
#   echo "This will $(get_color something2)not${RESET} work"
#   # The same color will appear twice
#
#   get_color something > /dev/null
#   get_color something2 > /dev/null
#   echo "This will $(get_color something)so${RESET} work"
#   echo "This will $(get_color something2)so${RESET} work"
#**
declare -a COLOR_DB_NAMES=()
declare -a COLOR_DB_COLORS=()
_COLOR_INDEX=0

function get_color()
{ #1 - colored_name
  local color_index=$("findin" "${1}" ${COLOR_DB_NAMES[@]+"${COLOR_DB_NAMES[@]}"})
  local this_color

  if [ "${color_index}" == "-1" ]; then
    # Get a color from colors, uses color_index % total_number_of_COLORS
    this_color=${COLORS[$((${_COLOR_INDEX}%${#COLORS[@]}))]}
    _COLOR_INDEX=$((${_COLOR_INDEX}+1)) # Increment counter
    # Store color in database
    COLOR_DB_NAMES+=("${1}")
    COLOR_DB_COLORS+=("${this_color}")
  else
    this_color="${COLOR_DB_COLORS[${color_index}]}"
  fi
  echo -n "${this_color}"
}

#**
# .. function:: FG
#
# :Arguments: ``$1[...]`` - 1 or more color numbers
# :Output: *stdout* - The printable color code(s)
#
# Retrieve foreground color code by index number
#
# 88/256 color support
#**
function FG()
{
  local c
  for c in "${@}"; do
    echo -n "${CSI}38;5;${c}m"
  done
  : ${RESET} # Helps with bash -xv
}

#**
# .. function:: BG
#
# :Arguments: ``$1[...]`` - 1 or more color numbers
# :Output: *stdout* - The printable color code(s)
#
# Retrieve background color code by index number
#
# 88/256 color support
#**
function BG()
{
  local c
  for c in "${@}"; do
    echo -n "${CSI}48;5;${c}m"
  done
  : ${RESET} # Helps with bash -xv
}

#**
# .. function:: FG_24
#
# :Arguments: ``$1`` - Red value from 0 to 255. Default: 0
#             ``$2`` - Green value from 0 to 255. Default: 0
#             ``$3`` - Blue value from 0 to 255. Default: 0
# :Output: *stdout* - The printable color code(s)
#
# Retrieve foreground color code by RGB value
#
# 24-bit color support
#**
function FG_24()
{
  echo -n "${CSI}38;2;${1-0};${2-0};${3-0}m"

  : ${RESET} # Helps with bash -xv
}

#**
# .. function:: BG_24
#
# :Arguments: ``$1`` - Red value from 0 to 255. Default: 0
#             ``$2`` - Green value from 0 to 255. Default: 0
#             ``$3`` - Blue value from 0 to 255. Default: 0
# :Output: *stdout* - The printable color code(s)
#
# Retrieve background color code by RGB value
#
# 24-bit color support
#**
function BG_24()
{
  echo -n "${CSI}48;2;${1-0};${2-0};${3-0}m"

  : ${RESET} # Helps with bash -xv
}

#**
# .. function:: number_colors
#
# :Output: *stdout* - The number of supported colors. Typically 8, 15, 16, 52, 88, or 256
#
# Ask the terminal emulator how many colors it supports
#**
function number_colors()
{
  tput colors
}

#**
# .. function:: color_demo1
#
# Print out matrix of 8 Basic colors and all styles
#
# Useful for determining which features the terminal emulator supports
#**
function color_demo1()
{
  local x
  local y

  echo "Your terminal appears to support $(number_colors) colors"

  echo "8 Foreground Colors"

  printf '%-16sNormal\tBold\tDim\tItalic\tUnderline\tBlink\tOverline\tReverse\tHidden\tStrikeout\n' Color

  for x in "${COLOR_NAMES[@]}"; do
    for y in ${x} LIGHT_${x} ${x}_BG LIGHT_${x}_BG; do
      printf %-16s ${y}
      printf "${!y}${x}${RESET}\t"
      printf "${!y}${BOLD}${x}${RESET}\t"
      printf "${!y}${DIM}${x}${RESET}\t"
      printf "${!y}${ITALIC}${x}${RESET}\t"
      printf "${!y}${UNDERLINE}${x}${RESET}\t\t"
      printf "${!y}${BLINK}${x}${RESET}\t"
      printf "${!y}${OVERLINE}${x}${RESET}\t\t"
      printf "${!y}${REVERSE}${x}${RESET}\t"
      printf "${!y}${HIDDEN}${x}${RESET}\t"
      printf "${!y}${STRIKEOUT}${x}${RESET}\n"
    done
  done
  echo ${RESET}
}

#**
# .. function:: color_demo2
#
# Print out matrix of 256 foreground colors
#
# Useful for determining which features the terminal emulator supports
#**
function color_demo2()
{
  local x

  echo "Foreground colors"
  for x in {0..15}; do
    printf "$(FG "${x}")%-5d" "${x}"
    if (( ${x}%8 == 7 )); then
      echo "${RESET}"
    fi
  done
  for x in {16..231}; do
    printf "$(FG "${x}")%-5d" "${x}"
    if (( ${x}%6 == 3 )); then
      echo "${RESET}"
    fi
  done
  for x in {232..255}; do
    printf "$(FG "${x}")%-5d" "${x}"
    if (( ${x}%8 == 7 )); then
      echo "${RESET}"
    fi
  done
  echo "${RESET}"
}

#**
# .. function:: color_demo3
#
# Print out matrix of 256 background colors
#
# Useful for determining which features the terminal emulator supports
#**
function color_demo3()
{
  local x

  echo "Background colors"
  echo -n "${WHITE}"
  for x in {0..15}; do
    printf "$(BG "${x}")%-5d" "${x}"
    if (( ${x}%8 == 7 )); then
      echo "${RESET}"
    fi
  done
  for x in {16..231}; do
    printf "$(BG "${x}")%-5d" "${x}"
    if (( ${x}%6 == 3 )); then
      echo "${RESET}"
    fi
  done
  for x in {232..255}; do
    printf "$(BG "${x}")%-5d" "${x}"
    if (( ${x}%8 == 7 )); then
      echo "${RESET}"
    fi
  done
  echo "${RESET}"
}

function color_demo4()
{
  local r
  local g
  local b
  local x
  local xs

  echo "24 bit foreground colors"
  echo -n "${WHITE}"
  for x in 0 {3..255..4}; do
    printf "$(FG_24 "${x}" 0 0)*"
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(FG_24 0 "${x}" 0)*"
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(FG_24 0 0 "${x}")*"
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(FG_24 "${x}" "${x}" 0)*"
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(FG_24 "${x}" 0 "${x}")*"
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(FG_24 0 "${x}" "${x}")*"
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(FG_24 "${x}" "${x}" "${x}")*"
  done
  echo "${RESET}"
}

function color_demo5()
{
  local r
  local g
  local b
  local x
  local xs

  echo "24 bit background colors"
  echo -n "${WHITE}"
  for x in 0 {3..255..4}; do
    printf "$(BG_24 "${x}" 0 0) "
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(BG_24 0 "${x}" 0) "
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(BG_24 0 0 "${x}") "
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(BG_24 "${x}" "${x}" 0) "
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(BG_24 "${x}" 0 "${x}") "
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(BG_24 0 "${x}" "${x}") "
  done
  echo "${RESET}"
  for x in 0 {3..255..4}; do
    printf "$(BG_24 "${x}" "${x}" "${x}") "
  done
  echo "${RESET}"
}

function color_demo6()
{
  local r
  local g
  local b
  local x
  local xs

  echo "24 bit background colors"
  echo -n "${WHITE}"
  for y in 0 {11..255..12}; do
    for x in 0 {3..255..4}; do
      printf "$(BG_24 $((255-x)) "${y}" "${x}") "
    done
    echo "${RESET}"
  done
}

color_setup

COLORZ_Z=("${RESET}")
# Attempt to reset the color at the end of any possible COLOR variables. This is
# particularly useful for set -xv and set/declare listings
