#!/usr/bin/env bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/findin"
source "${VSI_COMMON_DIR}/linux/string_tools.bsh"
source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/print_command

#**
# =============
# Print Command
# =============
#
# .. default-domain:: bash
#
# .. file:: print_command
#
# :Arguments: ``$1``... - List of command + arguments to be echoed
# :Output: *stdout* - A quote escaped version of the command + arguments, ready for ``eval``
#
# Bash CLI version of :func:`print_command`
#**

#**
# .. function:: print_command
#
# :Arguments: ``$1``... - List of command + arguments to be echoed
# :Output: *stdout* - A quote escaped version of the command + arguments, ready for ``eval``
# :Uses: :func:`string_tools.bsh quote_escape`
#
# Accurately echoes out a properly escaped single string representation of a command + arguments.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   print_command this is a t\ e\ \ s\'\"t
#
#   # Results in
#   this is a 't e  s'"'"'"t'
#
#   # Typical usage
#   eval "$(print_command "${stuff[@]}")"
#   or
#   bash -c "$(print_command "${stuff[@]}")"
#
# .. seealso::
#   :func:`print_command_env`
#     Version that captures changes in the environment
#**
function print_command()
{
  _print_command ${@+"${@}"}
  # Add a newline to the end
  echo ""
}

export does_not_needs_quote_escape_regex

function _print_command()
{
  # Bash < 4.2 https://unix.stackexchange.com/a/411047/123413

  while [ "${#}" -gt "0" ]; do
    if [[ ${1} =~ ^${does_not_needs_quote_escape_regex}$ ]]; then
      if [ "${1::1}" = "-" ]; then
        # Printf is 1000 times slower in windows (fork cost), so only use it if
        # you have to. The only time this is an issue, is if you use -e -E -n
        printf '%s' "${1}"
      else
        echo -n "${1}"
      fi
    else
      echo -n "$(quote_escape "${1}")"
    fi
    shift 1
    if [ "${#}" -gt "0" ]; then
      echo -n " "
    fi
  done
}

#**
# .. function:: print_command_save_env
#
# Sets the saved version of the environment, to compare with when calling :func:`print_command_env`
#
# :func:`print_command_env` needs a before version of the environment, to compare with so it will know which environment variables changes. The only "optional variable assignments" or exported variables that will not be captures, are ones set the same value they already have.
#**
function print_command_save_env()
{
  # Create a copy of the original env
  local __print_command_export_names=($(compgen -A export -X __print_command_copy_*))
  local __name

  for __name in ${__print_command_export_names[@]+"${__print_command_export_names[@]}"}; do
    export __print_command_copy_${__name}="${!__name}"
  done

  # Now that print_command_env is setup, export print_command_env so it is
  # available in children
  export -f print_command_env
  export -f _print_command
}

#**
# .. function:: print_command_env
#
# :Arguments: ``$1``... - List of command + arguments to be echoed
# :Output: *stdout* - A quote escaped version of the command + arguments, ready for ``eval``
# :Uses: * :func:`string_tools.bsh quote_escape`
#        * :func:`print_command`
#
# Accurately echoes out a properly escaped single string representation of a command + arguments, including any "optional variable assignments" and exported environment variables.
#
# When :func:`print_command_save_env` is called, the environment is saved and any changes made to the environment from then on, are captures in a call to :func:`print_command_env`
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   export A=1
#   export B=2
#
#   function foo()
#   {
#     ${DRYRUN} some command ${@+"${@}"}
#   }
#
#   print_command_save_env
#   export DRYRUN=print_command
#
#   # ...
#
#   foo -e q=5
#   # some command -e q=5
#   A=2 foo -t
#   # A=2 some command -t
#   B=2 foo -f
#   # some command -f
#   unset A; foo -y
#   # (unset A; some command -y)
#   export A=1
#   export C=4
#   foo c
#   # C=4 some command c
#**

# Add special case for PWD
function print_command_env()
{
  local __print_command_new_export_names=($(compgen -A export -X __print_command_copy_*))
  local __print_command_new_name
  local __print_command_name
  local __print_command_parentheses=0
  local __print_command_new_value

  # Path should always beee set...
  if [ -z "${__print_command_copy_PATH+set}" ]; then
    echo "Warning: print_command_env called without print_command_save_env being called first" >&2
  fi

  # Handle PWD, because I can
  if [ "${PWD}" != "${__print_command_copy_PWD}" ]; then
    if [[ ${PWD} =~ ^${does_not_needs_quote_escape_regex}$ ]]; then
      echo -n "(cd ${PWD}; "
    else
      echo -n "(cd $(quote_escape "${PWD}"); "
    fi
    __print_command_parentheses=1
  fi

  # Look for unset variables
  for __print_command_name in $(compgen -A export __print_command_copy_); do
    # If it is no longer an exported variable
    __print_command_name="${__print_command_name#__print_command_copy_}"

    # Skip PWD and _, it's a special case
    if [ "${__print_command_name}" = "_" -o "${__print_command_name}" = "PWD" -o \
         "${__print_command_name}" = "SHLVL" -o "${__print_command_name}" = "OLDPWD" ]; then
      continue
    fi

    if ! compgen -A export -X "!${__print_command_name}" &> /dev/null; then
      if [ "${__print_command_parentheses}" = "0" ]; then
        echo -n "("
        __print_command_parentheses=1
      fi
      echo -n "unset ${__print_command_name}; "
    fi
  done

  if [ "${bash_bug_local_shadow_exported_variable}" = "0" ]; then
    for __print_command_new_name in ${__print_command_new_export_names[@]+"${__print_command_new_export_names[@]}"}; do
      # Skip PWD and _, it's a special case
      if [ "${__print_command_new_name}" = "_" -o "${__print_command_new_name}" = "PWD" -o \
           "${__print_command_new_name}" = "SHLVL" -o "${__print_command_new_name}" = "OLDPWD" ]; then
        continue
      fi

      if [ -z "${!__print_command_new_name+set}" ]; then
        if [ "${__print_command_parentheses}" = "0" ]; then
          echo -n "("
          __print_command_parentheses=1
        fi
        echo -n "unset ${__print_command_name}; "
      fi
    done
  fi

  for __print_command_new_name in ${__print_command_new_export_names[@]+"${__print_command_new_export_names[@]}"}; do
    # Skip PWD and _, it's a special case
    if [ "${__print_command_new_name}" = "_" -o "${__print_command_new_name}" = "PWD" -o \
         "${__print_command_new_name}" = "SHLVL" -o "${__print_command_new_name}" = "OLDPWD" ]; then
      continue
    fi
    __print_command_name="__print_command_copy_${__print_command_new_name}"


    if [ -z "${!__print_command_new_name+set}" ]; then
      # Older bash handled above
      if [ "${bash_bug_local_shadow_exported_variable}" = "0" ]; then
        continue
      fi

      # This is the only way I know to access a locally shadowed exported variable
      __print_command_new_value="$(bash -c "echo \"\${${__print_command_new_name}}\"")"
    else
      # Normal case
      __print_command_new_value="${!__print_command_new_name}"
    fi

    # If it was unset or set to a new value
    if [ -z "${!__print_command_name+set}" ] || [ "${!__print_command_name}" != "${__print_command_new_value}" ]; then
      if [[ ${__print_command_new_value} =~ ^${does_not_needs_quote_escape_regex}$ ]]; then
        echo -n "${__print_command_new_name}=${__print_command_new_value} "
      else
        echo -n "${__print_command_new_name}=$(quote_escape "${__print_command_new_value}") "
      fi
    fi
  done

  _print_command ${@+"${@}"}

  if [ "${__print_command_parentheses}" = "1" ]; then
    echo ")"
  else
    echo ""
  fi
}

if [ "${BASH_SOURCE[0]}" = "${0}" ] || [ "$(basename "${BASH_SOURCE[0]}")" = "${0}" ]; then
  print_command ${@+"${@}"}
fi