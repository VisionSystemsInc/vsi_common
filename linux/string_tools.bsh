#!/usr/bin/env false bash

if [[ ${-} != *i* ]]; then
  source_once &> /dev/null && return 0
fi

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd)"
fi

source "${VSI_COMMON_DIR}/linux/compat.bsh"

#*# linux/string_tools

#**
# ============
# String Tools
# ============
#
# .. default-domain:: bash
#
# .. file:: string_tools.bsh
#
#**


# https://stackoverflow.com/a/3352015/4166604

#**
# .. function:: ltrim
#
# :Arguments: * ``$1`` - String to trim
#             * [``$2``] - Characters to trim. Default: [``:space:``]
# :Output: *stdout* - The trimmed string
#
# Left trim a string
#
# .. seealso::
#   :func:`trim` Trim from both ends in one call
#**
function ltrim()
{
  echo "${1#"${1%%[!${2-[:space:]}]*}"}"
}

#**
# .. function:: rtrim
#
# :Arguments: * ``$1`` - String to trim
#             * [``$2``] - Characters to trim. Default: [``:space:``]
# :Output: *stdout* - The trimmed string
#
# Right trim a string
#
# .. seealso::
#   :func:`trim` Trim from both ends in one call
#**
function rtrim()
{
  echo "${1%"${1##*[!${2-[:space:]}]}"}"
}

#**
# .. function:: trim
#
# :Arguments: * ``$1`` - String to trim
#             * [``$2``] - Characters to trim. Default: [``:space:``]. Can be another character or character classes, such as: alnum alpha ascii blank cntrl digit graph lower print punct space upper word xdigit. For multiple characters/classes, use standard pattern matching syntax, minus the []
# :Output: *stdout* - The trimmed string
#
# Trim a string
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   trim ' abcAcba ' # Trim the spaces
#   Result: 'abcAbca'
#
#   trim 'abcAcba' a # Trims the letter a off
#   Result: 'bcAcb'
#
#   trim 'abcAcba' [:lower:] # Trims lowercase letters
#   Result: 'A'
#
#   trim 'abcdAdcba' a-c # Trims range a-c
#   Result: 'dAd'
#
#   trim 'aebcAcbea' aeiou # Trims vowels
#   Result: 'bcAcb'
#
#   See Bash man on "Pattern Matching" for more possibilities. $2 is essentially
#   placed inside a set of []
#
# .. seealso::
#   :func:`ltrim` Trim only from the left
#   :func:`rtrim` Trim only from the right
#**
function trim()
{
  local x
  x="${1#"${1%%[!${2-[:space:]}]*}"}"
  echo "${x%"${x##*[!${2-[:space:]}]}"}"
}


#**
# .. function:: quote_escape
#
# :Arguments: * ``$1`` - String to escape
# :Output: *stdout* - The string with ' escaped properly
#
# Properly escape string for bash, adds ' for you, does not need extra quotes added to string. Useful for printing out instructions that are meant to be copy and pasted, no matter what characters are in the string. Also useful for ``eval``
#
# ``printf '%q' "${foo}"`` does not always work exactly as intended with ``eval`` on bash 3.2. Either the ``\`` is not expanded when double quotes are uses, or ``~`` is expanded without double quotes. With this function, no bash expansion ever occurs.
#
# Quotes do not need to be added to any expression, as ``'`` are added for you.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   eval "x=$(quote_escape "Hi \"  'ya \"")" # <-- Never add quotes after the =
#   [ "${x}" = "Hi \"  'ya \"" ]
#
# .. seealso::
#   :func:`quote_substitute_escape` for use in ``${x-something}``
#**
function quote_escape()
{
  # Gets around Bash <= 4.2 issue
  # https://unix.stackexchange.com/a/411047/123413
  local foo42=\'\\\'\'
  echo "'${1//\'/${foo42}}'"
  # All other bash substitutions do not occur in '
}

#**
# .. function:: quote_unescape
#
# :Arguments: * ``$1`` - String to unescape
# :Output: *stdout* - Unescaped string
#
# Unquote a string quoted using bashes rules for quotes, without using eval.
#
# The ``trap -p`` command outputs string using the single quote notation and only escapes ``'``, while ``declare -p`` used the double quote notation and only has to escape ``\`$"``. Only these escape characters are supported, all other escapes will be left in.
#
# .. warning::
#
#     This only works for specific single quoted strings, like that outputted from :func:`quote_escape`. Mixing a string with ``"`` or ``$'`` will result in error. The only concatenation of two strings supported is ``'\''``.
#**
function quote_unescape()
{
  local x
  if [ "${#1}" -ge "2" ]; then
    if [ "${1:0:1}" = "'"  -a "${1: -1}" = "'" ]; then
      x="${1:1:${#1}-2}" # Remove surrounding quotes
      # Gets around Bash <= 4.2 issue
      # https://unix.stackexchange.com/a/411047/123413
      local foo42="'"
      echo "${x//\'\\\'\'/${foo42}}"
      return
    elif [ "${1:0:1}" = '"'  -a "${1: -1}" = '"' ]; then
      x="${1:1:${#1}-2}" # Remove surrounding quotes
      x="${x//\\\$/\$}"
      x="${x//\\\`/\`}"
      x="${x//\\\"/\"}"
      echo "${x//\\\\/\\}"
      # printf '%b\n' "${x}" # supports //, but I think it's wrong to do \t \n, etc...
      return
    fi
  fi
  echo "${1}"
}

#**
# .. function:: quote_substitute_escape
#
# :Arguments: * ``$1`` - String to escape
# :Output: *stdout* - The string escaped properly
#
# Similar to :func:`quote_escape`, but can be used in the same use cases as :func:`quote_escape` and for variable substitution, e.g. the ``bar`` in ``${foo-bar}``.
#
# Unlike :func:`quote_escape`, quotes do need to be added to any expression. This is because quotes can be added outside the evaluation point of :func:`quote_substitute_escape`.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   unset y
#   eval "x=\"${y-$(quote_substitute_escape "Hi \"  'ya \"")}\"" # <-- Need the \"
#   # Always add the \" after the =
#   [ "${x}" = 'Hi "  '\''ya "' ]
#
#   #also
#
#   eval "x=\"$(quote_substitute_escape "Hi \"  'ya \"")\"" # <-- Need the \"
#   [ "${x}" = 'Hi "  '\''ya "' ]
#
# .. seealso::
#   :func:`quote_escape` for the more generic case not in ``${}``
#**
function quote_substitute_escape()
{
  local x="${1//\\/\\\\}" # First escape \ to \\
  x="${x//\"/\\\"}"       # Then escape "
  x="${x//\$/\\\$}"       # Now start disabling Bash substitutions. $
  echo "${x//\`/\\\`}"    # And the last bash substitution, `
  # All other bash substitutions do not occur in "
}

#**
# .. function:: regex_escape
#
# :Arguments: * ``$1`` - String to escape
# :Output: *stdout* - The escaped string
#
# Adds '\' to the string, so it can be used as a literal string in a regex expression, assuming / is the search command separator
#
# .. var:: regex_escape_threshold
#
# The length threshold between using the pure bash version and sed version to. Set to 600 on Windows, else 50
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   $ regex_escape '***TEST***'
#   \*\*\*TEST\*\*\*
#
# .. note::
#   An extra newline always shows up at the end, just like `echo` (without `-n`) would.
#   Only works for Basic Regex Expressions (BRE). A different function/flag would be needed for extended, as the rules are incompatible with each other (for example ``()``)
#**
if [ "${OS-}" = "Windows_NT" ]; then
  regex_escape_threshold=600
else
  regex_escape_threshold=50
fi

# https://unix.stackexchange.com/a/33005/123413
# Normal regex escapes $.*[\^,   (){}+?| must NOT be escaped
# Extended must escape (), and who knows what else

function regex_escape()
{
  local out=''
  local -i i=0
  local str="${1}"
  if [ "${#str}" -gt "${regex_escape_threshold}" ]; then
    # Faster after sed is started
    sed '# Read all lines into one buffer
         :combine
         $bdone
         N
         bcombine
         :done
         s/[[$.*\^/]/\\&/g' <<< "${str}"
  else
    # Slower, but no process to load, so faster for short strings. On windows
    # this can be a big deal
    # local regex='[[$.*\^/]'
    while (( i < ${#str} )); do
      if [[ ${str:i:1} =~ [[$.*\\/^] ]]; then
        out+="\\${str:i:1}"
      else
        out+="${str:i:1}"
      fi
      i+=1
    done
    echo "${out}"
  fi
}

#**
# .. function:: regex_escape_range
#
# :Arguments: * ``$1`` - String to escape
# :Output: *stdout* - The escaped string range, including []
#
# Adds '\' to the string, so it can be used as a literal string in a regex expression as a character range. Basically this handles the special cases for ``^``, ``-``, and ``]``
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#   $ regex_escape_range '^hk]'
#   []hk^]
#**
function regex_escape_range()
{
  local str="${1}"

  # Special case of ^ by itself, [^] will not work
  if [ "${str}" = "^" ]; then
    echo -n "^"
    return 0
  fi

  # ^ must not be fisrt
  if [[ ${str} =~ \^ ]]; then
    str="${str//^/}^"
  fi
  # - must be last
  if [[ ${str} =~ - ]]; then
    str="${str//-/}-"
  fi
  # ] must be first
  if [[ ${str} =~ ] ]]; then
    str="]${str//]/}"
  fi
  echo -n "[${str}]"
}

#**
# .. function:: uppercase
#
# :Arguments: * ``$1`` - String to convert
# :Output: *stdout* - String in uppercase
#
# Converts a string to uppercase, using ``bash`` or ``tr``
#**
if [ "${bash_feature_case_modification}" = "0" ]; then
  function uppercase()
  {
    echo "${1^^}"
  }
else
  function uppercase()
  {
    tr '[a-z]' '[A-Z]' <<< "${1}"
  }
fi

#**
# .. function:: lowercase
#
# :Arguments: * ``$1`` - String to convert
# :Output: *stdout* - String in lowercase
#
# Converts a string to lowercase, using ``bash`` or ``tr``
#**
if [ "${bash_feature_case_modification}" = "0" ]; then
  function lowercase()
  {
    echo "${1,,}"
  }
else
  function lowercase()
  {
    tr '[A-Z]' '[a-z]' <<< "${1}"
  }
fi

#**
# .. function:: null_dump
#
# :Arguments: * ``$1`` - Header string
#             * ``$2`` - Name of array to be dumped
#             * [``$3``...] - Repeat ``$1`` and ``$2``
# :Output: *stdout* - Null separated dump of data
#
# Prints out multiple arrays, using a null separated schema.
#
# Uses of two two-byte control words, null+carat ``\0^`` between headers (array names), and null+period ``\0.`` between data elements. First prints out the header, than null+carat, then each element of the array, separated by null+period. Then a null+carat between the last element, and the next header, and repeats. Does not add extra control words to the end.
#
# .. rubric:: Examples
#
# .. code-block::
#
#    # An empty set, with the header foo
#    foo\0^
#    # Two empty sets, with the headers foo and bar
#    foo\0^\0^bar\0^
#    # Two set with the headers foo and bar
#    foo\0^boo\0.shoe\0.two\0^bar\0^car\0.sar
#    # One set whose last two elements are empty
#    foo\0^bar\0.car\0.sar\0.\0.
#
# .. rubric:: Parsing scheme
#
# #. Split by ``\0^``. Now you have a list alternating (header, data, header, data, ...)
# #. Split data by ``\0.`` and you have the array elements again.
#
# .. code-block:: python
#
#    data = data.split(b'\0^')
#    data = dict(zip([header.decode() for header in data[::2]],
#        [[chunk.decode() for chunk in group.split(b'\0.')] for group in data[1::2]]))
#**
function null_dump()
{
  local _null_dump_first_line=1

  while (( ${#} )); do
    _null_dump "${1}" "${2}"
    shift 2
  done
}

#**
# .. function:: _null_dump
#
# :Arguments: * ``$1`` - Header string
#             * ``$2`` - Array name
#             * [``$3``] - Last(1), default 0. Set to 1 if this is the last group
# :Output: * *stdout* - Null separated dump of one group of data
#          * ``_null_dump_first_line`` - Used to track if this is the first group or not, automatically set for you, but you will need to clear it before starting a new datadump.
#
# Internal function. Prints one group. Must be combined with all the calls to get the proper number of nulls between groups. (The two nulls between groups are split among calls to :func:`_null_dump`
#
# *Can* be called manually.
#**
function _null_dump()
{
  # Handle name collisions
  if [ "${2}" = "pattern" -o "${2}" = "indirect" -o \
       "${2}" = "indirect_i" -o "${2}" = "_null_dump_first_line" ]; then
    local array_copy="${2}[@]"
    array_copy=(${!array_copy+"${!array_copy}"})
    _null_dump "${1}" array_copy "${3-0}"|| return ${?}
    return 0
  fi

  local indirect="${2}[@]"
  local indirect_i
  local pattern

  # If _null_dump_first_line is unset, then this must be the first
  : ${_null_dump_first_line=1}

  # Create the pattern for writing the header

  # The first group does not start with a \0^, but subsequent groups need to
  # have a \0^ between them, this adds that separator
  if [ "${_null_dump_first_line}" = "0" ]; then
    # The first group header doesn't need an addition separator
    pattern="\0^"
  fi

  # Add the \0^ that separate the header and the data.
  pattern+="%s\0^"
  printf "${pattern}" "${1}"


  # The first data element doesn't need an addition separator
  pattern="%s"
  # Loop over the first element of the array
  for indirect_i in ${!indirect+"${!indirect}"}; do
    printf "${pattern}" "${indirect_i}"
    # Print data separator \0. in between subsequent elements, just not before
    # the first one
    pattern="\0.%s"
  done

  # Mark the next line will not be the first line, so the logic works.
  _null_dump_first_line=0
}

#**
# .. function:: strip_ansi
#
# Removes ANSI codes from a string
#
# :Arguments: * ``$1``... - Strings to be concatenated (space separated).
# :Output: *stdout* - The ANSI Free string
#
# Removes any ANSI CSI, OSC, ST, DCS, SOS, PM, or APC codes. All other ANSI codes are removed assuming there are no data bytes. If any of the "other" codes do have data bytes, they will leak into the output.
#
# .. seealso::
#   :func:`strip_ansi_stream`
#**
function strip_ansi()
{
  local IFS=' '

  if [ "${1::1}" = "-" ]; then
    # Printf is 1000 times slower in windows (fork cost), so only use it if
    # you have to. The only time this is an issue, is if you use -e -E -n
    printf '%s' "${*}" | strip_ansi_stream
  else
    echo -n "${*}" | strip_ansi_stream
  fi
}

#**
# .. function:: strip_ansi_stream
#
# Streaming version of :func:`strip_ansi`, using ``stdin``.
#**
# https://superuser.com/a/1570726/352118
function strip_ansi_stream()
{
  # [@-_], [@-~] and [0-\\?] are C  ranges, not UTF-8
  LANG=C sed -${sed_flag_rE}  $'s|\x1b\\[[0-\\?]*[ -/]*[@-~]||g;
                                s|\x1b[PX^_][^\x1b]*\x1b\\\\||g;
                                s:\x1b\\][^\x07]*(\x07|\x1b\\\\)::g;
                                s|\x1b[@-_]||g'
}

#**
# .. function :: find_any_hash_func
#
# Calls a hash function, does not matter what algorithm is used. Tries sha256 and works its way down to md5. Should work on Linux, Windows, and macOS.
#
# Only useful when you don't care what algorithm is used, only that you need a hash.
#
# .. rubric:: Example
#
# .. code-block:: bash
#
#    checksum=(echo hi | find_any_hash_func)
#    echo "A checksum is ${checksum[0]}"
#**
function find_any_hash_func()
{
  # macOS compat
  if command -v shasum &> /dev/null; then
    shasum -a 256 ${@+"${@}"}
    return
  else
    local hash_func
    for hash_func in sha256sum sha512sum sha384sum sha224sum sha1sum; do
      if command -v "${hash_func}" &> /dev/null; then
        "${hash_func}" ${@+"${@}"}
        return
      fi
    done
  fi
}

#**
# .. function: screen_stuff_escape
#
# The command ``screen -X stuff "something here"`` will process escape sequences. This function helps you make sure your string is treated literally.
#
# :Arguments: * ``$1``- The string to be escaped
# :Output: *stdout* - The screen compatible string
#**
function screen_stuff_escape()
{
  local string="${1}"
  local nl=$'\n'
  string="${string//\\/\\\\}"
  string="${string//${nl}/\\n}" # Turn literal \n into "\n"s
  echo -n "${string}"
}

#**
# .. var:: does_not_needs_quote_escape_regex
#
# A regex to determine if a string needs to be :func:`string_tools.bsh quote_escape` or not, in order to executed via copy and paste of print_command.
#
# .. seealso::
#    https://unix.stackexchange.com/a/357932/123413
#**
does_not_needs_quote_escape_regex='[a-zA-Z0-9_.:/=@%^,+-]+'
