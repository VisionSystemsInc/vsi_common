#!/usr/bin/env bash

if [[ $- != *i* ]]; then
  source_once &> /dev/null && return 0
fi

#*# linux/parser

#**
# ======
# Parser
# ======
#
# .. default-domain:: bash
#
# .. file:: parser.bsh
#
# Functions to parse and/or validate common strings like URLs, etc.
#**

#**
# .. envvar:: PARSER_URI_REGEX
#
# A (best-effort) regex to parse a URL
#
# The following regex is based on https://tools.ietf.org/html/rfc3986#appendix-B with additional sub-expressions to split authority into userinfo, host and port
#
# .. warning::
#
#   Parsing URLs 100% correctly is HARD. This is not that solution.
#
# .. note::
#    From https://stackoverflow.com/a/45977232
#**

PARSER_URI_REGEX='^(([^:/?#]+):)?(//((([^:/?#]+)@)?([^:/?#]+)(:([0-9]+))?))?((/|$)([^?#]*))(\?([^#]*))?(#(.*))?$'
#                 ||            |  |||            |         | |            ||    |        |  |        | |
#                 |2 scheme     |  ||6 userinfo   7 host    | 9 port       ||    12 rpath |  14 query | 16 fragment
#                 1 scheme:     |  |5 userinfo@             8 :...         ||             13 ?...     15 #...
#                               |  4 authority                             |11 / or end-of-string
#                               3  //...                                   10 path

#**
# .. function:: parse_url
#
# Parse a URL
#
# Parse a URL into its various parts: scheme, authority, user, host, port, rpath, query, fragment. Parsing URLs 100% correctly is HARD. This is not that solution.
#
# :Arguments: ``$1`` - URL
#
# .. rubric:: Example
#
# .. code-block:: bash
#
# parse_url https://visionsystemsinc.github.io:443/vsi_common/just/quickstart_user.html?highlight=J.U.S.T#what-is-j-u-s-t
#
# :Output:
#   ``parsed_url_scheme`` - e.g., https
#   ``parsed_url_authority`` - e.g., visionsystemsinc.github.io:443
#   ``parsed_url_host`` - e.g., visionsystemsinc.github.io
#   ``parsed_url_port`` - e.g., 443
#   ``parsed_url_rpath`` - e.g., vsi_common/just/quickstart_user.html
#   ``parsed_url_query`` - e.g., highlight=J.U.S.T
#   ``parsed_url_fragment`` - e.g., what-is-j-u-s-t
#**

function parse_url()
{
  arg="${1}"

  # No quotes around PARSER_URI_REGEX
  if [[ ${arg} =~ ${PARSER_URI_REGEX} ]]; then
    parsed_url_scheme="${BASH_REMATCH[2]}"
    parsed_url_authority="${BASH_REMATCH[4]}"
    #parsed_url_user="${BASH_REMATCH[6]}"
    parsed_url_host="${BASH_REMATCH[7]}"
    parsed_url_port="${BASH_REMATCH[9]}"
    #parsed_url_path="${BASH_REMATCH[10]}"
    parsed_url_rpath="${BASH_REMATCH[12]}"
    parsed_url_query="${BASH_REMATCH[14]}"
    parsed_url_fragment="${BASH_REMATCH[16]}"
    return 0
  fi
  return 1 # URL did not parse
}

# validate email address
# https://stackoverflow.com/a/201378

# parse git repository's remote url
# this regex supports the git@ and http[s]:// protocols
# https://stackoverflow.com/a/22312124
# RE assuming the URL can be as complex as a standard URL (at least in the case
# of the http protocol), this probably is not as strict as the regex used by
# parse_url
# RE here are some examples of git urls:
# https://git-scm.com/docs/git-clone#_git_urls
# RE here is how git does it: https://stackoverflow.com/a/31801532
